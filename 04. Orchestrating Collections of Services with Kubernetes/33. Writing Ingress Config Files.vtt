WEBVTT

00:00.780 --> 00:05.610
We've now created a ingress controller through Ingress and X inside of our cluster.

00:05.820 --> 00:10.410
So now we need to teach this thing a couple of routing rules and tell it how to take incoming requests

00:10.410 --> 00:12.630
and send them off to some appropriate pods.

00:12.990 --> 00:17.280
We're going to do that by writing a config file that's going to contain some router rules.

00:17.430 --> 00:22.230
We will then feed that into our cluster, where it will be automatically discovered by the ingress controller.

00:22.260 --> 00:26.940
The ingress controllers then going to update its own internal set of routing rules to match the ones

00:26.940 --> 00:27.900
that we just gave it.

00:28.110 --> 00:30.150
So let's create this config file.

00:30.830 --> 00:34.640
Back inside my editor, I'm going to find my AIDS directory.

00:34.640 --> 00:39.320
And inside there I'll make a new file called Ingress CRV HTML.

00:41.110 --> 00:43.310
So inside of here, we're going to write out some more config.

00:43.330 --> 00:46.240
Similar nature to a lot of the config we've already put together.

00:46.600 --> 00:49.630
I'm going to first start off with an API version once again.

00:49.840 --> 00:53.200
This one is going to be very different than the API versions we've used previously.

00:53.590 --> 00:55.150
I'm going to put in networking.

00:55.270 --> 00:55.690
Okay.

00:56.440 --> 00:58.330
IO slash v one.

00:58.570 --> 00:59.290
Beta one.

01:00.430 --> 01:03.460
I'll then put in a kind of ingress.

01:04.360 --> 01:05.980
We'll have some metadata.

01:07.140 --> 01:10.260
I'm going to give this thing a name of ingress CRV.

01:11.360 --> 01:13.250
And then this next one is really important.

01:13.250 --> 01:15.500
We're going to put in annotations.

01:16.460 --> 01:18.620
And inside their Kubernetes.

01:20.160 --> 01:24.540
IO ingress S-Class of Engine X.

01:25.080 --> 01:30.120
This entire annotation section is what's going to help the ingress controller understand that we are

01:30.120 --> 01:35.880
trying to feed it some routing rules, so the ingress controller is going to continuously scan all the

01:35.880 --> 01:38.130
different objects or all the different config files.

01:38.130 --> 01:42.540
So we're throwing into our cluster and it's going to try to find one that has this exact annotation

01:42.540 --> 01:43.170
right here.

01:43.320 --> 01:47.790
When it finds this, the ingress controller is going to say, Oh, this must thing, this thing must

01:47.790 --> 01:49.560
have some routing rules for me.

01:50.350 --> 01:51.070
Really quickly.

01:51.070 --> 01:54.580
Make sure you've got the correct spelling on annotations and Kubernetes.

01:54.610 --> 01:57.220
A lot of easy places to make typos inside of here.

01:58.800 --> 02:00.810
Next up, we're going to put our spec together.

02:00.840 --> 02:02.760
Inside a spec, we'll have rules.

02:03.610 --> 02:09.160
Rules is going to have all the different routing rules that we want to apply to teach the ingress controller

02:09.160 --> 02:12.520
how to take incoming traffic and route them off to our different pots.

02:13.950 --> 02:15.480
Rules is going to be an array.

02:15.480 --> 02:20.790
And as we've seen many times to designate an array entry in YAML, we'll put in a single dash like so.

02:21.560 --> 02:23.660
Well then write in a host of posts.

02:24.680 --> 02:26.560
That probably doesn't make any sense just yet.

02:26.570 --> 02:27.300
Totally fine.

02:27.320 --> 02:28.640
Just bear with me for a moment.

02:29.460 --> 02:34.350
We're then going to write in HTTP hats, another array entry.

02:34.350 --> 02:35.730
So a dash right there.

02:36.360 --> 02:40.770
And the first routing rule that we're going to set up is going to take incoming traffic and send it

02:40.770 --> 02:42.690
off to our post service.

02:43.020 --> 02:47.070
So as a quick reminder, if we open up our post micro microservice right here and take a look at the

02:47.070 --> 02:52.800
indexes file, we expect to get traffic on the incoming route of posts.

02:53.530 --> 02:58.290
So we're going to make sure that if any request is coming into our application with a path of slash

02:58.330 --> 03:01.960
posts, we're going to send it off to our post microservice.

03:02.830 --> 03:06.160
To do so we're not going to send it directly to the post pod or anything like that.

03:06.160 --> 03:11.800
Instead, we're going to send it to the post cluster IP service because remember, these cluster IP

03:11.800 --> 03:15.640
services are how we communicate between different things inside of our cluster.

03:16.210 --> 03:20.290
So to implement all that, we're going to write out path of slash posts.

03:21.900 --> 03:23.280
Then back end.

03:24.210 --> 03:29.820
Service name is post cluster IP service or CRV.

03:30.610 --> 03:32.500
And then the ports on that service.

03:32.500 --> 03:34.960
So service port of 4000.

03:35.140 --> 03:40.810
And remember, it is 4000 because that's what we had designated back inside of our Post Depot right

03:40.810 --> 03:43.570
here, port of 4000.

03:45.350 --> 03:45.600
Okay.

03:45.620 --> 03:47.330
So that is our first routing rule.

03:47.360 --> 03:51.680
Now, we haven't really discussed what is going on with this post thing right there, but right now,

03:51.680 --> 03:54.410
let's just save this and then go back over to our terminal.

03:55.330 --> 03:59.230
And we're going to apply that config file between the last video and this one.

03:59.230 --> 04:01.340
I already change back into my AIDS directory.

04:01.360 --> 04:05.660
Make sure you do the same and then we will apply the ingress csv file.

04:05.680 --> 04:10.720
So it'll apply f ingress svg html.

04:12.380 --> 04:16.340
For me, it says unchanged because I did a quick test right before this video for you.

04:16.370 --> 04:18.410
Hopefully you will see something that says created.

04:19.330 --> 04:24.430
If you see any errors right now, chances are that something went wrong during the initial setup process

04:24.430 --> 04:25.350
in the last video.

04:25.360 --> 04:28.660
Or most likely you might have made a typo inside this file.

04:29.800 --> 04:29.930
Okay.

04:30.100 --> 04:35.110
So we've now applied this config file and in theory we have updated a configuration of this ingress

04:35.110 --> 04:35.800
controller.

04:35.920 --> 04:37.600
But how do we actually test this out?

04:37.960 --> 04:41.440
Well, a lot of this comes back to this host property right here.

04:41.920 --> 04:43.090
Let's take a quick pause right here.

04:43.090 --> 04:47.260
I'm going to tell you a little bit more about this host property and what it's really doing for us.

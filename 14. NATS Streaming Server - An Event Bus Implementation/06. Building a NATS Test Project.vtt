WEBVTT

00:00.990 --> 00:01.740
Enough lecturing.

00:01.770 --> 00:03.260
Time to start writing out some code.

00:03.270 --> 00:04.760
So here's our short term goal.

00:04.770 --> 00:07.140
Here's what we're going to go through in the next couple of videos.

00:07.170 --> 00:11.130
We're going to create a new sub project inside of our current project directory.

00:11.580 --> 00:15.330
We're going to make sure that it has TypeScript support because I want to make sure that we understand

00:15.330 --> 00:18.060
how to work with Node Nat streaming while using TypeScript.

00:18.570 --> 00:22.770
We're then going to install Node Nat streaming into it and we're going to use it to connect to our NAT

00:22.770 --> 00:23.640
streaming server.

00:24.430 --> 00:29.320
Then inside this little sub project, we're going to make sure that we have two different NPM scripts,

00:29.320 --> 00:31.540
essentially two different ways to run our project.

00:31.690 --> 00:37.180
One script is going to try to run some code to emit events into that streaming server, and the other

00:37.180 --> 00:40.330
script is going to run some code that's going to listen for events.

00:40.720 --> 00:45.910
So we'll then have essentially two separate programs where we can emit events or listen for events.

00:47.390 --> 00:51.290
Last important note that I want to throw out is that this program or essentially these two separate

00:51.290 --> 00:54.980
programs are going to be executed from outside of Kubernetes.

00:54.980 --> 00:58.640
So we're not going to worry about creating a deployment or anything like that.

00:58.670 --> 01:03.380
However, this is going to present some interesting challenge because we're going to want to connect

01:03.380 --> 01:07.940
to the node nat streaming server or the NAT streaming server that is running inside of our Kubernetes

01:07.940 --> 01:08.560
cluster.

01:08.570 --> 01:13.280
So we just need to keep in mind that we need to somehow get access to the NAT streaming server.

01:13.840 --> 01:14.930
Okay, so let's get to it.

01:15.080 --> 01:17.900
To get started, I'm going to go back over to my terminal.

01:18.080 --> 01:21.730
I'm inside of my route ticketing directory inside of here.

01:21.740 --> 01:24.800
I'm going to make a folder called Nat's Test.

01:25.630 --> 01:30.310
The only reason I'm calling it a test is to just make it really clear that this is some little test

01:30.310 --> 01:31.540
project inside of here.

01:33.140 --> 01:34.760
I'm going to change into that directory.

01:35.210 --> 01:37.370
Generate a package json file.

01:40.220 --> 01:42.700
Well then install a couple of different dependencies.

01:42.710 --> 01:46.070
So in total we're going to get that node and that's streaming thing.

01:46.100 --> 01:50.420
We're also going to get a couple of other dependencies just to run this project using TypeScript.

01:50.930 --> 01:52.370
So NPM install.

01:53.210 --> 01:56.810
We're going to get node nats streaming.

01:58.000 --> 01:59.940
RT's node dev.

02:00.770 --> 02:01.640
TypeScript.

02:02.030 --> 02:07.940
And then we're also going to get a type definition file for node JS itself at types slash node.

02:10.580 --> 02:10.830
Okay.

02:10.850 --> 02:11.750
Let's run that.

02:13.220 --> 02:15.890
It's going to take just a moment or two to install all that stuff.

02:15.890 --> 02:20.750
So while that's running, let's go back over to our editor and find the new Nats dash test directory.

02:22.390 --> 02:26.740
Inside there, I'm going to make a new folder called CRC.

02:28.770 --> 02:29.850
And inside of CRC.

02:29.850 --> 02:31.710
I'm going to create two files.

02:31.950 --> 02:34.040
I'm going to call one publisher.

02:34.500 --> 02:35.070
Yes.

02:35.870 --> 02:37.970
And the other listener.

02:38.330 --> 02:38.820
Yes.

02:39.650 --> 02:43.180
So these are going to be essentially the two separate programs we're going to put together.

02:43.190 --> 02:45.800
One is going to be dedicated to listening for events.

02:45.800 --> 02:47.800
As you'd guess, that's listener duties.

02:48.290 --> 02:51.120
And the other is going to be dedicated to publishing events.

02:51.140 --> 02:52.950
Obviously publisher duties.

02:54.210 --> 02:56.310
Before worrying about writing out any code inside of here.

02:56.340 --> 03:02.370
Let's write out some different scripts to run each of these two separate files inside a package json.

03:02.640 --> 03:04.350
I will delete the test script.

03:05.060 --> 03:07.490
And I'm going to replace it with publish.

03:11.000 --> 03:15.470
Whenever we run the Polish command, we're going to execute RTS node dev.

03:16.490 --> 03:20.420
We're going to put in a option here of dash, dash, notify, false.

03:21.200 --> 03:23.190
And then we're going to try to run the show.

03:23.270 --> 03:23.870
See?

03:25.010 --> 03:26.960
Publisher file.

03:27.910 --> 03:30.760
Then as a second script, we're going to do pretty much the same thing.

03:31.210 --> 03:33.340
It will change the script name to listen.

03:34.120 --> 03:35.200
Still going to do no.

03:35.200 --> 03:36.190
Dev dash.

03:36.190 --> 03:37.060
Dash notify.

03:37.090 --> 03:37.780
False.

03:38.660 --> 03:40.360
SC And this time around.

03:40.360 --> 03:41.830
Listener Yes.

03:44.870 --> 03:45.710
That looks good.

03:47.440 --> 03:51.190
So we've got some root files, we've got dependencies, we've got our scripts.

03:51.370 --> 03:55.000
Before we start to write out some code, one last little administrative thing we have to do.

03:55.030 --> 04:00.100
We are making use of TypeScript, so we really should still create a config file inside of here.

04:00.400 --> 04:02.530
To do so, we can go back over to our terminal.

04:03.290 --> 04:07.820
And again inside of our Natt stash test directory, a TSE dash dash in it.

04:08.210 --> 04:12.920
And of course, this command is assuming that you have TypeScript globally installed on your system.

04:13.190 --> 04:19.040
So if you get an error from that, you'll need to do an NPM, install dmg typescript and then rerun

04:19.040 --> 04:20.720
tsk in it.

04:22.440 --> 04:22.830
Okay.

04:22.830 --> 04:24.810
So let's go back over.

04:25.110 --> 04:28.500
We're going to first start off inside of our publisher file.

04:29.800 --> 04:30.070
Inside.

04:30.070 --> 04:33.700
If you're at the very top, let's first import the node and that streaming library.

04:34.270 --> 04:38.200
So we're going to import nets from node nets streaming.

04:39.560 --> 04:42.740
We're then going to use this library to create a client.

04:42.770 --> 04:47.750
The client is what is going to actually connect to our streaming server and try to exchange some information

04:47.750 --> 04:48.320
with it.

04:49.140 --> 04:52.350
So we'll say client is next connect.

04:52.680 --> 04:54.030
Now, quick note here.

04:54.030 --> 04:58.620
You're going to see inside of just about all the documentation rather than calling this thing client,

04:58.620 --> 05:00.680
which is a very reasonable term for it.

05:00.690 --> 05:04.140
Instead, a lot of documentation is going to refer to this as Stan.

05:04.620 --> 05:09.210
So Stan is just kind of a gnat streaming server or Nats project.

05:09.210 --> 05:13.530
Little piece of terminology is just what they like to call a client.

05:13.910 --> 05:19.500
That's, as you'd kind of guess, is simply to me or Stan is just Nat's backwards.

05:19.980 --> 05:21.570
So Nat's is the library.

05:21.570 --> 05:23.150
We're kind of a class of sorts.

05:23.160 --> 05:28.110
Stan is an actual instance or a client that we're using to connect to Nat streaming server.

05:28.560 --> 05:33.120
If you want to instead call this client because it's 1000 times more clear, that's totally fine.

05:33.120 --> 05:36.420
But I'm going to stick with the community convention, which is to call it Stan.

05:38.600 --> 05:39.890
It's now inside of Kinect right here.

05:39.890 --> 05:41.270
We're getting an ear, of course.

05:41.280 --> 05:44.210
So we need to put in a couple of different arguments to this thing.

05:44.600 --> 05:48.170
The first two arguments are going to put in we're going to throw in for right now and we'll come back

05:48.170 --> 05:51.410
and discuss why we use these values in just a little bit.

05:52.170 --> 05:55.170
The first thing I'm going to put in is a string of ticketing.

05:55.920 --> 05:58.380
But the second argument I'm going to put in ABC.

05:59.220 --> 06:03.900
And then finally, for the last argument, I'm going to put in an object, I'm going to specify a URL

06:04.290 --> 06:11.370
and I'll put in an address right here of HTTP, own slash, slash, localhost or two, two, two.

06:14.770 --> 06:20.980
Then after that, we're going to wait for Stan or the client in this case to successfully connect to

06:20.980 --> 06:22.330
our net streaming server.

06:22.750 --> 06:26.680
So to wait for this thing to actually connect, unfortunately, again, we don't get to make use of

06:26.680 --> 06:28.570
that nice async await syntax.

06:28.580 --> 06:31.750
Instead, we have to take a primarily event driven approach.

06:32.350 --> 06:38.010
So after the client successfully connects to the net, streaming server is going to emit a connect event.

06:38.020 --> 06:40.180
So we're going to listen for the Connect event.

06:40.780 --> 06:43.960
I'm going to put in stand on Connect.

06:44.960 --> 06:47.000
And then a function as a second argument.

06:47.240 --> 06:52.400
So this function will be executed after the client has successfully connected to the net streaming server.

06:52.970 --> 06:57.470
Let's do a console.log inside of here just to kind of confirm that that takes place.

06:57.980 --> 07:00.770
So I'll do a console log of publisher.

07:01.460 --> 07:03.560
Connected to Nats.

07:04.890 --> 07:05.040
Okay.

07:05.100 --> 07:06.000
So this looks good.

07:06.370 --> 07:07.560
Let's save this right here.

07:07.590 --> 07:11.700
If we try to run this code right now, we're going to get an error because our net streaming server

07:11.700 --> 07:14.550
is not available on localhost, four, 2 to 2.

07:15.000 --> 07:20.040
Remember, our NAT string server is running inside of our Kubernetes cluster, and by default, we don't

07:20.040 --> 07:22.500
have direct access to anything running inside there.

07:22.920 --> 07:23.940
So let's take a pause right here.

07:23.940 --> 07:27.570
We'll come back to the next video and figure out how we can somehow get access to the NAT streaming

07:27.570 --> 07:30.720
server very easily just for test purposes.

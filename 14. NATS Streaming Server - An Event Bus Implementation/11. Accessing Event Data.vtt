WEBVTT

00:00.790 --> 00:05.800
In the last video, we set up a subscription inside of our listener, and we said that any time we received

00:05.800 --> 00:10.090
a message over the channel of Ticket Colon created, we were going to simply console.log.

00:10.090 --> 00:11.290
Message received.

00:11.620 --> 00:18.130
If we go back over to our terminal, we can select the publisher window and put in rows a couple of

00:18.130 --> 00:19.810
times to restart this thing.

00:20.050 --> 00:25.720
And every single time we do, we are publishing a brand new event and clearly the listener is receiving

00:25.720 --> 00:27.010
that every single time.

00:28.190 --> 00:31.880
But right now we're just doing a very simple console.log of message received.

00:31.910 --> 00:35.820
Let's try to print out some more information about the message that was actually received.

00:35.840 --> 00:40.040
In other words, let's actually access the data inside there and try to console, log it out.

00:40.960 --> 00:45.610
So back inside my listener file, I'm going to take a look at that callback function right there.

00:46.340 --> 00:52.230
So we receive a argument of message to this thing, which we usually abbreviate simply as MSG.

00:52.760 --> 00:56.960
If we hover over that right now, TypeScript thinks that it is of type any.

00:57.830 --> 01:00.000
We're going to give TypeScript a little bit of help.

01:00.020 --> 01:02.660
We're going to tell TypeScript that this is not of type any.

01:02.660 --> 01:05.180
Instead, it is something of type message.

01:05.750 --> 01:10.750
To do so, we're going to first import the message type from the Node Nat streaming library.

01:10.760 --> 01:15.020
So at the very top we will import message like so.

01:16.350 --> 01:21.210
This is an interface that's going to describe the type of this argument right here.

01:21.780 --> 01:26.820
So I'm going to put in a type annotation of message like so.

01:28.050 --> 01:32.790
And then going to do a command click on message so we can take a look at the type definition for it

01:32.790 --> 01:35.610
so we can understand what properties are available inside their.

01:36.730 --> 01:40.930
That's going to take us to the type definition file for the node net streaming library that we already

01:40.930 --> 01:42.520
looked at one or two videos ago.

01:42.730 --> 01:49.630
Now, just so you know, there is documentation around node net streaming over on NPM, but a lot of

01:49.630 --> 01:54.970
the documentation on here is really about some nitty gritty aspects of the library as opposed to the

01:54.970 --> 01:56.950
individual methods that we have access to.

01:57.190 --> 02:01.570
So to get some actual documentation and understand the different methods, properties and so on, do

02:01.570 --> 02:05.770
we have access to we're going to spend a lot of time looking at the type definition file.

02:07.160 --> 02:10.190
So inside of here, we can see exactly what a message is.

02:10.310 --> 02:13.930
A message is going to have a couple of different properties associated with it.

02:13.940 --> 02:18.290
All of these are different functions that you and I are going to call to access some information included

02:18.290 --> 02:19.160
in the message.

02:19.550 --> 02:22.760
Some of these different methods we don't really care about at all.

02:22.760 --> 02:25.580
But there are a couple that are extremely important for us.

02:26.090 --> 02:29.600
At this point, I want to point out two or three that are really important.

02:29.780 --> 02:31.880
The first one is get subject right here.

02:32.060 --> 02:36.950
Get subject is going to return the name of the channel that this message just came out of.

02:37.220 --> 02:42.320
Now, this one isn't super important for us because, well, we already know the name of the channel

02:42.320 --> 02:43.670
because we just subscribe to it.

02:43.670 --> 02:44.050
Right?

02:44.060 --> 02:51.770
2 seconds ago, if we called the git subject method on message, we would just get back that right there,

02:51.770 --> 02:52.970
that same exact string.

02:53.210 --> 02:55.550
It's just the name of the channel that we got the message from.

02:56.180 --> 03:01.250
So a little bit more relevant for us are the methods of git sequence and get data.

03:01.910 --> 03:05.660
Git sequence is going to return the number of this event in.

03:06.260 --> 03:09.070
All events start off at number one.

03:09.080 --> 03:13.880
In other words, the very first event that we emit on a channel will be assigned a sequence number of

03:13.880 --> 03:14.360
one.

03:14.540 --> 03:18.740
The second event we emit on the channel will be given a sequence number of two, three, four, and

03:18.740 --> 03:19.280
so on.

03:20.810 --> 03:23.230
The other method that's very important is get data.

03:23.240 --> 03:27.980
So this is going to return the actual data that's included inside the message or what we refer to as

03:27.980 --> 03:28.670
an event.

03:28.820 --> 03:34.220
So in our case, back inside of our publisher, we have some data that we're sending inside of this

03:34.220 --> 03:36.340
message of some tickets.

03:36.350 --> 03:40.910
So if we try to pull our data using that get data method out of the message inside of our listener,

03:40.910 --> 03:43.730
we should get back something that looks like this right here.

03:44.500 --> 03:48.790
Do you remember that all information in that streaming is exchanged as strings for us?

03:49.030 --> 03:53.830
And so we threw this object in as JSON into that event.

03:53.830 --> 03:59.590
And so if we tried to extract information back inside of our listener from this message, we're going

03:59.590 --> 04:00.700
to get that same object.

04:00.700 --> 04:04.900
But in JSON form, which just means we're going to have to run a JSON pass on it.

04:05.380 --> 04:09.550
And the other thing I want to point out is that the git data method is going to return either a string

04:09.550 --> 04:10.510
or a buffer.

04:10.810 --> 04:14.950
So as far as TypeScript is concerned, TypeScript wants us to make sure that we're actually working

04:14.950 --> 04:16.900
with the string when we call get data.

04:17.650 --> 04:23.140
So with all this in mind, let's go back to our listener inside of our little callback right there.

04:23.140 --> 04:24.670
I'm going to remove that console log.

04:25.840 --> 04:28.450
I'm going to pull our data out of the message.

04:30.230 --> 04:34.280
And so, again, if we now hover over this thing, it's going to tell us that it's either a string or

04:34.280 --> 04:34.940
a buffer.

04:34.970 --> 04:38.560
So we have to put in a little type check to make sure we're actually working with the string.

04:38.570 --> 04:41.630
We're not really going to ever be worrying or dealing with buffers.

04:41.630 --> 04:43.490
For us, it's just about always going to be a string.

04:43.490 --> 04:46.190
We're just putting in this check right here to make TypeScript happy.

04:46.670 --> 04:48.890
So we'll say if type of data.

04:49.720 --> 04:50.620
Is this string.

04:51.110 --> 04:54.520
Now let's go ahead and try to parse it and console.log out some information.

04:55.210 --> 04:56.680
So I'm going to do a console.log.

04:57.990 --> 05:00.210
I'm going to put a template string inside of here.

05:01.180 --> 05:04.990
Console.log received event number.

05:05.860 --> 05:09.400
And I'm going to try to print out the number of this event or its sequence number.

05:09.730 --> 05:15.250
So I'll do some string interpolation and inside there I'll put in MSG target sequence.

05:18.090 --> 05:21.780
And then a comma right after say it with data.

05:23.580 --> 05:25.950
And then I'll try to parse the data.

05:26.790 --> 05:28.110
From the JSON that it currently is.

05:28.110 --> 05:34.260
So I'll do another bit of string interpolation and JSON parse data.

05:34.650 --> 05:36.900
I'm going to save this just so it wraps that string around.

05:37.140 --> 05:37.770
There we go.

05:39.950 --> 05:41.720
All right, so let's make sure we save this.

05:41.720 --> 05:44.270
We're then going to go back over to our terminal and test it out.

05:45.480 --> 05:49.050
So as soon as our listener restarts, well, we have not yet received an event.

05:49.050 --> 05:51.630
If we want to test this thing, we need to publish another event.

05:51.630 --> 05:53.610
So we'll go back over to the publisher window.

05:53.610 --> 05:59.940
But in the press hit enter and now we'll see right there received event 18 with data and unfortunately

05:59.940 --> 06:02.310
our data was turned into object object.

06:02.310 --> 06:05.460
Just an oddity of console logging with Node.js.

06:06.030 --> 06:09.570
Rather than parsing the JSON out, let's just leave it as a string so we can make sure that the raw

06:09.570 --> 06:10.710
data is inside there.

06:11.250 --> 06:17.670
So back at this console log, I will remove the JSON parse and just console log the data itself.

06:18.580 --> 06:19.150
I'll save this.

06:19.180 --> 06:19.980
Go back over.

06:19.990 --> 06:21.760
I'm going to emit another event.

06:22.640 --> 06:25.450
By doing another RS on the left and that's better.

06:25.460 --> 06:28.670
So now I see it received event number 19 with that data.

06:29.090 --> 06:33.560
If I start to publish a couple more events by restarting the publisher, you're going to see that that

06:33.560 --> 06:36.050
sequence number gets incremented every single time.

06:38.340 --> 06:41.970
So event number 19, 20, 21, 22, 23, and so on.

06:42.600 --> 06:43.110
Cool.

06:43.230 --> 06:43.590
All right.

06:43.590 --> 06:47.610
So just a little bit more of terminology and how we work with the incoming message.

06:47.640 --> 06:50.970
I did promise at the end of the last video that things were about to get a bit crazy.

06:51.180 --> 06:52.150
It doesn't seem like it yet.

06:52.170 --> 06:52.520
Right.

06:52.530 --> 06:52.820
Okay.

06:52.830 --> 06:54.210
We'll just give you another video or two.

06:54.210 --> 06:56.040
So quick pause and I'll see you in just a minute.

WEBVTT

00:01.200 --> 00:04.020
You've now got one publisher and two listeners.

00:04.050 --> 00:07.360
Let's now try to emit another event by restarting the publisher.

00:07.380 --> 00:12.890
So I'm going to put in an RC hit Enter, and then I'm going to see two console logs, one from each,

00:12.910 --> 00:13.800
the listeners.

00:13.830 --> 00:18.960
It looks like they both received that identical event, the one with the sequence number of 52.

00:19.440 --> 00:21.180
So we now have two of these listeners.

00:21.180 --> 00:24.150
They both receive the exact same piece of information.

00:24.150 --> 00:28.920
And so presumably inside of any normal application, if this was a real app, they would both run some

00:28.920 --> 00:30.570
processing on that event.

00:30.750 --> 00:32.580
Now, quick question for you.

00:32.910 --> 00:38.790
If these truly are identical services, just multiple copies or two instances of the same service,

00:38.790 --> 00:42.480
would sending them both the same exact event present an issue?

00:42.900 --> 00:44.460
Well, maybe.

00:44.760 --> 00:48.280
Let's think back to the earlier project we worked on inside this course.

00:48.300 --> 00:50.670
I'm going to open up my code editor very quickly.

00:51.390 --> 00:53.730
Back on that blog project directory.

00:55.030 --> 00:55.300
Okay.

00:55.300 --> 01:00.520
So you might remember working on the blog project inside of here, we allowed users to create posts

01:00.520 --> 01:01.690
and comments.

01:01.810 --> 01:06.310
One big problem we ran into was making sure that we could make one single request and get all of our

01:06.310 --> 01:10.240
posts and all of our comments all inside of one request.

01:10.840 --> 01:14.110
To allow for that, we created something called the query service.

01:14.290 --> 01:18.520
And inside the query service we had some code that would receive events.

01:19.850 --> 01:23.180
We then processed all those events inside of this handle event function.

01:23.780 --> 01:28.570
We had some code inside there to handle post created, comment created and comment updated.

01:28.580 --> 01:32.510
But there's one event type that I want to focus on in great detail.

01:32.690 --> 01:34.700
The comment created event.

01:35.120 --> 01:41.330
So whenever we got an event of type comment created, we took a look at the ID of that incoming event

01:41.330 --> 01:42.980
or the post ID in this case.

01:43.100 --> 01:45.620
We found the post that we had previously saved.

01:45.890 --> 01:51.410
We then took a look at all the comments that we had associated with it, and then we pushed in a brand

01:51.410 --> 01:53.780
new object representing that comment.

01:54.140 --> 01:58.380
Now for a second, let's just imagine that we were not storing these posts in memory.

01:58.400 --> 02:03.620
Let's imagine instead that we are storing these posts inside of some kind of MongoDB database or some

02:03.620 --> 02:05.180
other similar kind of database.

02:06.490 --> 02:10.000
So let's imagine what would happen if we ran this code right here.

02:10.930 --> 02:12.530
Or something like that.

02:12.550 --> 02:15.790
On two separate instances of this query service.

02:16.700 --> 02:18.740
Well, we would take the incoming event.

02:18.740 --> 02:24.800
We would pull off the ID content and status, and then we would add that in as a brand new comment inside

02:24.800 --> 02:26.270
of our list of comments.

02:26.540 --> 02:31.040
So what would happen if we essentially ran that line of code twice?

02:31.070 --> 02:32.240
Well, very simple.

02:32.240 --> 02:37.040
We would end up with the same exact comment twice inside this comments array.

02:38.120 --> 02:39.530
So very frequently.

02:39.530 --> 02:46.550
We do not want to allow an incoming event to go off to every copy of every service that we have.

02:46.670 --> 02:51.380
So in other words, if we've got multiple copies or multiple instances of the same service, usually

02:51.380 --> 02:55.340
we want to make sure that an incoming event is only going to go to one of them.

02:55.340 --> 02:59.960
So either this first copy of it right here or this first copy of it over here.

03:00.580 --> 03:01.810
So how can we do that?

03:01.840 --> 03:05.980
Well, there's something built into that streaming server that's going to make this very easy.

03:06.010 --> 03:08.350
It's something called a queue group.

03:09.010 --> 03:12.580
Queue groups are something that are going to be created inside of a channel.

03:12.880 --> 03:17.560
So at this point, we have a channel called Ticket Colon created inside this channel.

03:17.560 --> 03:19.930
We are going to create a queue group.

03:21.570 --> 03:25.170
We can have multiple groups associated with one channel.

03:25.880 --> 03:31.010
So inside of this channel, we'll have our list of cue groups and we're going to give it some specific

03:31.010 --> 03:31.530
name.

03:31.550 --> 03:33.590
It can be anything we want to name it.

03:33.620 --> 03:38.120
It just has to be some thing that kind of more or less makes sense to us.

03:38.330 --> 03:42.860
So let's imagine that inside of here, we create a cue group called simply My Cue Group.

03:44.230 --> 03:48.850
We're then going to make sure that our order service, every instance of the order service, creates

03:48.850 --> 03:52.900
a subscription and joins that Q group.

03:54.700 --> 03:56.110
Like so.

03:57.610 --> 04:03.250
Now whenever we get an event coming into the ticket created channel that streaming is going to take

04:03.250 --> 04:05.470
a look at all the different groups we have.

04:05.680 --> 04:11.380
It's then going to more or less randomly select one of the members out of every one of these groups

04:11.380 --> 04:14.560
and send the event to only one of those members.

04:14.980 --> 04:20.290
So in this case, because both copies of our order service are members of my Q group, that streaming

04:20.290 --> 04:26.440
server is going to take the event and send it off to only this service or potentially only that service

04:26.440 --> 04:27.160
right there.

04:29.290 --> 04:34.210
Now, just to be clear, we can still have other services that are not a member of this specific group.

04:34.300 --> 04:38.590
So let's imagine that at some point in time in the future, maybe we have some other service, some

04:38.590 --> 04:39.520
third service.

04:39.730 --> 04:41.830
This can have a subscription of its own.

04:42.190 --> 04:45.910
That is just listening to general events coming out of ticket created.

04:46.150 --> 04:48.550
It does not have to be a member of that group.

04:48.790 --> 04:53.350
So now whenever we have an event come in, that streaming server is going to take the event and it's

04:53.350 --> 04:58.270
going to send off to either that service or that service because they are both members of that same

04:58.510 --> 04:59.050
group.

04:59.380 --> 05:04.660
But then any other service that is just listening to the overall channel will also receive a copy of

05:04.660 --> 05:05.350
the event.

05:05.800 --> 05:11.650
So we can really think of cue groups as limiting the number of times we send out an event to just members

05:11.650 --> 05:12.580
of that group.

05:13.860 --> 05:15.240
So how do we set up a coup group?

05:15.270 --> 05:17.820
Well, fortunately, it is really, really easy.

05:18.090 --> 05:21.780
Back inside my editor, I'm going to go to our listener file.

05:21.930 --> 05:23.520
So here's listener us right here.

05:24.500 --> 05:26.660
I'm going to find where we create our subscription.

05:26.990 --> 05:32.690
And as a second argument to subscribe, I'm going to put in the name of the Q group that I want to join.

05:32.960 --> 05:34.490
So again, this can be any name.

05:34.490 --> 05:36.830
It just needs to be something that kind of makes sense to you and I.

05:37.130 --> 05:41.810
So in this case, maybe I will create a Q group with a name of listener.

05:43.030 --> 05:44.070
Q grew.

05:44.770 --> 05:49.210
Maybe a better format for this would be to name the Q group after the type of service that is joining

05:49.210 --> 05:49.330
it.

05:49.330 --> 05:54.430
So in our case, we've got a Q group right here that is only going to have the copies of the Order service

05:54.430 --> 05:54.970
joining.

05:55.120 --> 06:01.480
So perhaps the better name would be something like Orders Service Q Group or something like that.

06:02.440 --> 06:08.590
If we want to take that approach, then we would put in something like orders service you group that

06:08.590 --> 06:09.490
would work as well.

06:10.350 --> 06:14.960
The only requirement is that we make sure that every different service that tries to join into the skew

06:15.000 --> 06:16.650
group has that same string.

06:18.130 --> 06:18.340
Okay.

06:18.340 --> 06:19.510
So let's now save this.

06:21.020 --> 06:22.580
I'll then go back over to my terminal.

06:23.780 --> 06:26.870
And then back over here, I'm going to once again publish an event.

06:28.470 --> 06:32.340
And now we'll see that it only got sent over to one of these two listeners.

06:33.500 --> 06:38.210
And I can start to send out multiple events and it looks like it's going to alternate between the two

06:38.240 --> 06:43.400
deciding that, hey, first I'm going to send one to this copy of a listener and then over to this listener.

06:43.670 --> 06:47.960
If you are not seeing the same behavior, if it looks like all the events are being sent to just one

06:47.960 --> 06:50.930
listener as opposed to both, that is totally fine as well.

06:50.930 --> 06:55.940
Sometimes that streaming server is going to decide to either do a round robin or in other cases just

06:55.940 --> 06:58.420
send them all to one particular listener.

06:58.430 --> 07:03.310
And there actually are some ways that we can make sure that one listener doesn't always get sent all

07:03.310 --> 07:04.310
of these different events.

07:04.430 --> 07:06.230
That's something we'll take a look at in just a moment.

07:07.040 --> 07:07.280
Okay.

07:07.280 --> 07:09.640
So in total this is creating a Q group.

07:09.650 --> 07:15.350
Again, a Q group is created to make sure that multiple instances of the same service are not all going

07:15.350 --> 07:16.970
to receive the exact same event.

07:16.970 --> 07:21.560
And this is going to make sure that we don't try to do double, triple or quadruple processing on the

07:21.560 --> 07:22.790
same incoming event.

07:23.530 --> 07:23.980
All right.

07:23.980 --> 07:25.750
So still a couple of things for us to learn.

07:25.750 --> 07:28.300
So quick pause right here and I'll see you in just a minute.

WEBVTT

00:01.000 --> 00:05.380
الان ما یه پیاده‌سازی اولیه از Event Bus داریم و آماده‌ست.

00:05.380 --> 00:08.230
حالا وقتشه که بریم سراغ سرویس post و comment.

00:08.530 --> 00:13.270
هر وقت یه اتفاق مهم توی اون سرویس‌ها بیفته—مثل ساختن یه پست جدید یا یه کامنت جدید—

00:13.270 --> 00:18.910
باید یه درخواست به آدرس /events توی Event Bus بفرستیم.

00:18.910 --> 00:19.840
و توی اون درخواست، اطلاعات Event رو قرار می‌دیم.

00:19.840 --> 00:22.750
یعنی نوع Event و دیتای مربوط بهش.

00:23.970 --> 00:28.860
Event Bus اون Event رو می‌گیره و به همه سرویس‌های دیگه‌ی برنامه Broadcast می‌کنه.

00:30.580 --> 00:36.040
در حال حاضر، سرویس‌های ما اصلاً endpoint مربوط به /events رو ندارن، پس وقتی Event Bus براشون درخواست بفرسته،

00:36.040 --> 00:40.540
درخواست با خطای 404 مواجه می‌شه.

00:41.170 --> 00:45.790
اول مطمئن می‌شیم که Event Bus می‌تونه Event رو ارسال کنه، بعد برمی‌گردیم و اون endpointها رو پیاده‌سازی می‌کنیم.

00:45.790 --> 00:50.650
تا سرویس‌ها بتونن به Eventهایی که منتشر می‌شن گوش بدن.

00:51.190 --> 00:54.760
اما فعلاً فقط می‌خوایم مطمئن بشیم که سرویس پست، موقع ساختن پست جدید، یک Event منتشر می‌کنه.

00:54.760 --> 00:56.860
بیاید بریم سراغش.

00:58.080 --> 00:59.040
بزن بریم.

00:59.800 --> 01:05.020
بین ویدیوی قبلی و الان، من ادیتورم رو باز کردم داخل پوشه‌ی اصلی پروژه blog.

01:05.200 --> 01:09.820
چون قراره بین چهار تا سرویس مختلف جابجا بشیم، بهتره همه‌شون توی یه ادیتور باز باشن.

01:09.820 --> 01:14.560
اینجوری راحت‌تره تا اینکه بخوایم چهارتا پنجره جدا داشته باشیم.

01:14.560 --> 01:17.320
حالا می‌رم داخل پوشه‌ی post

01:18.430 --> 01:20.800
و فایل index.js رو پیدا می‌کنم.

01:20.800 --> 01:23.680
بالای فایل axios رو ایمپورت می‌کنم.

01:23.680 --> 01:25.930
به این شکل:

01:27.700 --> 01:28.360
`const axios = require('axios');`

01:29.440 --> 01:32.350
حالا میام پایین سراغ endpoint مربوط به ایجاد پست.

01:33.220 --> 01:37.320
این همون کدیه که هر بار کسی بخواد یه پست بسازه اجرا میشه.

01:37.340 --> 01:43.060
پس دقیقاً اینجا زمان خوبیه که یه Event بفرستیم بگیم "یه پست جدید ساخته شد!"

01:44.040 --> 01:51.210
بلافاصله بعد از اینکه پست جدید رو به کالکشنمون اضافه کردیم، یه درخواست POST با axios ارسال می‌کنیم

01:51.210 --> 01:52.560
به آدرس:

01:52.590 --> 01:58.190
http://localhost:4005/events

01:58.200 --> 02:01.950
چون Event Bus ما روی پورت 4005 اجرا می‌شه.

02:04.960 --> 02:09.160
تو آرگومان دوم axios، اطلاعات Event رو قرار می‌دیم.

02:09.580 --> 02:13.550
فعلاً هر Event قراره دو تا پراپرتی داشته باشه:

02:13.570 --> 02:17.770
اولی type هست، که مشخص می‌کنه چه نوع اتفاقی افتاده.

02:18.610 --> 02:23.200
پراپرتی دوم اسمش data هست، و قراره اطلاعات دقیق‌تری از اون اتفاقی که افتاده رو نگه داره.

02:23.200 --> 02:24.550
مثلاً توی ساخت پست جدید،

02:24.670 --> 02:29.710
بهتره همون پستی که الان ساخته شده رو به عنوان مقدار data ارسال کنیم.

02:31.060 --> 02:35.890
یادت باشه، ساختار Eventهایی که در برنامه پخش می‌شن می‌تونه هرچی باشه.

02:35.920 --> 02:37.150
لزومی نداره حتماً یه آبجکت باشه.

02:37.150 --> 02:40.800
میتونه یه رشته یا عدد یا هر نوع دیتای دیگه باشه.

02:40.810 --> 02:44.770
ولی ما ترجیح می‌دیم همیشه یه ساختار مشخص و منظم برای Eventها داشته باشیم.

02:44.980 --> 02:49.230
در مورد طراحی و اسکیمای Eventها بعداً مفصل‌تر صحبت می‌کنیم.

02:49.240 --> 02:52.900
فعلاً بدون که هر Event ما دوتا فیلد خواهد داشت: type و data.

02:54.270 --> 03:00.300
آبجکتی که اینجا ساختیم، همون Event کاملیه که قراره تو کل اپلیکیشن منتشر بشه.

03:00.570 --> 03:03.180
type رو می‌ذاریم 'PostCreated'

03:04.110 --> 03:08.200
و data رو هم همون پستی که ساختیم قرار می‌دیم.

03:08.280 --> 03:11.030
پست ما فقط دوتا فیلد داره: id و title.

03:11.040 --> 03:12.870
پس همون رو قرار می‌دیم.

03:12.870 --> 03:17.490
در نتیجه، آبجکتی شبیه به این داریم: { id, title }

03:17.790 --> 03:20.040
که به عنوان data داخل Event قرار می‌گیره.

03:22.070 --> 03:25.750
و چون این عملیات ارسال Event یه درخواست شبکه‌ست، غیر همزمانه.

03:25.760 --> 03:30.710
پس باید از `async` و `await` استفاده کنیم.

03:32.990 --> 03:33.170
خب.

03:33.200 --> 03:34.250
تا اینجا اوکیه.

03:35.070 --> 03:39.090
حالا برمی‌گردیم به مرورگر و برنامه React رو رفرش می‌کنیم.

03:39.450 --> 03:43.760
همین که صفحه رفرش بشه، می‌بینی که همه پست‌ها حذف شدن.

03:43.770 --> 03:45.000
که طبیعیه.

03:45.000 --> 03:49.440
چون همه‌ی پست‌ها توی حافظه (memory) سرویس پست ذخیره شده بودن.

03:49.440 --> 03:53.760
پس هر بار که سرور ریستارت می‌شه، دیتای موقتی هم از بین میره.

03:54.790 --> 03:55.060
خب بریم جلوتر.

03:55.060 --> 03:56.580
می‌خوام یه پست جدید بسازم.

03:56.590 --> 03:58.960
اسمش رو می‌ذارم "پست جدید" و سابمیت می‌کنم.

04:00.650 --> 04:05.750
ما هنوز هیچ سیستم لایو ری‌لود توی برنامه React نداریم، پس باید دستی صفحه رو رفرش کنیم.

04:05.750 --> 04:06.110
و همین که رفرش کنم،

04:06.110 --> 04:07.970
می‌بینم که پست جدید بالا اومده.

04:08.270 --> 04:09.650
اما اون event چی شد؟

04:09.770 --> 04:11.690
بیا بریم لاگ‌های ترمینال رو چک کنیم.

04:11.690 --> 04:16.400
می‌خوایم ببینیم آیا سرویس post سعی کرده که اون event رو به event bus بفرسته یا نه.

04:20.690 --> 04:23.170
اینا لاگ‌های ترمینال من هستن.

04:23.180 --> 04:27.740
این پنجره دوم که هایلایت شده، مربوط به سرویس post هست.

04:27.770 --> 04:29.060
ولی اینجا خبری نیست. جالبه.

04:29.060 --> 04:30.140
چیزی لاگ نشده.

04:30.350 --> 04:34.730
اما اگر بیایم پایین، این یکی پنجره‌ای که هست مربوط به event bus هست که در حال اجراست.

04:36.560 --> 04:37.100
خب ببینیم چی داریم.

04:37.100 --> 04:39.110
یه سری ارور اینجا هست.

04:40.060 --> 04:42.500
و همه‌شون شبیه هم هستن.

04:42.520 --> 04:45.640
همه‌شون می‌گن: درخواست با کد 404 شکست خورده.

04:46.030 --> 04:47.620
که البته چیز بدی نیست.

04:47.650 --> 04:53.200
همونطور که چند لحظه پیش گفتم، سرویس‌های پست، کامنت، و حتی کوئری اصلاً endpoint ای برای `/events` ندارن.

04:53.200 --> 04:57.530
یعنی حتی اگر Event Bus سعی کنه یه رویداد بفرسته، هیچ سرویسی نیست که اون رو دریافت کنه.

04:57.550 --> 05:00.310
برای همین هم هست که خطای 404 می‌بینیم.

05:00.490 --> 05:05.350
در مجموع، این اتفاق خوبه چون نشون می‌ده Event Bus واقعاً داره رویداد رو ارسال می‌کنه.

05:05.350 --> 05:07.570
ولی هنوز کسی اون رو دریافت نمی‌کنه.

05:07.990 --> 05:09.630
پس تا اینجای کار همه چی خوبه.

05:09.640 --> 05:13.720
ما الان مطمئنیم که وقتی یه پست ساخته میشه، event مربوط به اون به Event Bus ارسال میشه.

05:15.160 --> 05:17.710
یه توقف کوتاه می‌کنیم و ادامه می‌دیم در ویدیوی بعدی.
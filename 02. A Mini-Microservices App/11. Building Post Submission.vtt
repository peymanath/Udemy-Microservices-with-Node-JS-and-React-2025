WEBVTT

00:01.110 --> 00:03.520
بیایید کار روی کامپوننت‌های مختلف رو ادامه بدیم.

00:03.550 --> 00:06.550
مرحله بعدی که می‌خوایم روش کار کنیم، کامپوننت PostCreate هست.

00:06.570 --> 00:08.790
این بخش مربوط به اون فرم بالا در صفحه‌ست.

00:08.820 --> 00:10.830
کاری که باید بکنیم خیلی ساده‌ست: نمایش یه فرم ساده.

00:10.830 --> 00:15.270
هر وقت کاربر فرم رو سابمیت کرد، ما مقدار title رو می‌گیریم و به‌عنوان عنوان پست جدید استفاده می‌کنیم.

00:16.710 --> 00:18.120
برمی‌گردم به ادیتورم.

00:18.770 --> 00:20.420
داخل پوشه src.

00:20.420 --> 00:21.680
یه فایل جدید می‌سازم.

00:22.970 --> 00:25.280
اسمش رو می‌ذارم PostCreate.js

00:26.090 --> 00:27.170
داخل این فایل بلافاصله...

00:27.170 --> 00:29.360
ری‌اکت رو از `react` ایمپورت می‌کنیم.

00:31.270 --> 00:34.150
و یه کامپوننت فانکشنال اکسپورت می‌کنیم.

00:37.440 --> 00:37.980
داخل این کامپوننت...

00:37.980 --> 00:40.500
یک div برمی‌گردونیم.

00:42.110 --> 00:45.260
و داخل این div قراره مقدار قابل توجهی markup بذاریم.

00:45.260 --> 00:49.400
یه کم تایپ داریم، چون چند عنصر مختلف قراره اضافه کنیم.

00:49.790 --> 00:51.680
اول از همه یه فرم تعریف می‌کنیم.

00:54.620 --> 00:59.420
داخل فرم، یه div با کلاس `form-group` قرار می‌دیم.

01:01.070 --> 01:04.460
این کلاس فقط برای کمی استایله، تا اپمون خیلی زشت نباشه.

01:08.050 --> 01:10.000
داخل اون div، یه label قرار می‌دیم.

01:11.890 --> 01:12.940
متنش هم می‌ذاریم "Title".

01:14.010 --> 01:18.750
یه input هم قرار می‌دیم با کلاس `form-control`.

01:20.920 --> 01:22.260
و بعد از بسته شدن div...

01:22.270 --> 01:24.010
مطمئن شو که div رو بستی.

01:24.010 --> 01:24.850
در ادامه‌ش...

01:24.850 --> 01:28.390
یه دکمه می‌ذاریم با کلاس `btn btn-primary`.

01:32.290 --> 01:33.940
بذار سایدبارم رو هم ببندم...

01:35.080 --> 01:37.600
و برای دکمه، متن "Submit" رو می‌نویسیم.

01:40.800 --> 01:46.500
فایل رو ذخیره می‌کنیم و حالا باید مطمئن شیم که این کامپوننت توی فایل App.js قابل مشاهده باشه.

01:46.920 --> 01:49.950
پس برمی‌گردیم به فایل App.js که همین چند لحظه پیش ساختیم.

01:50.690 --> 01:51.710
در بالاترین بخش قرار می‌دم.

01:51.740 --> 01:56.120
اون قسمت‌هایی که مربوط به create هست رو ایمپورت می‌کنم.

01:59.200 --> 02:01.720
و داخل تگ div، اون متن رو پاک می‌کنم.

02:01.900 --> 02:03.790
و بهش یک هدر کوچیک می‌دم.

02:04.120 --> 02:05.710
از h1 استفاده می‌کنم.

02:06.660 --> 02:13.260
که توش نوشته "ایجاد پست"؛ دقیقاً مثل چیزی که توی ماکاپ و همچنین کامپوننت PostCreate دیدیم.

02:16.740 --> 02:18.120
خب، اینو ذخیره می‌کنم.

02:18.940 --> 02:19.840
برمی‌گردم به مرورگر.

02:21.190 --> 02:23.230
و باید چیزی شبیه این ببینم.

02:23.950 --> 02:26.030
همونطور که گفتم، ظاهرش چندان جالب نیست.

02:26.050 --> 02:28.660
یه مقدار استایل کوچیک خیلی بهش کمک می‌کنه.

02:28.690 --> 02:31.360
می‌بینی که چند تا کلاس هم اضافه کردیم.

02:31.360 --> 02:35.350
قراره از Bootstrap استفاده کنیم تا ظاهر بهتری داشته باشه.

02:35.380 --> 02:40.540
خیلی سریع Bootstrap رو فقط در حد CSS به پروژه وصل می‌کنیم تا ظاهر اپلیکیشن زشت نباشه.

02:40.540 --> 02:41.890
فقط سمت CSS رو اضافه می‌کنیم.

02:42.310 --> 02:48.790
برای اضافه کردن Bootstrap، یه تب مرورگر جدید باز می‌کنم و می‌رم به سایت Get Bootstrap.

02:52.020 --> 02:53.970
وقتی رسیدم، دنبال لینک دانلود می‌گردم.

02:55.650 --> 02:59.970
ولی Bootstrap رو دانلود نمی‌کنیم، مستقیماً به CDN لینک می‌دیم.

03:00.720 --> 03:03.290
اگه کمی اسکرول کنیم پایین‌تر، می‌بینیم Bootstrap CDN رو.

03:05.060 --> 03:08.150
تگ‌های link و script که اینجا می‌بینید رو کپی می‌کنم.

03:09.990 --> 03:11.820
برمی‌گردم به ادیتورم.

03:12.330 --> 03:16.770
وارد پوشه public می‌شم و فایل index.html رو باز می‌کنم.

03:17.940 --> 03:24.420
و داخل تگ head، اون دوتا تگ که کپی کردم رو paste می‌کنم.

03:24.760 --> 03:29.040
یکی از اون تگ‌ها مربوط به JavaScript خود Bootstrap هست.

03:29.040 --> 03:31.140
ولی ما نیازی به کد جاوااسکریپتش نداریم.

03:31.170 --> 03:33.580
فقط می‌خوایم استایل‌هاشو استفاده کنیم.

03:33.600 --> 03:35.550
پس تگ script رو حذف می‌کنم.

03:35.550 --> 03:38.700
کلاً اون تگ رو پاک می‌کنم و فقط تگ link باقی می‌مونه.

03:39.670 --> 03:43.210
تگ مربوط به bootstrapcdn.com.

03:44.060 --> 03:46.880
حالا می‌تونیم این فایل رو ذخیره کنیم.

03:51.820 --> 03:55.780
دوباره چک می‌کنم که فقط تگ link برای Bootstrap تو فایل باشه.

03:56.410 --> 03:57.640
فایل رو می‌بندم.

03:58.180 --> 04:01.810
می‌رم تو مرورگر تا مطمئن شم همه‌چیز درسته.

04:01.810 --> 04:02.040
آره.

04:02.080 --> 04:03.050
همه‌چی خوبه.

04:03.070 --> 04:04.600
خیلی بهتر از قبل شده.

04:05.210 --> 04:06.460
آخرین تغییر کوچیکم اینه...

04:06.460 --> 04:11.320
قراره اون div رو داخل کامپوننت App قرار بدم و بهش کلاس container بدم،

04:11.320 --> 04:14.710
که باعث میشه کناره‌های راست و چپ کمی محدود بشن.

04:15.690 --> 04:18.840
حالا برمی‌گردم به کامپوننت App.

04:19.350 --> 04:20.640
اینه همون div که گفته بودم.

04:20.640 --> 04:22.320
بهش کلاس container می‌دم.

04:23.960 --> 04:25.880
ذخیره می‌کنم.

04:26.790 --> 04:28.240
دوباره برمی‌گردم و می‌بینم نتیجه رو.

04:28.260 --> 04:31.950
الان حاشیه‌های چپ و راست خیلی بهتر شده.

04:33.660 --> 04:34.230
خب.

04:34.350 --> 04:38.640
ظاهرش معقول‌تر شده ولی بریم سراغ ادامه‌ی کامپوننت PostCreate.

04:38.640 --> 04:42.720
این کامپوننت رو نوشتیم، اما هنوز هیچ عملکردی براش تعریف نشده.

04:42.870 --> 04:44.340
دوباره فایل PostCreate رو باز می‌کنیم.

04:44.340 --> 04:49.260
می‌خوایم یک هندلر اضافه کنیم که وقتی کاربر توی input تایپ می‌کنه، اونو دنبال کنه.

04:49.260 --> 04:53.610
و بعد هم وقتی روی دکمه‌ی ارسال کلیک می‌کنه، فرم رو سابمیت کنیم.

04:54.090 --> 04:57.900
و وقتی سابمیت شد، یه درخواست POST به سرور بفرستیم.

04:59.960 --> 05:02.590
نه به سرویس common بلکه به سرویس posts.

05:02.600 --> 05:07.520
یعنی به endpoint مربوط به پست‌ها درخواست POST بزنیم تا یک پست جدید بسازیم با عنوانی که دادیم.

05:10.090 --> 05:11.210
بریم انجامش بدیم.

05:12.330 --> 05:15.900
توی فایل PostCreate، همینجا بالای کامپوننت شروع می‌کنیم.

05:16.930 --> 05:17.980
در ابتدای فایل.

05:18.100 --> 05:19.720
چند تا ایمپورت اضافه می‌کنیم.

05:20.380 --> 05:23.830
اول از همه useState رو از ری‌اکت می‌گیریم.

05:25.030 --> 05:29.050
و Axios رو هم برای فرستادن درخواست‌هامون ایمپورت می‌کنیم.

05:31.200 --> 05:35.370
بعد داخل خود کامپوننت، یک state جدید تعریف می‌کنیم.

05:36.870 --> 05:40.860
با استفاده از useState، یک متغیر title و setTitle می‌سازیم.

05:41.750 --> 05:44.780
و مقدار اولیه‌ش رو یک رشته‌ی خالی قرار می‌دیم.

05:46.800 --> 05:51.360
بعد مطمئن می‌شیم که input ما به این متغیر title متصل شده باشه،

05:51.360 --> 05:54.960
تا بتونیم مقدار عنوان پستی که می‌خوایم بسازیم رو ذخیره کنیم.

05:54.960 --> 05:56.010
که داریم ایجادش می‌کنیم.

05:56.880 --> 05:59.850
برای همین مقدار value رو برابر title می‌ذاریم.

06:01.470 --> 06:04.320
و یه رویداد onChange هم براش تعریف می‌کنیم.

06:05.450 --> 06:09.230
که هر وقت کاربر چیزی تایپ کرد، با استفاده از setTitle ذخیره بشه.

06:10.800 --> 06:12.660
رویداد رو به صورت خلاصه e می‌نویسیم.

06:13.550 --> 06:14.460
و توش می‌گیم:

06:14.510 --> 06:15.950
setTitle(e.target.value)

06:15.950 --> 06:17.810
و ذخیره می‌کنم تا کامل خطش رو ببینی.

06:19.890 --> 06:22.350
این حالت یک اتصال دوطرفه ساده‌ست بین ورودی و state.

06:22.350 --> 06:23.190
خیلی کلاسیکه.

06:25.100 --> 06:26.270
خب اینو پیاده کردیم.

06:26.270 --> 06:29.500
الان مقدار input رو داخل title داریم دنبال می‌کنیم.

06:29.510 --> 06:34.480
حالا می‌تونیم روی فرم یک event listener بذاریم که سابمیت فرم رو بررسی کنه.

06:34.490 --> 06:38.840
و هر وقت فرم ارسال شد، اون درخواست POST به API زده بشه.

06:40.590 --> 06:44.640
برای همین، روی فرم خاصیت onSubmit رو اضافه می‌کنم.

06:45.780 --> 06:51.210
هر وقت این event رخ بده، یک تابع رو اجرا می‌کنیم که همینجا تعریفش می‌کنیم.

06:52.130 --> 06:53.020
چیز خاصی نیست.

06:53.030 --> 06:54.410
اسمش رو می‌ذاریم onSubmit.

06:55.650 --> 06:57.990
خب، بیایم تابع onSubmit رو تعریف کنیم.

07:02.020 --> 07:03.280
یه همچین چیزی می‌نویسیم.

07:03.280 --> 07:06.850
این تابع قراره هر بار که کاربر فرم رو سابمیت کرد اجرا بشه.

07:07.930 --> 07:12.580
اول باید از رفتار پیش‌فرض مرورگر جلوگیری کنیم چون به‌طور پیش‌فرض فرم رو خودش سابمیت می‌کنه.

07:12.580 --> 07:15.340
ولی ما اینو نمی‌خوایم، پس باید event رو بگیریم و preventDefault روش صدا بزنیم.

07:16.270 --> 07:20.890
اینجوری مرورگر دیگه فرم رو خودش سابمیت نمی‌کنه.

07:22.400 --> 07:26.300
حالا بعد از اون، اینجاست که می‌تونیم درخواست‌مون رو به microservice مربوط به post بفرستیم.

07:27.620 --> 07:32.480
ترجیح می‌دیم از سینتکس async/await استفاده کنیم تا با promise و callback درگیر نشیم.

07:33.950 --> 07:36.800
پس این تابع رو با async علامت‌گذاری می‌کنیم.

07:37.960 --> 07:40.540
و اینجا درخواست اصلی رو می‌فرستیم.

07:40.870 --> 07:44.140
با استفاده از `await axios.post`

07:45.420 --> 07:50.670
می‌خوایم یه درخواست POST به سرویس post بفرستیم، و اگه بریم به ترمینال...

07:50.670 --> 07:51.960
ترمینال وسطی سرویس پست ماست.

07:53.010 --> 07:55.400
همونطور که می‌بینی روی پورت ۴۰۰۰ اجرا می‌شه.

07:55.410 --> 07:57.870
پس باید مطمئن بشیم به پورت ۴۰۰۰ درخواست می‌زنیم.

07:57.870 --> 08:02.130
آدرسش می‌شه http://localhost:4000/posts

08:12.210 --> 08:14.820
و به عنوان پارامتر دوم، بادی درخواست رو می‌دیم.

08:15.300 --> 08:17.430
که شامل title می‌شه.

08:18.790 --> 08:24.130
یادت باشه API ما طوری طراحی شده که انتظار داره توی body یه فیلد title باشه که از نوع رشته است.

08:28.670 --> 08:29.600
تا اینجا خیلی خوبه.

08:29.870 --> 08:34.310
آخرین کاری که دوست داریم انجام بدیم برای تجربه‌ی کاربری بهتر اینه که بعد از ساخت پست...

08:34.310 --> 08:36.230
اون input رو خالی کنیم.

08:36.320 --> 08:41.870
یعنی مقدار title رو دوباره به رشته‌ی خالی برگردونیم.

08:41.870 --> 08:42.440
چرا؟

08:42.710 --> 08:47.210
چون اینطوری وقتی فرم رو سابمیت کردیم و موفق بود، input خالی می‌شه و یه حس موفقیت منتقل می‌کنه.

08:51.080 --> 08:53.000
نشونه‌ایه از اینکه درخواست با موفقیت ارسال شده.

08:53.930 --> 08:56.120
پس اینجا یه `setTitle('')` می‌ذاریم.

08:57.210 --> 08:58.260
یعنی رشته‌ی خالی.

09:00.760 --> 09:01.720
خب دیگه، همین بود.

09:01.720 --> 09:02.800
ذخیره‌اش می‌کنیم.

09:03.630 --> 09:07.180
قبل از اینکه تستش کنیم، برمی‌گردم به مرورگر.

09:07.200 --> 09:10.830
می‌خوام کنسول توسعه‌دهنده مرورگرم رو باز کنم چون از الان می‌دونم که

09:10.830 --> 09:16.170
قراره یه ارور بگیریم وقتی این کد اجرا بشه؛ یه ارور خیلی کوچیک که الان سریع درستش می‌کنیم.

09:17.280 --> 09:19.350
فقط مطمئن می‌شم کنسول بازه.

09:20.700 --> 09:21.870
می‌رم روی تب Network.

09:21.900 --> 09:23.880
یه عنوان تستی وارد می‌کنم و دکمه Submit رو می‌زنم.

09:23.880 --> 09:24.850
و همونطور که می‌بینی...

09:24.870 --> 09:26.220
یه ارور کوچیک گرفتیم.

09:27.240 --> 09:32.310
این ارور به‌طور مستقیم مربوط به Microservices نیست، ولی تقریباً همیشه تو این پروژه‌ها باهاش برخورد می‌کنی

09:32.310 --> 09:36.990
بسته به اینکه چطوری کل سیستم رو کانفیگ کرده باشی.

09:36.990 --> 09:40.110
فقط می‌خوام این ارور رو ببینی و ذهنت بهش آشنا بشه.

09:40.110 --> 09:44.270
این یکی از کلاسیک‌ترین ارورهایی هست که تو توسعه وب زیاد می‌بینیم.

09:44.280 --> 09:45.610
و مربوط به CORS هست.

09:45.630 --> 09:46.890
پس اینجا مکث می‌کنیم.

09:46.890 --> 09:51.420
تو ویدیوی بعدی میایم، یه مرور سریع روی CORS داریم و بعد این ارور رو درست می‌کنیم

09:51.420 --> 09:54.270
و مطمئن می‌شیم که بتونیم یه پست جدید تو اپمون ایجاد کنیم.

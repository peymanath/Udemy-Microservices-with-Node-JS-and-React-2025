WEBVTT

00:01.160 --> 00:04.430
خیلی خب، بزن بریم سراغ پیاده‌سازی Event Bus.

00:04.640 --> 00:08.990
برای شروع، اول قراره یه پوشه جدید داخل پروژه‌مون بسازیم تا کدهای مربوط به Event Bus داخل اون قرار بگیرن.

00:08.990 --> 00:10.820
من برگشتم به ترمینال.

00:11.030 --> 00:12.170
یه تب جدید باز می‌کنم.

00:12.410 --> 00:14.600
الان چهار تا تب دارم: یکی برای React، یکی برای posts، یکی برای comments

00:14.600 --> 00:19.550
و این تب جدیده برای سرویس Event Bus قراره استفاده بشه.

00:19.550 --> 00:20.750
برمی‌گردم به ریشه پروژه (blog directory)

00:21.140 --> 00:25.910
که تمام سرویس‌هام توش قرار دارن.

00:25.910 --> 00:26.690
اینجا یه پوشه جدید می‌سازم به اسم Events،

00:27.140 --> 00:32.120
یا بهتره بگیم Event-Bus تا دقیق‌تر و واضح‌تر باشه.

00:32.870 --> 00:34.220
بعدش وارد اون پوشه می‌شم.

00:34.220 --> 00:37.580
و اندازه پنجره ترمینال رو کمی بزرگ‌تر می‌کنم.

00:39.150 --> 00:41.400
داخل این پوشه، یه فایل package.json می‌سازیم.

00:42.370 --> 00:46.000
برای این کار از دستور `npm init -y` استفاده می‌کنیم.

00:46.000 --> 00:48.520
بعد از اون، پکیج‌های مورد نیاز رو نصب می‌کنیم:

00:50.840 --> 00:52.340
Express، nodemon

00:53.680 --> 00:56.020
و axios

00:56.960 --> 00:58.010
فقط همین‌ها کافیه.

00:59.380 --> 01:01.340
همین‌ها رو نصب می‌کنیم.

01:01.360 --> 01:01.660
تمامه.

01:01.660 --> 01:02.290
بزن بریم.

01:03.810 --> 01:04.940
بعد از نصب، ادیتور کد رو توی این پوشه باز می‌کنم.

01:04.950 --> 01:08.700
تا فایل‌ها و کدها رو راحت‌تر بنویسم.

01:16.700 --> 01:20.540
مثل همیشه، یه فایل `index.js` می‌سازیم.

01:22.840 --> 01:25.390
و در بالای فایل، express رو import می‌کنیم.

01:29.600 --> 01:31.190
بعد body-parser رو میاریم.

01:35.050 --> 01:36.640
و همچنین axios رو هم import می‌کنیم.

01:39.400 --> 01:41.890
حالا یه اپلیکیشن express می‌سازیم.

01:44.770 --> 01:48.150
و body-parser رو به‌صورت middleware به اپلیکیشن اضافه می‌کنیم

01:48.160 --> 01:51.670
تا بتونه request‌های JSON رو بخونه.

01:53.660 --> 01:56.010
خب، تنظیمات اولیه تموم شد.

01:56.030 --> 02:01.400
الآن فقط باید یه endpoint بسازیم که بتونه eventهایی که از بقیه سرویس‌ها میان رو دریافت کنه.

02:01.400 --> 02:05.960
همون‌طور که توی دیاگرام قبلی دیدیم، این یه هندلر برای POST به مسیر `/events` خواهد بود.

02:07.460 --> 02:12.470
هر بار که یه event دریافت می‌کنیم، قراره بلافاصله اون رو به چندین سرویس دیگه ارسال کنیم.

02:12.470 --> 02:13.820
یعنی یه سری درخواست ارسال می‌کنیم به سرویس‌های مختلف.

02:15.810 --> 02:19.260
پس باید یه هندلر برای درخواست POST به `/events` بسازیم.

02:20.670 --> 02:22.770
یه کالبک براش تعریف می‌کنم اینجا.

02:24.560 --> 02:28.610
قراره یه event از بدنه‌ی درخواست دریافت کنیم، پس همون `req.body` می‌شه event ما.

02:28.970 --> 02:32.990
یعنی هرچی که توی request body اومده، همونو به عنوان event می‌گیریم.

02:33.230 --> 02:35.830
مهم نیست اون داده چی باشه — یه آبجکت JSON، رشته، عدد یا هر چیز دیگه‌ای.

02:35.840 --> 02:38.510
ما فقط همونو می‌گیریم و برای همه سرویس‌ها می‌فرستیم.

02:38.570 --> 02:42.890
هدف اینه که محتوای body رو به همه‌ی سرویس‌های در حال اجرا ارسال کنیم.

02:42.890 --> 02:44.420
صرف‌نظر از اینکه چی توشه.

02:46.390 --> 02:51.520
پس حالا که event رو داریم، وقتشه که چندتا درخواست POST بفرستیم به سرویس‌هامون.

02:51.520 --> 02:52.300
اولی:

02:52.300 --> 02:54.910
یه `axios.post` به مسیر `http://localhost:4000/events`

02:55.930 --> 03:01.630
و داده‌ای که می‌فرستیم همون event دریافتی هست.

03:02.080 --> 03:05.320
بعد دو بار اون خط رو کپی می‌کنم

03:08.550 --> 03:10.710
و به ترتیب تغییرش می‌دم به localhost:4001 و localhost:4002

03:12.120 --> 03:14.730
یعنی کامنت‌سرویس و احتمالا کوئری‌سرویس آینده.

03:15.620 --> 03:17.720
پس هر سه سرویس event رو دریافت می‌کنن.

03:19.970 --> 03:25.610
در انتها، یه پاسخ به درخواست اصلی برمی‌گردونیم تا بگیم وضعیت اوکیه.

03:25.640 --> 03:28.730
یعنی یه پاسخ ساده که می‌گه: `{ status: 'OK' }`

03:28.850 --> 03:29.500
فقط برای تأیید موفق بودن عملیات.

03:30.140 --> 03:32.270
تا طرف مقابل بدونه همه چیز درست پیش رفته.

03:34.230 --> 03:36.870
اما یه ایراد توی این پیاده‌سازی وجود داره.

03:36.870 --> 03:40.800
ما فرض کردیم که هر سه درخواست POST همیشه موفق خواهند بود.

03:41.400 --> 03:45.300
هیچ کدی برای کنترل خطا یا شکست یکی از این درخواست‌ها نداریم.

03:45.540 --> 03:48.630
فعلاً فقط می‌خواستم به این نکته اشاره کنم چون وقتی بریم سراغ پیاده‌سازی event handlerها،

03:48.630 --> 03:53.040
این موضوع می‌تونه به یه مسأله جدی تبدیل بشه و باید براش فکر کنیم.

03:55.090 --> 03:55.390
خب،

03:55.420 --> 03:59.290
در نهایت، باید مطمئن بشیم که این سرور واقعا در حال گوش دادن هست.

03:59.290 --> 04:00.280
پس از `app.listen` استفاده می‌کنیم.

04:00.490 --> 04:04.510
می‌ذاریم روی پورت 4005 اجرا بشه.

04:04.510 --> 04:06.400
می‌بینی که چند پورت رو رد کردم.

04:06.400 --> 04:12.160
چون داریم از 4000 برای posts، از 4001 برای comments، بعدش query service و حالا 4005 برای event-bus.

04:15.860 --> 04:18.290
در پایان، یه `console.log` می‌نویسم:

04:19.590 --> 04:22.080
Listening on 4005

04:25.510 --> 04:30.250
خب، اینم از یه پیاده‌سازی خیلی ساده و ابتدایی برای Event Bus.

04:30.850 --> 04:34.090
حالا آخرین کاری که باید انجام بدیم اینه که فایل `package.json` رو باز کنیم.

04:35.050 --> 04:36.960
می‌خوایم اسکریپت‌هاش رو به‌روزرسانی کنیم.

04:36.970 --> 04:40.510
اسکریپت پیش‌فرض `test` رو پاک می‌کنیم و جای اون یه اسکریپت `start` می‌نویسیم.

04:40.510 --> 04:43.220
مثل همیشه، مقدارش می‌شه `node index`.

04:47.090 --> 04:47.510
خب،

04:47.510 --> 04:49.430
برگردیم به ترمینال.

04:50.170 --> 04:52.750
تو تب چهارم ترمینالم هستم.

04:52.750 --> 04:55.890
پس الان داریم: react، posts، comments و event-bus رو اجرا می‌کنیم.

04:55.900 --> 04:56.890
من داخل دایرکتوری event-bus هستم.

04:56.920 --> 05:01.210
و اینجا دستور `npm start` رو اجرا می‌کنم.

05:02.620 --> 05:05.860
و حالا باید پیامی ببینم که نشون می‌ده سرور داره روی پورت 4005 گوش می‌ده.

05:06.280 --> 05:06.940
عالیه.

05:07.750 --> 05:12.610
حالا که Event Bus ساده‌مون راه افتاده، همینجا یه توقف کوتاه داشته باشیم.

05:12.610 --> 05:16.930
توی ویدیوی بعدی قراره کاری کنیم که هر وقت کسی یه پست یا کامنت ایجاد کرد،

05:16.930 --> 05:19.660
یه event به Event Bus ارسال بشه.

05:20.080 --> 05:22.210
پس یه مکث کوتاه، و خیلی زود برمی‌گردیم.

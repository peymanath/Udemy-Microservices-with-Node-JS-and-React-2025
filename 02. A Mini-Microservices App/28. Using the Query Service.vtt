WEBVTT

00:01.150 --> 00:05.710
حالا که سرویس Query ما آماده‌ست، باید یکسری تغییر توی اپلیکیشن React بدیم تا داده‌هاشو از اون بگیره.

00:05.710 --> 00:09.720
در حال حاضر، اپ React به‌صورت مستقیم از سرویس پست و کامنت داده می‌گیره.

00:09.730 --> 00:16.120
اما ما نمی‌خوایم دیگه مستقیم به این سرویس‌ها وصل بشیم. الان فقط می‌خوایم از طریق سرویس Query همه داده‌ها رو یکجا بگیریم.

00:16.130 --> 00:20.380
این یعنی هم پست‌ها و هم کامنت‌های مرتبط، همشون باید از یک نقطه گرفته بشن.

00:20.560 --> 00:22.090
و اون نقطه، سرویس Query هست.

00:22.090 --> 00:27.640
پس قراره فقط یک درخواست به این سرویس زده بشه و همه اطلاعات مورد نیاز رو در قالب یک پاسخ برگردونه.

00:27.640 --> 00:33.220
سرویس Query ما روی پورت 4002 در حال اجراست، پس باید همه درخواست‌های GET رو به این پورت بفرستیم.

00:33.220 --> 00:36.550
مخصوصاً درخواست مربوط به `/posts`.

00:37.500 --> 00:41.490
فقط یه نکته: الان فقط درباره‌ی "خواندن" اطلاعات داریم صحبت می‌کنیم.

00:41.580 --> 00:47.130
سرویس پست و سرویس کامنت همچنان مسئول "ساختن" پست و کامنت هستن.

00:47.130 --> 00:48.240
این کارشون تغییری نکرده.

00:48.870 --> 00:54.340
یعنی وقتی کاربر بخواد یک پست یا کامنت جدید بسازه، اپ React هنوز مستقیم میره سراغ سرویس Post یا Comment.

00:54.360 --> 00:57.360
ولی برای نمایش اطلاعات، فقط از سرویس Query استفاده می‌کنیم.

00:58.110 --> 01:04.650
پس الان وقتشه بریم توی کد اپلیکیشن React و فقط همون یک درخواست به Query Service رو تنظیم کنیم.

01:05.490 --> 01:10.590
بیایم دایرکتوری client رو باز کنیم، بریم داخل `src` و بعد `PostList`.

01:12.360 --> 01:15.840
در فایل PostList فعلی، داریم از سرویس پست داده می‌گیریم.

01:16.800 --> 01:17.040
اما دیگه نمی‌خوایم اینطوری باشه.

01:17.040 --> 01:18.810
باید آدرس رو به `localhost:4002/posts` تغییر بدیم.

01:18.810 --> 01:22.770
چون همونطور که گفتیم، 4002 پورت مربوط به سرویس Query هست.

01:24.790 --> 01:27.700
بعد از اونم یه `console.log` بزنیم که مطمئن بشیم داده‌ها درست برگشتن.

01:28.520 --> 01:32.120
فایل رو ذخیره می‌کنیم و آماده‌ایم برای تست نهایی.

02:02.730 --> 02:06.330
برمی‌گردیم به مرورگر و اپلیکیشن React رو بررسی می‌کنیم.

02:07.400 --> 02:11.010
اپلیکیشن به‌صورت خودکار رفرش شده و توی کنسول مرورگر، لاگ رو می‌بینم.

02:11.030 --> 02:12.260
این لیست کامل پست‌هاست همراه با کامنت‌هاشون که از سرویس Query گرفتیم.

02:12.980 --> 02:17.600
هر پست شامل id، عنوان و آرایه‌ای از کامنت‌های مرتبطه.

02:18.660 --> 02:20.310
به نظر میاد همه‌چیز درست کار می‌کنه.

02:20.670 --> 02:25.680
دیتا دقیقا همون چیزیه که انتظار داشتیم، همه پست‌ها با کامنت‌های مربوط بهشون برگشتن.

02:27.750 --> 02:29.580
اپلیکیشن به‌نظر سالمه و مشکلی نداره.

02:29.580 --> 02:31.920
اما اگه نگاهی به تب Network بندازیم، هنوز اپلیکیشن React داره درخواست به `/comments` می‌فرسته.

02:33.460 --> 02:36.040
در حالی که ما حالا کامنت‌ها رو به صورت embed شده داریم.

02:36.040 --> 02:40.660
پس هنوز یه تغییر کوچیک دیگه هم باید انجام بدیم.

02:40.660 --> 02:42.700
برمی‌گردیم به ویرایشگر کد.

02:42.730 --> 02:47.020
کنسول لاگ رو پاک می‌کنیم و میریم سراغ قسمت `renderPosts`.

02:48.060 --> 02:50.250
اونجایی که داریم پست‌ها رو تکرار می‌کنیم.

02:51.380 --> 02:54.530
تا الان فقط `postId` رو به کامپوننت `CommentList` می‌فرستادیم.

02:55.800 --> 02:58.290
و `CommentList` خودش یه درخواست مجزا می‌فرستاد.

02:59.090 --> 03:02.120
ولی الان کامنت‌ها از همون ابتدا توی `post` وجود دارن.

03:02.120 --> 03:06.740
پس دیگه نیازی به `postId` نیست، به‌جاش مستقیماً کامنت‌ها رو می‌فرستیم.

03:07.690 --> 03:12.280
کافیه `comments={post.comments}` رو بدیم به `CommentList`.

03:13.340 --> 03:17.790
و توی خودش فقط اون لیست کامنت‌ها رو رندر کنه.

03:17.790 --> 03:23.490
می‌ریم سراغ فایل `CommentList` و یه سری چیزهایی که قبلاً لازم بودن رو حذف می‌کنیم.

03:23.490 --> 03:26.700
مثل useState و useEffect که برای فچ کردن کامنت‌ها استفاده می‌شد.

03:26.730 --> 03:32.400
اینا دیگه لازم نیستن چون کامنت‌ها همین اول به صورت prop بهش داده می‌شن.

03:33.030 --> 03:37.440
پس useState و useEffect و import مربوط به Axios رو پاک می‌کنیم.

03:39.050 --> 03:43.970
توی لیست propها هم `postId` رو برمی‌داریم و فقط `comments` رو نگه می‌داریم.

04:41.420 --> 04:44.540
مشخص شد باقی کدی که توی این کامپوننت هست هم بدون مشکل کار می‌کنه.

04:44.900 --> 04:47.360
کامنت‌ها رو به‌صورت prop می‌گیریم، باهاشون map می‌زنیم.

04:47.840 --> 04:48.890
برای هر کامنت یه li می‌سازیم و داخل ul نشونشون می‌دیم.

04:55.090 --> 04:57.460
فایل رو ذخیره می‌کنم و می‌رم مرورگر ببینم چی شده.

04:58.140 --> 04:59.190
صفحه رو رفرش می‌کنم.

04:59.810 --> 05:01.360
پست‌هام هنوز اینجا هستن با کامنت‌هاشون.

05:01.370 --> 05:04.760
و فقط یه درخواست به سرویس Query فرستاده شده، نه بیشتر.

05:05.450 --> 05:09.350
هنوز می‌تونیم پست و کامنت جدید بسازیم، بزنم یه تست بزنیم.

05:10.100 --> 05:13.130
یه پست سوم می‌سازم، صفحه رو رفرش می‌کنم، یه کامنت سوم هم می‌نویسم.

05:16.210 --> 05:19.660
کامنت رو سابمیت می‌کنم و دوباره رفرش می‌کنم.

05:20.920 --> 05:24.760
و این هم از پست و کامنت سوم که به درستی نمایش داده شدن.

05:25.330 --> 05:28.930
به نظر می‌رسه همه‌چیز به خوبی کار می‌کنه.

05:29.710 --> 05:31.570
الان یه سرویس جدید به سیستم اضافه کردیم.

05:32.700 --> 05:35.820
این سرویس داره eventهای بقیه سرویس‌ها رو مصرف می‌کنه.

05:35.850 --> 05:39.390
و بر اساس اونها یه ساختار دیتا داخلی می‌سازه.

05:41.380 --> 05:45.340
هدف اصلی این بود که تعداد درخواست‌ها به حداقل برسه، ولی مهم‌تر از اون...

05:45.520 --> 05:49.270
ما اینجا یه مدل ارتباط بین سرویس‌ها رو پیاده‌سازی کردیم.

05:49.270 --> 05:54.820
این ساختار Event-Driven باعث شد بتونیم بدون وابستگی مستقیم بین سرویس‌ها، داده رو انتقال بدیم.

05:55.480 --> 05:57.640
و حالا می‌رسیم به یه نکته جالب از این معماری.

05:57.640 --> 06:00.970
یادتونه قبلاً گفتیم یکی از مزیت‌هاش اینه که سرویس‌ها به هم وابسته نیستن؟

06:01.330 --> 06:06.670
این یعنی سرویس query هیچ وابستگی مستقیمی به سرویس‌های دیگه نداره، و این خیلی مهمه.

06:06.670 --> 06:09.520
چرا مهمه؟ الان بهتون نشون می‌دم.

06:10.660 --> 06:13.900
می‌ریم توی ترمینال...

06:15.060 --> 06:18.660
و سرویس comment رو به طور کامل می‌کشیم (خاموشش می‌کنیم).

06:18.660 --> 06:22.770
این هم سرویس کامنت که خاموشش کردیم و همین کار رو برای پست هم انجام می‌دیم.

06:22.800 --> 06:26.730
فرض کن این دو سرویس به دلایل نامعلومی کرش کردن.

06:27.180 --> 06:27.990
ولی جالبه بدونی...

06:28.380 --> 06:34.320
سرویس Query همچنان بدون هیچ مشکلی بالا هست، و می‌تونه داده‌ها رو به کاربرها نشون بده.

06:34.320 --> 06:35.820
بدون حتی کوچک‌ترین مشکلی.

06:36.160 --> 06:37.260
حالا صفحه رو رفرش می‌کنم.

06:37.260 --> 06:38.910
و همچنان همه داده‌هام دیده می‌شن.

06:40.090 --> 06:44.200
اگه بخوام پست جدید بسازم، طبیعیه که خطا می‌گیرم چون سرویس post خاموشه.

06:44.200 --> 06:46.150
و اون مسئول ساخت پست‌هاست.

06:46.420 --> 06:52.510
اما بخش زیادی از اپلیکیشن هنوز بدون هیچ مشکلی کار می‌کنه. این دقیقاً همون چیزیه که معماری مستقل‌سازی سرویس‌ها دنبالش هست.

06:52.510 --> 06:54.760
می‌تونیم بعضی سرویس‌ها رو از دست بدیم.

06:54.790 --> 06:56.260
اما بقیه همچنان پابرجا هستن.

06:56.290 --> 06:57.490
و در مجموع، اپلیکیشنمون ممکنه همچنان قابل استفاده باشه.

07:02.550 --> 07:02.910
خب...

07:02.910 --> 07:03.840
همه چیز خوب پیش رفت.

07:03.840 --> 07:06.870
اما می‌خوام یه قابلیت نهایی هم به این اپ اضافه کنم.

07:07.050 --> 07:09.750
پس یه وقفه کوچیک داشته باشیم، و توی قسمت بعدی ادامه می‌دیم.
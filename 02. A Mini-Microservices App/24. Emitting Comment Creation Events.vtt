WEBVTT

00:01.320 --> 00:03.280
حالا می‌خوایم بریم سراغ سرویس کامنت‌ها.

00:03.300 --> 00:07.980
باید مطمئن بشیم که هر بار کاربری یه کامنت جدید ایجاد می‌کنه، یه event به Event Bus ارسال می‌شه.

00:07.980 --> 00:08.500
توی این حالت،

00:08.520 --> 00:11.830
event ما یه چیزی شبیه به این خواهد بود:

00:11.850 --> 00:13.590
یه `type` به اسم `CommentCreated` داره

00:13.590 --> 00:16.620
و توی `data`، خود کامنت قراره قرار بگیره.

00:16.950 --> 00:19.290
پس دوباره این event رو برای Event Bus می‌فرستیم.

00:19.290 --> 00:25.020
و Event Bus هم این event رو اصطلاحاً "echo" می‌کنه و به همه سرویس‌های دیگه ارسال می‌کنه.

00:25.710 --> 00:30.210
احتمالاً باز هم چندتا خطای 400 می‌گیریم چون هنوز هیچ‌کدوم از سرویس‌ها endpointی برای دریافت event ندارن.

00:30.210 --> 00:34.200
پس طبیعیه که این اتفاق بیفته.

00:34.950 --> 00:35.250
خب،

00:35.250 --> 00:35.880
برگردم به ادیتور.

00:35.880 --> 00:37.410
می‌رم سراغ پوشه‌ی کامنت‌سرویس.

00:38.710 --> 00:40.930
پوشه‌اش رو پیدا می‌کنم و بازش می‌کنم.

00:40.960 --> 00:41.860
اینجاست.

00:42.280 --> 00:42.880
داخلش

00:42.880 --> 00:44.770
فایل index.js رو باز می‌کنم.

00:45.490 --> 00:46.450
بالای فایل،

00:47.270 --> 00:48.530
پکیج axios رو ایمپورت می‌کنم.

00:51.310 --> 00:54.130
بعد می‌رم پایین‌تر، جایی که کامنت جدید ساخته می‌شه.

00:54.490 --> 00:55.330
اینجاست دقیقاً.

00:58.040 --> 01:04.370
درست بعد از اینکه کامنت رو ساختیم و اون رو داخل آرایه قرار دادیم — یعنی جایی که در واقع کامنت رو "ذخیره" کردیم —

01:04.400 --> 01:05.240
همونجا قراره event رو ارسال کنیم.

01:05.240 --> 01:07.970
اونجا axios.post رو اضافه می‌کنیم.

01:08.630 --> 01:12.020
آدرس رو می‌نویسیم: `http://localhost:4005/events`

01:13.410 --> 01:17.760
و بدنه‌ی داده‌ای که می‌فرستیم، یه event با این ساختاره:

01:19.650 --> 01:20.460
type: 'CommentCreated'

01:22.660 --> 01:26.950
و `data`: خود کامنت که همین الان ساختیم.

01:26.950 --> 01:28.720
یعنی همون آبجکت شامل id، content و postId.

01:30.000 --> 01:31.140
`data` همون کامنت کامل هست.

01:31.140 --> 01:32.970
و این تمام اطلاعاتیه که نیاز داریم.

01:33.480 --> 01:40.020
یعنی id کامنت، متن کامنت، و id پستی که این کامنت بهش تعلق داره.

01:41.820 --> 01:47.910
اما ما علاوه‌بر id و content، مقدار postId رو هم به data اضافه می‌کنیم

01:47.910 --> 01:49.980
تا دقیق مشخص کنیم این کامنت مربوط به کدوم پسته.

01:50.760 --> 01:53.160
پس توی `data` سه مقدار قرار می‌دیم:

01:54.310 --> 01:56.200
اول، id کامنت

01:57.820 --> 01:59.020
دوم، محتوای کامنت (`content`)

02:00.140 --> 02:04.250
و در نهایت، postId که داخل همون route موجوده.

02:04.250 --> 02:09.470
یادت باشه postId به صورت پارامتر توی آدرس هست، پس می‌تونیم با `req.params.id` بهش دسترسی پیدا کنیم.

02:09.470 --> 02:16.460
برای وضوح، متغیر `postId` رو برابر `req.params.id` قرار می‌دیم.

02:17.840 --> 02:24.890
در نهایت تابع رو async می‌کنیم و قبل از `axios.post` از await استفاده می‌کنیم.

02:27.450 --> 02:28.230
به‌نظر درست میاد.

02:28.710 --> 02:30.150
بیایم تستش کنیم.

02:30.300 --> 02:31.950
برمی‌گردم به مرورگر.

02:33.740 --> 02:38.420
پستی که ساختیم رو پیدا می‌کنم، یه کامنت براش می‌نویسم و ارسال می‌کنم.

02:39.130 --> 02:43.990
صفحه رو رفرش می‌کنم، می‌بینم که کامنت جدید ظاهر شده، حالا برمی‌گردم به ترمینال.

02:43.990 --> 02:49.540
اینجا انتظار دارم که چند خطای 404 ببینم از طرف event-bus.

02:49.570 --> 02:54.040
دلیلش اینه که هنوز هیچ‌کدوم از سرویس‌ها endpointی برای دریافت event ندارن.

02:55.210 --> 02:55.360
درسته.

02:55.480 --> 02:56.260
همه‌چی خوب پیش رفته.

02:57.250 --> 03:02.080
تا اینجای کار، دو تا سرویس داریم که هر وقت یه اتفاق خاص بیفته، یه event ارسال می‌کنن.

03:02.080 --> 03:03.280
این خیلی خوبه.

03:03.520 --> 03:08.350
حالا باید مطمئن بشیم که سرویس‌هامون — یعنی posts و comments (چون هنوز query service نساختیم) —

03:08.350 --> 03:13.570
یه endpoint داشته باشن که بتونه این eventها رو دریافت کنه و در صورت نیاز روشون پردازش انجام بده.

03:13.570 --> 03:14.680
البته فعلاً،

03:14.680 --> 03:19.900
سرویس post و comment علاقه‌ای به هیچ event ورودی ندارن.

03:19.930 --> 03:24.330
یعنی هیچ نیازی به پردازش eventهای `PostCreated` یا `CommentCreated` ندارن.

03:24.340 --> 03:29.140
اما به محض اینکه سرویس query رو بسازیم، قراره دقیقاً با همین eventها کار کنه.

03:29.140 --> 03:29.770
و به‌شدت بهشون وابسته‌ست.

03:29.920 --> 03:33.640
پس توی گام بعدی، سرویس query نقطه‌ی اصلی تعامل با eventهای ما می‌شه.

03:38.350 --> 03:39.310
پس یه توقف کوتاه همین‌جا داشته باشیم.

03:39.310 --> 03:44.980
قراره خیلی زود بریم سراغ ساختن دو تا handler برای دریافت و پردازش eventها.

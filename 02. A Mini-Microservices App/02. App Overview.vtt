WEBVTT

00:00.880 --> 00:04.990
حالا که با چند نکته در مورد ارتباط بین میکروسرویس‌ها آشنا شدیم، وقتشه واقعاً

00:04.990 --> 00:06.080
شروع کنیم به کدنویسی.

00:06.100 --> 00:10.150
تو این ویدیو می‌خوایم یک نمای اولیه (mockup) از اپلیکیشنی که قراره بسازیم ببینیم تا بهتر

00:10.150 --> 00:12.760
الگوهای ارتباطی غیرهمزمان رو درک کنیم.

00:12.760 --> 00:15.370
تو این طراحی اولیه، چند نکته سریع داریم.

00:15.580 --> 00:20.440
اول اینکه هدف این اپلیکیشن فقط اینه که یه آشنایی اولیه با معماری میکروسرویس‌ها پیدا کنیم.

00:20.680 --> 00:25.180
قراره بعداً توی دوره روی یه پروژه بزرگ‌تر و کامل‌تر کار کنیم.

00:25.180 --> 00:30.010
این پروژه اول فقط برای آشنایی اولیه‌ست و برای اینکه با یه‌سری مفاهیم مهم آشنا بشیم.

00:32.250 --> 00:36.930
همچنین تو این پروژه هدف اینه که تا جای ممکن همه چیز رو از صفر خودمون بسازیم.

00:36.930 --> 00:40.150
یعنی همه‌ی سرویس‌ها رو خودمون پیاده‌سازی می‌کنیم.

00:40.170 --> 00:43.080
حتی سیستم ارسال و دریافت رویدادها (event broker) رو هم خودمون می‌سازیم.

00:43.110 --> 00:47.850
در کل سعی می‌کنیم تا جایی که میشه همه چیز رو دستی بنویسیم تا درک عمیق‌تری پیدا کنیم.

00:48.950 --> 00:51.440
به خاطر همین ساخت همه چیز از صفر،

00:51.440 --> 00:56.510
پیشنهاد نمی‌کنم از این پروژه به عنوان قالب (template) پروژه‌های واقعی میکروسرویس استفاده کنید.

00:56.720 --> 01:00.620
چون تو پروژه‌های واقعی معمولاً از پکیج‌ها و ابزارهای آماده استفاده می‌کنیم به‌جای اینکه همه چیز رو دستی بسازیم.

01:00.620 --> 01:02.550
به‌جای اینکه همه چیز رو دستی پیاده کنیم.

01:02.570 --> 01:07.760
تو پروژه‌های واقعی باید از کتابخانه‌ها و ابزارها کمک بگیریم، نه پیاده‌سازی دستی.

01:07.760 --> 01:08.840
مثل چیزی که اینجا می‌بینید.

01:08.930 --> 01:13.310
در ادامه‌ی دوره روی یه پروژه خیلی بزرگ و حرفه‌ای کار می‌کنیم

01:13.310 --> 01:14.090
که جدی و واقعی خواهد بود.

01:14.090 --> 01:17.600
و اونجا با اون پکیج‌ها و ابزارها هم کار می‌کنیم.

01:17.860 --> 01:19.040
خب، بریم سراغ خود پروژه.

01:19.040 --> 01:20.150
قراره چی بسازیم؟

01:20.180 --> 01:24.680
می‌خوایم یه اپلیکیشن ساده بسازیم که مربوط به انتشار پست (مثلاً پست وبلاگی) باشه

01:24.680 --> 01:27.830
و کاربران بتونن برای اون پست‌ها نظر (comment) بذارن.

01:28.070 --> 01:32.000
وقتی کاربر وارد برنامه میشه، یک فرم بهش نشون داده میشه که بتونه یه پست ایجاد کنه.

01:32.000 --> 01:33.260
فقط یک عنوان خواهد داشت.

01:33.290 --> 01:35.610
یعنی پست فقط title داره، متن یا body نداره.

01:35.630 --> 01:38.210
مثلاً کاربر می‌نویسه "پست من" و دکمه ارسال رو میزنه.

01:38.450 --> 01:42.710
بعد از ارسال، اون پست همین پایین صفحه نمایش داده میشه.

01:43.220 --> 01:48.680
ما عنوان پست رو نشون می‌دیم، تعداد نظرات ثبت‌شده برای اون پست رو نشون می‌دیم،

01:48.680 --> 01:49.350
و همچنین یک فرم برای درج نظر داریم.

01:49.370 --> 01:51.380
که کاربر بتونه همون‌جا نظر بده.

01:52.240 --> 01:56.140
مثلاً من می‌نویسم "من یه نظر هستم" و دکمه ارسال رو می‌زنم.

01:56.140 --> 02:00.730
و همین‌جا یک فرم کوچیک داریم برای اینکه کاربر بتونه برای همون پست نظر (کامنت) بذاره.

02:01.120 --> 02:06.280
مثلاً من ممکنه اینجا بنویسم «من یک نظر هستم» و روی دکمه ارسال کلیک کنم.

02:07.970 --> 02:14.480
در این حالت، شمارنده نظرات باید یک عدد بیشتر بشه

02:14.690 --> 02:18.140
و نظر ثبت‌شده زیر عنوان نمایش داده بشه.

02:19.070 --> 02:23.690
و بعدش می‌تونیم هر چندتا پست دیگه که بخوایم اضافه کنیم. می‌ریم بالا، یه عنوان جدید می‌نویسیم،

02:23.690 --> 02:30.080
مثلاً "پست شماره دو"، ارسال می‌کنیم و اون هم پایین نمایش داده میشه.

02:30.080 --> 02:34.340
و برای اون هم می‌تونیم نظر بدیم مثل "منم یه نظر دیگه‌ام" و بعد از ارسال، نظر اونجا نشون داده میشه.

02:34.370 --> 02:36.890
و همه‌ی این‌ها تو اپلیکیشن قابل دیدنه.

02:37.430 --> 02:41.630
در مجموع اپلیکیشن ساده‌ایه، ولی مطمئنم از سطح پیچیدگی‌ای که حتی تو همین پروژه ساده پیش میاد، تعجب می‌کنی.

02:41.630 --> 02:47.030
چون خیلی از مسائل زیرساختی و مفهومی پشت این سادگی هست که باید بررسی‌شون کنیم.

02:47.030 --> 02:48.500
خب، بریم شروع کنیم.

02:49.880 --> 02:53.600
حالا که یه دید کلی داریم نسبت به چیزی که قراره بسازیم، بیایم شروع کنیم به تجزیه کردن پروژه

02:53.600 --> 02:55.940
و بررسی بعضی از جنبه‌های فنی اون.

02:56.540 --> 03:01.400
اولین چیزی که باید بهش فکر کنیم اینه که چه سرویس‌هایی (services) قراره برای این بخش از دوره و کمی جلوتر ایجاد کنیم.

03:01.400 --> 03:04.670
فعلاً فرض می‌کنیم برای هر منبع (resource) جدا، یک سرویس جدا می‌سازیم.

03:04.670 --> 03:09.050
یعنی برای هر نوع داده‌ای که در اپ داریم، یه سرویس اختصاصی می‌سازیم.

03:09.050 --> 03:11.780
فعلاً دو نوع داده مختلف تو اپ ما وجود داره:

03:12.140 --> 03:16.580
پست‌ها (posts) که همون باکس‌های آبی بزرگ هستند، و کامنت‌ها (comments) که آیتم‌های لیست‌مانند زیر پست‌ها هستن.

03:16.580 --> 03:21.980
پس عملاً دو تا منبع متفاوت داریم، و برای هر کدومشون هم یه سرویس مجزا ایجاد می‌کنیم.

03:21.980 --> 03:24.650
سرویسی برای پست و یکی هم برای کامنت.

03:24.650 --> 03:27.140
کاملاً جدا از هم.

03:27.500 --> 03:30.290
پس تا اینجا داریم به دو سرویس مجزا فکر می‌کنیم:

03:30.290 --> 03:33.740
یک سرویس برای مدیریت پست‌ها که کارش ذخیره و نمایش اون‌هاست،

03:34.070 --> 03:39.230
و یک سرویس برای کامنت‌ها که وظیفه‌اش ساختن و لیست کردن نظرات هست.

03:39.230 --> 03:41.240
هرکدوم مسئول داده‌ی خودشون هستن.

03:41.240 --> 03:46.340
اولین قدم اینه که اهداف یا وظایف هر سرویس رو واضح کنیم.

03:46.340 --> 03:47.660
یعنی بدونیم چی ازش می‌خوایم.

03:49.330 --> 03:51.420
مثلاً از سرویس پست، انتظار داریم:

03:51.430 --> 03:56.260
قابلیت ایجاد پست جدید و نمایش همه‌ی پست‌ها رو داشته باشه. و از سرویس کامنت هم

03:56.260 --> 03:56.950
انتظار مشابهی داریم:

03:57.250 --> 04:02.320
امکان ساخت کامنت جدید و لیست کردن همه‌ی کامنت‌ها.

04:02.320 --> 04:04.360
اما اینجا یه پیچیدگی پنهان وجود داره.

04:04.360 --> 04:08.380
سرویس پست ساده‌تره، ولی سرویس کامنت‌ها یه مقدار چالش‌برانگیزتره.

04:08.650 --> 04:11.260
چون کامنت همیشه باید به یک پست وابسته باشه.

04:11.290 --> 04:15.760
یعنی وقتی کاربر یک کامنت ایجاد می‌کنه، باید بدونه اون کامنت مربوط به کدوم پسته.

04:15.760 --> 04:20.290
پس یه وابستگی (dependency) بین ساختن کامنت و وجود داشتن پست وجود داره.

04:20.290 --> 04:22.370
کامنت بدون پست معنی نداره.

04:22.390 --> 04:26.560
برای همین باید از یکی از الگوهای ارتباطی همزمان (synchronous) یا غیرهمزمان (asynchronous) استفاده کنیم

04:26.560 --> 04:29.260
تا اطمینان حاصل کنیم که فقط برای پست‌های معتبر می‌تونیم کامنت بسازیم.

04:29.260 --> 04:36.250
از طرف دیگه، موقع لیست کردن کامنت‌ها هم نمی‌خوایم همه‌ی کامنت‌های جهان رو بیاریم.

04:36.250 --> 04:37.820
بلکه فقط کامنت‌هایی که مربوط به یک پست خاص هستن رو می‌خوایم.

04:37.840 --> 04:42.280
یعنی باید امکان فیلتر کردن کامنت‌ها بر اساس پست وجود داشته باشه.

04:42.280 --> 04:46.990
مثلاً اگه ۱۰ تا پست برتر رو نشون بدیم، فقط کامنت‌های مربوط به همون ۱۰ تا رو بخوایم.

04:46.990 --> 04:47.620
نه همه‌ی کامنت‌ها رو.

04:48.130 --> 04:52.840
پس حتی اگه بگیم "همه‌ی کامنت‌ها رو لیست کن"، در عمل داریم فقط کامنت‌های یه پست خاص رو می‌خوایم.

04:52.840 --> 04:54.520
یعنی یه وابستگی دیگه داریم.

04:54.520 --> 05:00.040
کامنت‌هایی که قراره نمایش داده بشن باید به نحوی وابسته به پست‌هایی باشن که داریم نشون می‌دیم.

05:00.910 --> 05:05.890
اگه الان اینا برات خیلی شفاف نیست اشکالی نداره. هدفم فقط اینه بگم این پروژه ساده، در عمل پیچیدگی‌هایی داره.

05:05.890 --> 05:10.600
حتی اگه ظاهرش خیلی ساده باشه، پیاده‌سازیش چالش‌برانگیزتر از اون چیزیه که فکر می‌کنی.

05:10.780 --> 05:14.110
و این همون چیزیه که باعث میشه یادگیریش ارزشمند بشه.

05:14.110 --> 05:19.540
خب حالا که کاملاً مشخص شد چی قراره بسازیم و چه چالش‌هایی جلو رومونه،

05:19.540 --> 05:22.870
یه توقف کوچیک می‌کنیم و از ویدیوی بعدی شروع می‌کنیم به کدنویسی.

05:23.230 --> 05:25.340
اگه الان هیچ‌کدوم از اینا برات قابل درک نیست، کاملاً طبیعیه و اشکالی نداره.

05:25.360 --> 05:30.550
فقط می‌خوام بگم که این اپلیکیشن به ظاهر ساده، در واقع چالش‌های پنهان زیادی داره.

05:30.550 --> 05:34.150
حتی اگه خیلی ساده و سرراست به نظر برسه.

05:34.950 --> 05:35.250
خب،

05:35.250 --> 05:38.880
الان که می‌دونیم قراره چی بسازیم و مشخصه که با چالش‌هایی روبه‌رو می‌شیم،

05:38.880 --> 05:40.430
یه مکث کوتاه می‌کنیم

05:40.590 --> 05:43.620
و از ویدیوی بعدی شروع می‌کنیم به نوشتن کد.
WEBVTT

00:01.200 --> 00:05.250
In this video, we're going to try implementing option number three inside of our application.

00:05.460 --> 00:08.190
So we're going to take our query service down.

00:08.190 --> 00:12.180
We're then going to try to create some number of posts and some number of comments as well.

00:12.210 --> 00:16.110
We're then going to launch our query service and we're going to try to make sure that the query service

00:16.110 --> 00:17.970
can reach out to the event bus and tell it.

00:17.970 --> 00:20.880
Give me all the events that have occurred up to this point in time.

00:21.270 --> 00:25.710
And I want to remind you that we are putting together a home grown version of an event bus.

00:25.830 --> 00:32.280
So there are real open source projects, very production quality in nature that are going to do a lot

00:32.280 --> 00:37.140
of what we are discussing right here in a much more automated and well intentioned fashion that within

00:37.140 --> 00:41.190
what we are doing currently so all you and I are doing are trying to get a sense of what is going on

00:41.190 --> 00:41.730
here.

00:41.760 --> 00:44.850
You should not use this code that we're about to write in a production environment.

00:44.850 --> 00:48.060
I just want you to have an idea of what is going on behind the scenes.

00:48.960 --> 00:53.460
The first thing we're going to do is to make sure that whenever our event bus receives an event, we

00:53.460 --> 00:55.320
are going to store it inside of an array.

00:55.740 --> 01:00.990
We're then going to add in a new endpoint to our event bus, an endpoint that can allow us to retrieve

01:00.990 --> 01:02.670
all the events that have ever occurred.

01:03.090 --> 01:07.470
Well, then make sure that whenever we launch the query service, we'll have it reach out to the event

01:07.470 --> 01:12.000
bus and request all the events that have occurred, and we'll make sure that the query service attempts

01:12.000 --> 01:13.530
to process all that data.

01:14.300 --> 01:15.110
So let's get to it.

01:15.110 --> 01:19.130
The first thing we're going to do is open up our event bus and make sure that we store all the different

01:19.130 --> 01:21.110
events that we collect over time.

01:22.720 --> 01:26.020
So back inside my editor, I'll find the event bus implementation.

01:26.020 --> 01:27.490
So here's indexes.

01:28.600 --> 01:32.140
Right above our post request handler where we deal with incoming events.

01:32.290 --> 01:39.100
I'm going to simply create a new variable called events and will have it be an array like so.

01:39.280 --> 01:43.180
So we're going to take every single incoming event and throw it into this array.

01:44.840 --> 01:46.580
Then inside of our post request handler.

01:47.560 --> 01:51.840
We'll take a look at the event that we receive and we will push it into that array.

01:51.850 --> 01:55.180
So we'll do an events dot push event.

01:56.640 --> 02:00.660
So now critically, the most recent event is going to be at the end of this array.

02:00.690 --> 02:04.140
The first event that we receive will be at the very front of the array.

02:05.360 --> 02:10.130
We're then going to create another endpoint on this event bus to retrieve all the events that have ever

02:10.130 --> 02:10.730
occurred.

02:11.270 --> 02:13.730
So after that existing post request handler.

02:14.930 --> 02:22.760
I'll put in an AppKit for events with rec and rez, and then if anyone ever makes a request to splash

02:22.760 --> 02:27.800
events right here, we will simply respond with that big list of events.

02:28.780 --> 02:29.530
Now again, one.

02:29.530 --> 02:31.820
Repeat what I said just 2 minutes ago.

02:31.840 --> 02:35.990
Real implementations of event buses are way more complex than what we have right here.

02:36.010 --> 02:41.500
This is just to give you a sense of this approach of trying to synchronize services after they've been

02:41.500 --> 02:45.400
out of service, down, not even in existence or whatever else.

02:46.640 --> 02:46.940
Okay.

02:46.940 --> 02:49.310
So now let's go over to our query service.

02:49.910 --> 02:51.020
I'm going to close that file.

02:51.320 --> 02:54.560
I'll go over to the query service and open up the indexed JS file.

02:56.530 --> 03:00.580
The first thing we're going to do inside of here is extract some of the logic that we have inside of

03:00.580 --> 03:03.040
our host events, root handler right now.

03:03.430 --> 03:08.380
So inside of here, we've got a lot of code that knows exactly how to deal with or handle any given

03:08.380 --> 03:12.940
event that's all localized directly inside this post request handler right now.

03:13.150 --> 03:18.160
But we're going to need to very quickly process events in some different locations inside this file.

03:18.370 --> 03:22.420
Long story short, we're going to take all these if statements and extract them into a separate helper

03:22.420 --> 03:23.080
function.

03:23.990 --> 03:27.470
So inside this post events, I'm going to find the first if statement.

03:27.890 --> 03:30.590
I'm going to go down to the bottom if statement right here.

03:31.980 --> 03:33.270
I'm going to cut all that.

03:33.480 --> 03:38.190
And so I'm just left with type data, a console log and the send right there.

03:40.930 --> 03:46.210
I'm then going to define a new function right underneath posts and I'll call it handle event.

03:48.610 --> 03:52.870
And then I'm going to paste all the stuff that we just cut inside of that function.

03:55.690 --> 04:00.250
Now this function is going to need access to the data of the event and the type as well.

04:00.280 --> 04:05.620
So I'm going to assume that we're going to provide the type and the data as arguments to handle event.

04:07.530 --> 04:11.400
Then finally back inside of our post request handler here is right here.

04:11.490 --> 04:14.010
We're going to delete that console log, which we don't really need anymore.

04:14.800 --> 04:17.600
And I'll replace it with a call to handle event.

04:18.690 --> 04:21.660
And I will pass in the type and data.

04:23.010 --> 04:27.030
So all we just did is extract all that event, handling data into a reusable function.

04:28.840 --> 04:29.170
Okay.

04:29.170 --> 04:35.190
So now last thing we need to do whenever our query service comes online and it starts listening on Port

04:35.200 --> 04:36.440
4002.

04:36.460 --> 04:42.490
Right after that would probably be a pretty good time to make a request over to our event bus and try

04:42.490 --> 04:47.110
to get a listing of all the different events that have been emitted up to this point in time.

04:48.230 --> 04:56.480
So right after we do that console.log, I'm going to add in and await Axios dot get we're going to reach

04:56.480 --> 05:02.840
out to http slash local host 4005 events.

05:04.780 --> 05:07.200
That's going to give us all the events that have occurred over time.

05:07.210 --> 05:09.250
Remember, we're making a gift request right here.

05:10.530 --> 05:12.690
It was sign that to some rose variable.

05:13.800 --> 05:17.190
I'm going to make sure I also mark the enclosing function as async.

05:18.710 --> 05:22.730
And then finally we're going to iterate through all the events that have occurred using a simple for

05:22.730 --> 05:23.240
of loop.

05:23.240 --> 05:25.820
We can also do a for each whatever you want to do.

05:25.820 --> 05:31.340
But in this case I'll just use a four of very simple, straightforward, so let's say let event of rez

05:31.340 --> 05:32.390
dot data.

05:32.420 --> 05:37.490
Remember whenever we use Axios, the response or the actual data we get back is available on the data

05:37.490 --> 05:38.990
property of this response.

05:41.370 --> 05:46.410
So then inside of here, maybe first we could do a quick council log and say something like processing

05:46.650 --> 05:47.520
event.

05:49.270 --> 05:50.620
And then event type.

05:52.530 --> 05:54.960
And then right after that, we'll go ahead and actually handle the event.

05:54.960 --> 05:56.340
So handle event.

05:56.790 --> 06:00.120
We'll put in the event type in the event data.

06:01.670 --> 06:02.720
And that should be it.

06:04.430 --> 06:04.700
Okay.

06:04.700 --> 06:05.720
So let's save this.

06:06.230 --> 06:10.190
This is kind of a long video, so we'll take a quick pause right here and then test it out in just a

06:10.190 --> 06:10.700
moment.

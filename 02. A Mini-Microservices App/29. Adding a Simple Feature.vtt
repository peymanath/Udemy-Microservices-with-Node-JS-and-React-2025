WEBVTT

00:01.390 --> 00:02.890
وضعیت اپلیکیشنمون تا اینجا خوبه.

00:02.890 --> 00:05.540
و توی این ویدیو می‌خوایم یه قابلیت جدید بهش اضافه کنیم.

00:05.560 --> 00:08.290
بیاید اول ببینیم قراره چه قابلیتی رو پیاده‌سازی کنیم.

00:09.200 --> 00:10.620
قراره قابلیت "نظارت روی محتوا" رو اضافه کنیم.

00:10.640 --> 00:13.670
یعنی می‌خوایم محتوای کامنت‌ها رو بررسی کنیم.

00:13.970 --> 00:18.230
و اگر داخل کامنت یه کلمه خاص وجود داشته باشه، اون کامنت رو به‌نوعی علامت‌گذاری یا رد کنیم.

00:18.230 --> 00:22.640
در این مثال، اگر کامنتی شامل کلمه "orange" باشه، اون رو فیلتر می‌کنیم.

00:22.640 --> 00:26.030
این فیلتر ساده است: فقط بررسی می‌کنه که آیا کلمه "orange" توی متن هست یا نه.

00:26.960 --> 00:29.540
اگر باشه، یعنی اون کامنت قابل قبول نیست و باید نشانه‌گذاری بشه.

00:29.540 --> 00:31.820
یه فیلتر خیلی ساده‌ست، ولی بر اساس همین می‌خوایم کار کنیم.

00:31.820 --> 00:36.170
فقط بررسی می‌کنیم که آیا متن کامنت شامل کلمه orange هست یا نه.

00:36.200 --> 00:38.870
اگر بود، یعنی یه مشکلی هست و باید گزارش بشه.

00:38.870 --> 00:40.460
حالا یه مقدار بیشتر توضیح می‌دم تا موضوع روشن‌تر بشه.

00:41.060 --> 00:44.870
فرض اول اینه که اگر فقط یه فیلتر ساده مثل این داشته باشیم، منطقیه که اون رو داخل React پیاده کنیم.

00:45.170 --> 00:50.030
ولی فرض کنیم که لیست کلمات فیلترشده به‌طور مداوم تغییر می‌کنه.

00:50.030 --> 00:54.980
مثلاً الان "orange" فیلتر میشه، ولی ممکنه چند دقیقه دیگه بخوایم تغییرش بدیم به "banana".

00:55.070 --> 00:59.660
اگر اینجوری باشه، نباید فیلترینگ رو داخل React بنویسیم، چون برای هر تغییر باید کل اپ رو دوباره دیپلوی کنیم.

00:59.660 --> 01:01.090
که اصلاً منطقی نیست.

01:01.100 --> 01:04.700
پس باید فیلترینگ رو به جایی منتقل کنیم که به‌راحتی قابل تنظیم باشه.

01:05.620 --> 01:09.970
فرض دوم اینه که پیاده‌سازی این فیلتر داخل سرویس کامنت‌ها خیلی ساده‌ست.

01:09.970 --> 01:15.280
ولی ما عمداً تصمیم می‌گیریم این قابلیت رو در قالب یه سرویس جدید پیاده‌سازی کنیم، جدا از کامنت سرویس.

01:18.080 --> 01:22.640
فرض سوممون اینه که ممکنه بررسی یک کامنت زمان‌بر باشه.

01:22.640 --> 01:26.870
حتی با اینکه فقط داریم دنبال یه کلمه خاص توی متن می‌گردیم.

01:26.870 --> 01:27.740
ولی می‌خوایم فرض کنیم

01:27.740 --> 01:33.140
که این پردازش ممکنه چند دقیقه یا حتی چند ساعت طول بکشه.

01:35.810 --> 01:40.280
درواقع داریم یه سناریوی واقعی‌تر از دنیای واقعی شبیه‌سازی می‌کنیم که در اون ممکنه پردازش‌های سنگین یا طولانی برای فیلتر کردن محتوا نیاز باشه.

01:40.280 --> 01:46.790
و این باعث میشه طراحی معماری‌مون به سمت ساخت یک سرویس جدا برای moderation هدایت بشه.

01:46.790 --> 01:47.490
پس با این پیش‌فرض‌ها پیش می‌ریم.

01:57.730 --> 01:58.060
خب

01:58.060 --> 02:02.500
بذارید یه پیش‌نمایش از چیزی که می‌خوایم بهش برسیم نشون‌تون بدم.

02:02.800 --> 02:05.380
فرض کنید ما سه تا پست داریم که هرکدوم یه کامنت دارن.

02:06.280 --> 02:07.900
و هر کامنت می‌تونه تو یکی از سه وضعیت مختلف باشه.

02:08.350 --> 02:12.040
اولین حالت اینه که کامنت تأیید شده و مشکلی نداره.

02:12.160 --> 02:14.460
مثلاً همین کامنت وسطی که می‌بینید، هیچ مشکلی نداره چون کلمه orange توش نیست.

02:14.470 --> 02:18.250
پس این کامنت رو به کاربر نمایش می‌دیم.

02:18.250 --> 02:18.880
این میشه حالت اول.

02:18.880 --> 02:20.620
حالت دوم: در انتظار بررسی بودن کامنته.

02:21.100 --> 02:24.430
یعنی هنوز کامنت بررسی نشده و شاید چند دقیقه یا چند ساعت طول بکشه تا پردازش بشه.

02:24.430 --> 02:29.830
ما هنوز همون مقایسه ساده رشته‌ای رو انجام می‌دیم، ولی فرض می‌گیریم پردازشش طولانیه.

02:29.830 --> 02:30.760
برای این حالت

02:30.760 --> 02:34.690
باید یه پیام به کاربر نشون بدیم که مثلاً «این کامنت در حال بررسی است».

02:34.690 --> 02:35.500
این میشه حالت دوم.

02:35.860 --> 02:40.240
و در نهایت، حالت سوم کامنت‌هایی هستن که کلمه orange توشون هست.

02:40.240 --> 02:40.690
در این حالت

02:40.690 --> 02:42.580
باید به کاربر نشون بدیم که این کامنت رد شده.

02:43.000 --> 02:48.190
یعنی کاربر بفهمه یه کامنتی بوده، ولی به خاطر فیلتر شدن، نمایش داده نمیشه.

02:48.190 --> 02:52.600
و بدونن که کامنتی بوده که توسط سیستم رد شده یا مجاز نبوده.

02:52.600 --> 02:53.710
این میشه حالت سوم.

02:53.710 --> 02:55.690
حالا یه نکته مهم رو از همین اول بگم:

02:56.780 --> 03:01.280
بر اساس همین پیش‌نمایشی که دیدید، یه چیز رو با اطمینان کامل می‌تونیم بگیم.

03:01.310 --> 03:07.340
و اون اینکه اپلیکیشن React حتماً باید بدونه وضعیت هر کامنت چیه: منتظر بررسیه؟ تأیید شده؟ یا رد شده؟

03:07.340 --> 03:13.910
در حال حاضر React فقط فکر می‌کنه که هر کامنت یه ID و یه content داره. همین.

03:14.510 --> 03:18.590
ولی حالا که می‌خوایم وضعیت هر کامنت رو هم بدونیم، باید یه فیلد جدید بهش اضافه کنیم.

03:18.590 --> 03:22.760
این فیلد جدید یه رشته‌ست که مقدارش می‌تونه یکی از این سه‌تا باشه: "approved"، "rejected" یا "pending".

03:23.120 --> 03:28.010
approved یعنی این کامنت بررسی شده و مشکلی نداشته و مثلاً کلمه orange توش نبوده.

03:28.010 --> 03:31.490
rejected یعنی بررسی شده ولی باید مخفی بمونه.

03:31.880 --> 03:35.810
pending هم یعنی هنوز بررسی انجام نشده و منتظر مونده تا پردازش انجام بشه.

03:36.750 --> 03:40.440
پس داریم این ساختار رو به مدل کامنت‌هامون اضافه می‌کنیم.

03:40.440 --> 03:45.300
تا هم توی فرانت‌اند بشه راحت وضعیت کامنت رو فهمید، هم توی بک‌اند بتونیم بهتر مدیریت کنیم.

03:45.300 --> 03:49.140
و این وضعیت‌ها هستن که مشخص می‌کنن چه چیزی به کاربر نشون بدیم یا ندیم.

03:49.710 --> 03:52.890
پس اگه وضعیت کامنت "rejected" باشه، باید همین‌جا به کاربر نشونش بدیم.

03:53.680 --> 03:56.950
و در نهایت، اگه وضعیت "pending" باشه یعنی هنوز عملیات فیلترینگ کامل نشده.

03:56.950 --> 03:57.540
در این حالت

03:57.550 --> 04:02.620
باید یه پیام مثل "در انتظار بررسی" یا "در حال بررسی" برای کامنت نمایش داده بشه.

04:03.760 --> 04:04.210
خب

04:04.210 --> 04:09.550
تو این ویدیو حدود ۴ دقیقه وقت گذاشتیم تا راجع‌به چیزی صحبت کنیم که در نگاه اول خیلی ساده به نظر میاد.

04:09.550 --> 04:10.930
و واقعاً هم همینه.

04:10.930 --> 04:12.490
این فیچر خیلی ساده به نظر می‌رسه.

04:12.490 --> 04:15.910
اما تأکید می‌کنم که قضیه به این سادگی نیست.

04:16.210 --> 04:21.130
وقتی پیاده‌سازی رو شروع کنیم، می‌بینید که پیچیدگی‌های پنهان زیادی پشت این قابلیت ساده وجود داره.

04:21.130 --> 04:21.590
واقعاً زیاده.

04:21.610 --> 04:24.520
خیلی بیشتر از اون چیزی که فکرش رو می‌کردید درگیر می‌شیم.

04:24.520 --> 04:29.710
و پیاده‌سازی چنین چیزی توی معماری میکروسرویس خیلی پیچیده‌تر از حالتیه که فقط یه اپ مونولیت ساده داریم.

04:33.430 --> 04:34.450
خب، یه توقف کوتاه داشته باشیم.

04:34.450 --> 04:35.710
تو ویدیوی بعدی برمی‌گردیم.

04:35.710 --> 04:39.820
می‌خوایم طراحی فعلی اپلیکیشن‌مون رو بررسی کنیم و ببینیم چطور می‌تونیم این قابلیت رو پیاده‌سازی کنیم.

04:39.820 --> 04:41.050
و هم‌زمان متوجه چندتا مشکل هم می‌شیم.

04:41.050 --> 04:44.530
پس یه استراحت کوتاه، و تو ویدیوی بعدی ادامه می‌دیم.
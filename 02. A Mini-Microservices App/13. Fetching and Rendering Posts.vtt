WEBVTT

00:01.440 --> 00:06.340
توی این ویدیو قراره کامپوننت‌های لیست پست‌ها، لیست کامنت‌ها و ساخت کامنت رو شروع کنیم.

00:06.360 --> 00:10.110
الان کاملاً درگیر دنیای ری‌اکت هستیم و فعلاً خبری از میکروسرویس‌ها نیست.

00:10.110 --> 00:11.660
ولی نگران نباش، قرار نیست زیاد طول بکشه.

00:11.670 --> 00:14.640
فقط باید خیلی سریع این سه‌تا کامپوننت رو کنار هم بچینیم.

00:14.640 --> 00:18.720
همون‌طور که چند بار گفتم، خیلی زود می‌فهمیم که معماری میکروسرویس‌مون یه سری مشکلات جدی داره.

00:18.720 --> 00:20.660
پس خیلی زود برمی‌گردیم سراغ میکروسرویس‌ها.

00:20.670 --> 00:23.550
فعلاً فقط این کامپوننت‌ها رو سریع تموم کنیم.

00:24.030 --> 00:27.960
خب، بریم سراغ ادیتور کدمون توی پروژه ری‌اکت.

00:27.960 --> 00:31.230
اینه همون جایی که الان هستم.

00:31.770 --> 00:32.610
داخل پوشه src

00:34.190 --> 00:39.560
یه فایل جدید می‌سازم به اسم PostList.js

00:41.380 --> 00:41.920
توی این فایل

00:41.920 --> 00:43.330
اول از همه React رو ایمپورت می‌کنم.

00:45.450 --> 00:47.040
بعد هم یه export default می‌زنم.

00:49.230 --> 00:50.520
فعلاً یه div خالی برمی‌گردونم.

00:50.520 --> 00:52.320
فقط برای اینکه ساختارش رو داشته باشیم.

00:54.140 --> 00:57.080
و مطمئن می‌شم که این کامپوننت داخل App رندر میشه.

00:57.410 --> 00:59.540
برای همین برمی‌گردم به فایل App

01:01.030 --> 01:01.540
بالای فایل

01:01.540 --> 01:06.130
PostList رو ایمپورت می‌کنم از فایل مربوطه.

01:08.200 --> 01:11.410
بعد از کامپوننت ساخت پست، یه خط افقی می‌ذارم

01:11.440 --> 01:15.520
تا صفحه بخش‌بندی بشه و کاربر متوجه بشه که داره بخش دیگه‌ای رو می‌بینه.

01:15.520 --> 01:17.350
بعدش هم یه h1 با عنوان "پست‌ها" اضافه می‌کنم.

01:18.080 --> 01:20.510
و در نهایت کامپوننت PostList رو رندر می‌کنم.

01:22.500 --> 01:23.940
خب همه چیز ساده و مرتب.

01:24.670 --> 01:27.130
برگردیم سراغ خود کامپوننت PostList

01:29.670 --> 01:30.030
خب

01:30.060 --> 01:31.170
ببینیم این کامپوننت قراره چی کار کنه.

01:32.260 --> 01:34.360
باید یه درخواست بفرسته به سرویس پست

01:34.690 --> 01:37.180
و لیستی از همه پست‌هایی که تا حالا ساخته شدن رو بگیره.

01:37.210 --> 01:42.160
بعد باید اون لیست پست‌ها رو پیمایش کنیم و برای هرکدوم نمایش بسازیم.

01:48.230 --> 01:53.120
یه div ساده یا هر چیز دیگه‌ای می‌ذاریم که فقط عنوان هر پست رو داخل یه کارت کوچیک نشون بده.

01:53.120 --> 01:53.990
یه چیزی شبیه کارت‌های محتوا.

01:55.010 --> 02:00.170
اول بیایم یه کدی بنویسیم که درخواست بفرسته به سرویس پست‌هامون تا لیست پست‌های ساخته‌شده رو بگیره.

02:00.170 --> 02:00.920
بریم سر اصل موضوع.

02:02.000 --> 02:03.240
بالای فایل شروع می‌کنیم.

02:03.660 --> 02:08.280
از React هوک useState رو می‌گیریم چون باید یه جایی لیست پست‌ها رو ذخیره کنیم.

02:08.280 --> 02:08.790
بدون این نمی‌شه.

02:10.930 --> 02:12.220
علاوه بر اون

02:13.260 --> 02:17.100
باید axios رو هم ایمپورت کنیم تا بتونیم درخواست HTTP بفرستیم.

02:18.760 --> 02:20.140
یه نکته سریع دیگه هم اینه که

02:20.140 --> 02:24.910
باید useEffect رو هم استفاده کنیم تا فقط یک بار موقع بارگزاری اولیه کامپوننت درخواست ارسال بشه.

02:24.910 --> 02:26.290
فقط همون بار اول.

02:27.200 --> 02:27.420
خب

02:27.500 --> 02:29.750
بیایم یه تابع بنویسیم برای ارسال این درخواست.

02:31.080 --> 02:35.400
اول از همه یه state تعریف می‌کنیم به اسم posts.

02:38.620 --> 02:41.710
و باید یه مقدار اولیه هم برای این state مشخص کنیم.

02:41.920 --> 02:45.640
شاید وسوسه بشی که یه آرایه بزاری چون داریم یه لیست از پست‌ها می‌گیریم.

02:45.640 --> 02:49.450
ولی بیا یه لحظه برگردیم به سرویس پست‌هامون که قبلاً نوشتیم.

02:49.480 --> 02:52.330
می‌خوام یه چیزی رو یادت بیارم. بریم یه نگاه به کدش بندازیم.

02:52.480 --> 02:55.120
می‌رم تب مربوط به پروژه post رو باز می‌کنم.

02:55.330 --> 02:57.520
الان داخل پروژه post هستم.

02:58.060 --> 03:00.160
وارد فایل index.js شدم.

03:00.610 --> 03:05.260
یادت باشه که ما همه پست‌ها رو داخل یه آبجکت ذخیره کردیم و وقتی کاربر لیست پست‌ها رو می‌خواست، همون آبجکت کامل رو برمی‌گردوندیم.

03:05.260 --> 03:08.950
یعنی response از نوع آبجکت هست نه آرایه.

03:09.940 --> 03:14.250
پس وقتی می‌خوایم مقدار اولیه برای useState مشخص کنیم، بهتره یه آبجکت بدیم.

03:14.290 --> 03:15.130
نه یه آرایه.

03:15.130 --> 03:19.600
چون اون چیزی که واقعاً از API قراره بگیریم یه آبجکته.

03:19.600 --> 03:20.050
نه لیست ساده.

03:21.360 --> 03:26.520
پس توی فایل PostList، مقدار اولیه state رو یه آبجکت می‌ذارم.

03:26.520 --> 03:31.110
تا از همون اول هم‌راستا با ساختار داده‌ای باشیم که از API برمی‌گرده.

03:31.110 --> 03:31.800
درسته؟

03:33.160 --> 03:38.460
بعدش یه تابع تعریف می‌کنم که درخواست واقعی رو به سرویس پست ارسال کنه.

03:38.500 --> 03:39.160
اسم تابع رو می‌ذارم fetchPosts

03:39.940 --> 03:42.580
یه تابع async هست چون قراره از async/await استفاده کنیم.

03:43.330 --> 03:47.560
همه درخواست رو توی همین تابع می‌نویسیم و دیتا رو می‌گیریم.

03:49.070 --> 03:50.120
داخل تابع...

03:50.150 --> 03:56.180
با استفاده از await و axios درخواست رو می‌فرستیم و منتظر می‌مونیم تا پاسخ برگرده.

03:56.180 --> 04:00.100
برای گرفتن لیست پست‌ها باید یک درخواست GET بفرستیم به http://localhost:4000

04:00.110 --> 04:01.700
جایی که سرویس پست‌هامون ران شده.

04:01.700 --> 04:06.020
و مسیر مربوطه هم همون /posts هست.

04:06.380 --> 04:12.290
پس آدرس نهایی میشه: http://localhost:4000/posts

04:16.340 --> 04:21.090
یادت باشه وقتی با axios درخواست می‌زنیم، نتیجه‌ای که برمی‌گرده داخل شیء response هست

04:21.110 --> 04:24.560
و دیتا اصلی داخل فیلد data اون قرار داره.

04:25.040 --> 04:29.480
پس ما فقط rez.data رو برمی‌داریم و باهاش state مربوط به posts رو مقداردهی می‌کنیم.

04:29.840 --> 04:31.970
با setPosts مقدار جدید رو می‌ذاریم.

04:32.420 --> 04:34.160
همون rez.data.

04:38.760 --> 04:40.400
خب حالا تابع آماده‌ست.

04:40.410 --> 04:43.050
فقط باید مشخص کنیم کی اجرا بشه.

04:43.260 --> 04:46.260
برای همین useEffect رو آوردیم.

04:46.260 --> 04:51.450
useEffect کمک می‌کنه که یه کدی رو در زمان مشخصی از چرخه عمر کامپوننت اجرا کنیم.

04:51.660 --> 04:57.120
اینجا می‌خوایم فقط وقتی برای اولین بار کامپوننت روی صفحه ظاهر شد، fetchPosts اجرا بشه.

04:58.350 --> 05:02.280
برای این کار useEffect رو صدا می‌زنیم و بهش دو آرگومان می‌دیم:

05:02.280 --> 05:04.230
آرگومان اول یه تابع هست

05:04.970 --> 05:10.250
و آرگومان دوم که خیلی مهمه یه آرایه خالیه

05:10.250 --> 05:11.930
این آرایه خالی می‌گه فقط یک بار اجرا بشه.

05:11.960 --> 05:16.370
و داخل اون تابع fetchPosts رو صدا می‌زنیم.

05:17.120 --> 05:20.290
همین. اینطوری فقط همون بار اول اجرا میشه.

05:21.790 --> 05:22.390
عالیه.

05:24.940 --> 05:27.240
برای تست سریع، بعد از useEffect

05:27.240 --> 05:31.590
یه console.log می‌ذاریم تا مقدار state پست‌ها رو ببینیم.

05:31.620 --> 05:32.490
console.log(posts)

05:35.860 --> 05:36.090
خب

05:36.130 --> 05:38.500
کد رو ذخیره می‌کنم و برمی‌گردم به مرورگر.

05:40.900 --> 05:45.670
توی کنسول که از قبل بازه، می‌بینم که یک بار مقدار پیش‌فرض پست‌ها لاگ شده.

05:45.700 --> 05:49.360
و بلافاصله بعدش یه آبجکت میاد که یه کلید مثل a01 و ...

05:49.360 --> 05:53.770
اون همون ID تصادفی‌ایه که موقع ساخت پست ایجاد کرده بودیم

05:53.800 --> 05:58.900
و مقدارش هم همون دیتای پسته.

05:58.900 --> 06:00.220
پس همه چی درست کار کرده.

06:01.650 --> 06:02.580
الان باید این آبجکت رو پیمایش کنیم

06:02.970 --> 06:06.720
و برای هر مقدارش یه کارت پست روی صفحه نشون بدیم.

06:07.640 --> 06:13.220
برای هر مقدار (یعنی هر پست) یه نمایش کوچیک بسازیم.

06:13.610 --> 06:14.660
بزن بریم.

06:17.000 --> 06:19.430
اول console.log رو حذف می‌کنم.

06:20.610 --> 06:28.530
بعدش یه متغیر به اسم renderedPosts می‌سازم که نتیجه‌ی Object.values(posts) هست.

06:28.890 --> 06:31.260
Object.values لیستی از مقادیر آبجکت رو بهم می‌ده.

06:32.660 --> 06:38.180
یعنی لیستی از پست‌ها (نه کلیدها)، چون هر کلید یه پسته.

06:38.180 --> 06:40.190
بعدش روی اون لیست map می‌زنیم.

06:40.460 --> 06:44.120
برای هر post یه خروجی می‌سازیم و برمی‌گردونیم.

06:44.990 --> 06:46.910
توی return:

06:47.650 --> 06:49.930
یه تکه JSX می‌نویسیم برای نمایش پست.

06:53.220 --> 06:57.210
یه div می‌ذارم که خودش کلاس کارت داره.

06:57.910 --> 06:59.080
یعنی یه قاب کارت مانند.

07:00.480 --> 07:02.400
کمی استایل هم دستی بهش می‌دم.

07:03.540 --> 07:06.320
width: 30% و margin-bottom: 26px

07:06.560 --> 07:08.990
تا ظاهر بهتری بگیره.

07:10.020 --> 07:14.970
از اونجایی که داریم لیست تولید می‌کنیم، ری‌اکت انتظار داره هر عنصر یه key داشته باشه.

07:15.270 --> 07:18.270
برای همین key رو می‌ذاریم برابر با post.id

07:19.450 --> 07:22.620
چون هر پست یه id منحصربه‌فرد داره.

07:22.630 --> 07:24.490
این میشه key یکتا برای هر آیتم.

07:26.790 --> 07:31.950
بعد توی این div یه div دیگه می‌ذارم با کلاس card-body

07:31.950 --> 07:36.900
و توش یه تگ h3 که عنوان پست رو نشون بده.

07:37.570 --> 07:40.060
مقدار داخل h3 میشه post.title

07:41.440 --> 07:47.650
یادت باشه از {} استفاده کنیم چون داریم متغیر جاوااسکریپتی رو می‌ذاریم.

08:20.090 --> 08:21.050
خب به نظر میاد همه‌چی خیلی خوب پیش رفته.

08:21.050 --> 08:24.740
الان داریم لیست همه عنوان‌های پست‌هامون رو نمایش می‌دیم.

08:25.080 --> 08:29.780
تنها کاری که مونده اینه که مطمئن بشیم renderedPosts واقعاً روی صفحه نشون داده میشه.

08:29.900 --> 08:36.020
یعنی باید توی خروجی اصلی کامپوننت، این renderedPosts داخل یک المان قرار بگیره و رندر بشه.

08:36.020 --> 08:37.730
پس میام همون div اصلی رو باز می‌کنم.

08:38.530 --> 08:40.660
تگ باز و بسته‌شو می‌ذارم.

08:40.660 --> 08:42.460
و داخلش renderedPosts رو می‌ذارم.

08:48.580 --> 08:50.260
به این div یه کلاس هم می‌دم

08:50.260 --> 08:51.520
البته نه کوچیک، یه ترکیب کامل از کلاس‌هاست

08:51.520 --> 08:52.310
تا استایل مرتب‌تری بگیره.

08:52.330 --> 08:57.670
کلاس‌ها شامل: d-flex, flex-row, flex-wrap

08:57.670 --> 08:58.660
و در آخر هم: justify-content-between

09:09.490 --> 09:12.200
می‌زنم ذخیره تا استایل‌ها اعمال بشن.

09:12.220 --> 09:12.910
همینه دقیقاً.

09:16.280 --> 09:16.470
خب

09:16.550 --> 09:17.270
کد رو ذخیره می‌کنم.

09:17.270 --> 09:17.920
برمی‌گردم به مرورگر

09:17.930 --> 09:18.740
یه تست سریع

09:19.130 --> 09:20.120
همین شد!

09:21.220 --> 09:23.200
الان باید چیزی شبیه به این ببینی

09:23.200 --> 09:27.370
فقط یادت باشه من همیشه صفحه مرورگرم رو zoom کردم تا شما راحت‌تر ببینید.

09:27.370 --> 09:29.080
اون لیست پست‌ها دقیقاً همینه.

09:29.350 --> 09:31.480
حالا مثلاً یه پست دیگه می‌سازم، می‌نویسم:

09:31.780 --> 09:34.840
پست دوم

09:36.240 --> 09:37.170
ارسال می‌کنم.

09:37.800 --> 09:40.210
ولی پست جدید بلافاصله نشون داده نمیشه.

09:40.230 --> 09:45.060
چون ما هنوز منطقی برای بروزرسانی لحظه‌ای لیست پست‌ها نداریم، باید دستی صفحه رو رفرش کنیم.

09:45.060 --> 09:48.120
بعد از رفرش، پست دوم دیده میشه.

09:48.750 --> 09:51.210
حالا پست سوم می‌زنم.

09:52.890 --> 09:54.300
ارسال می‌کنم، رفرش

09:54.420 --> 09:55.800
پست سوم اومد.

09:56.400 --> 09:59.970
خب به نظر شروع خوبی داریم. یه وقفه کوتاه می‌گیریم.

09:59.970 --> 10:00.510
برمی‌گردیم

10:00.540 --> 10:02.940
قراره بریم سراغ سیستم کامنت‌گذاری.

10:02.940 --> 10:04.350
پس همین الان می‌بینمت.

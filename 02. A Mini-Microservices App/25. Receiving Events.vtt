WEBVTT

00:01.290 --> 00:06.420
بیا بریم و هندلرهای مربوط به دریافت رویدادها رو برای سرویس Post و Comment اضافه کنیم.

00:06.870 --> 00:09.950
اول از همه می‌رم سراغ سرویس Post.

00:09.960 --> 00:15.300
فایل index.js رو باز می‌کنم و می‌رم پایین‌ترین بخش فایل، درست بالای خط app.listen.

00:15.300 --> 00:15.880
اینجا یه هندلر جدید برای درخواست POST می‌سازم.

00:15.900 --> 00:18.780
این هندلر مربوط میشه به مسیر /events.

00:19.110 --> 00:22.470
پارامترهای req و res رو می‌گیریم.

00:28.820 --> 00:33.980
یادت باشه این endpoint قراره هر رویدادی که از سمت Event Bus ارسال می‌شه رو دریافت کنه.

00:34.070 --> 00:38.480
فعلاً توی سرویس Post اهمیتی به نوع رویداد نمی‌دیم، فقط می‌خوایم لاگ کنیم که یه رویدادی دریافت شده.

00:38.480 --> 00:43.100
پس فقط یه console.log می‌زنیم که بگه یه event دریافت کردیم.

00:43.790 --> 00:47.810
و مقدار req.body.type رو لاگ می‌کنیم.

00:50.840 --> 00:52.880
این همون نوع رویدادیه که دریافت کردیم.

00:53.030 --> 00:54.980
یعنی body که فرستاده شده.

00:55.080 --> 00:56.510
و طبق قرارداد، رویدادها باید type داشته باشن.

00:56.510 --> 01:00.770
پس لاگ می‌زنیم: req.body.type

01:00.980 --> 01:03.650
بعدش حتماً باید یه پاسخ بدیم که بگیم درخواست دریافت شده.

01:05.680 --> 01:10.090
یه res.send با یه آبجکت خالی ارسال می‌کنیم که بگیم همه چی درست پیش رفته.

01:10.090 --> 01:10.930
و ما رویداد رو گرفتیم.

01:11.440 --> 01:16.990
حالا همین کار رو باید برای سرویس Comment هم تکرار کنیم.

01:23.980 --> 01:27.390
می‌رم داخل پوشه comments، فایل index.js

01:28.000 --> 01:31.660
پایین فایل، درست بالای app.listen، یه هندلر جدید اضافه می‌کنم.

01:32.140 --> 01:33.610
app.post('/events', ...)

01:34.590 --> 01:35.490
و لاگ می‌زنم:

01:38.250 --> 01:41.790
console.log("event received", req.body.type)

01:42.670 --> 01:44.950
و مثل قبل res.send({})

01:47.540 --> 01:50.570
خوبه، همین برای تست اولیه کافیه.

01:52.570 --> 01:52.900
خب

01:52.930 --> 01:55.000
الان می‌تونیم بریم سراغ تست کامل این سیستم.

01:55.300 --> 01:58.030
قراره کل فرآیند رو از اول تا آخر ببینیم.

01:58.030 --> 01:59.770
از ارسال رویداد تا دریافتش در سرویس‌ها.

02:00.500 --> 02:05.930
اگر ترمینال رو نگاه کنیم، وقتی رویدادی ارسال بشه، باید لاگ‌هایی از طرف post service و comment service ببینیم.

02:05.930 --> 02:10.730
که نشون می‌ده هر بار یه event دریافت شده.

02:12.290 --> 02:13.670
خب بیایید این رو تست کنیم.

02:14.650 --> 02:17.260
می‌رم دوباره به مرورگر و اپلیکیشنم رو پیدا می‌کنم.

02:17.500 --> 02:21.580
یه بار دیگه صفحه رو رفرش می‌کنم چون یادت باشه هر بار که کدمون رو تغییر می‌دیم، همه دیتاها از بین می‌رن.

02:23.830 --> 02:25.290
حالا یه پست جدید می‌سازم.

02:25.300 --> 02:28.300
می‌نویسم "new post" و دکمه ارسال رو می‌زنم.

02:29.370 --> 02:30.550
اگر صفحه رو رفرش کنم...

02:30.570 --> 02:30.930
آره

02:30.930 --> 02:31.620
پست اومد بالا.

02:31.620 --> 02:33.960
اما مهم‌تر از اون، بریم سراغ ترمینال.

02:35.230 --> 02:40.960
تو پنجره ترمینال می‌بینم که سرویس پست یه event با نوع "PostCreated" دریافت کرده.

02:42.280 --> 02:46.960
پنجره‌ای که مربوط به سرویس کامنت هست هم همین event "PostCreated" رو دریافت کرده.

02:48.050 --> 02:50.080
البته Event Bus هنوز داره یه ارور می‌ده.

02:50.090 --> 02:50.750
اشکالی نداره.

02:50.750 --> 02:55.520
چون داره سعی می‌کنه این event رو به سرویس Query بفرسته که هنوز وجود نداره.

02:58.370 --> 03:04.040
بیایید یه کامنت بسازیم و ببینیم event مربوط به "CommentCreated" هم به سرویس‌های پست و کامنت می‌رسه یا نه.

03:07.540 --> 03:11.710
توی مرورگر یه کامنت می‌نویسم: "a comment" و ارسالش می‌کنم.

03:12.130 --> 03:12.940
Submit رو می‌زنم.

03:14.060 --> 03:14.810
صفحه رو رفرش می‌کنم.

03:14.810 --> 03:16.430
کامنت اینجاست.

03:16.430 --> 03:18.680
حالا دوباره می‌رم سراغ ترمینال.

03:18.950 --> 03:19.550
آره، اینم هست.

03:19.550 --> 03:23.270
رویداد "CommentCreated" هم در هر دو سرویس لاگ شده.

03:25.550 --> 03:25.940
خب

03:25.940 --> 03:26.960
اینم از این.

03:26.960 --> 03:29.210
کل چرخه ارتباطات به خوبی کار کرد.

03:29.390 --> 03:33.050
سرویس Post یه event می‌فرسته به Event Bus.

03:33.050 --> 03:37.790
Event Bus اون رو به سرویس‌های اول و دوم می‌فرسته.

03:37.790 --> 03:42.440
و خیلی زود، به سرویس Query هم ارسال خواهد شد (وقتی که ساختیمش).

03:43.680 --> 03:48.320
در تئوری، اگر سرویس Post و Comment نیاز به وابستگی داده‌ای جدی داشتن، می‌تونستیم این eventها رو هندل کنیم و بر اساسشون رفتار کنیم.

03:48.320 --> 03:53.120
اما همون‌طور که چند بار گفتیم، فعلاً این دو سرویس هیچ اهمیتی به رویدادهایی که داره ارسال می‌شه نمی‌دن.

04:00.140 --> 04:03.790
حالا که داریم eventها رو به‌درستی ارسال می‌کنیم، وقتشه که سرویس Query رو راه بندازیم.

04:03.800 --> 04:08.900
می‌خوایم این سرویس رو طوری پیاده کنیم که به رویدادهای PostCreated و CommentCreated گوش بده.

04:09.640 --> 04:15.160
و این داده‌ها رو بگیره و به شکل یک ساختار داده‌ای قابل استفاده ذخیره کنه، دقیقاً همون‌طور که توی نمودارهایی که قبلاً داشتیم توضیح دادیم.

04:19.420 --> 04:20.260
کجا بودن؟

04:20.710 --> 04:22.660
مثل این یکی؟

04:22.660 --> 04:23.350
آره، همین‌جاست.

04:23.350 --> 04:24.160
مثل این تصویر.

04:24.160 --> 04:28.210
یادت باشه، قراره همه‌ی eventها رو جمع‌آوری کنیم و تبدیل کنیم به یک ساختار داده‌ی قابل استفاده.

04:28.920 --> 04:29.180
خب

04:29.220 --> 04:30.780
پس تا چند لحظه دیگه می‌ریم سراغش.

04:30.780 --> 04:32.340
پس همینجا موقتا توقف می‌کنیم.

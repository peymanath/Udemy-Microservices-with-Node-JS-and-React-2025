WEBVTT

00:01.240 --> 00:04.840
حالا که بهتر متوجه شدیم این قابلیت جدید قراره چی باشه، بیایم چند روش مختلف برای پیاده‌سازی‌ش بررسی کنیم.

00:04.840 --> 00:06.570
پس بزن بریم.

00:06.580 --> 00:07.780
اول از همه یه مرور سریع بکنیم از کاری که سیستم الان انجام می‌ده.

00:08.020 --> 00:11.890
در حال حاضر ما سرویس‌های post، comment و query رو داریم. هر وقت یه کاربر یه کامنت ارسال کنه...

00:11.920 --> 00:17.270
سرویس کامنت یه event با عنوان "comment created" می‌فرسته به event bus.

00:17.290 --> 00:22.810
event bus این event رو می‌گیره و به صورت خودکار می‌فرسته برای همه‌ی سرویس‌های اپلیکیشن، از جمله خود کامنت سرویس.

00:23.440 --> 00:28.930
در حال حاضر، سرویس‌های post و comment هرچند این event رو دریافت می‌کنن، ولی هیچ کاری باهاش نمی‌کنن.

00:28.930 --> 00:32.770
فقط می‌گن: «باشه یه event اومد، اهمیتی نداره برام.»

00:34.880 --> 00:40.220
اما سرویس query فرق داره. این سرویس event رو پردازش می‌کنه، می‌فهمه یه کامنت جدید ساخته شده و اون رو توی یه ساختار داده‌ی محلی ذخیره می‌کنه.

00:40.220 --> 00:41.640
این خلاصه‌ای از اتفاقیه که الان توی سیستم ما می‌افته.

00:41.660 --> 00:43.370
می‌دونم که تازه همین رو پیاده کردیم.

00:43.370 --> 00:44.360
ولی لازمه تکرارش کنم.

00:44.690 --> 00:47.360
چون می‌خوام بری سراغ یه قابلیت پیچیده‌تر و باید این روند رو کاملاً درک کرده باشی.

00:47.810 --> 00:52.730
تو گزینه‌هایی که می‌خوام بررسی کنیم برای پیاده‌سازی این قابلیت، قراره کمی پیچیده‌تر باشن.

00:52.730 --> 00:55.700
خب با این توضیحات، بریم سراغ گزینه اول.

00:55.940 --> 00:58.520
در گزینه اول، یه نگاه به این دیاگرام بنداز.

00:58.670 --> 00:59.900
می‌بینی که یه سرویس جدید اضافه کردم: moderation service.

00:59.900 --> 01:04.220
این سرویس مسئول اینه که کامنت‌ها رو بررسی کنه و تصمیم بگیره که تأیید بشن یا رد.

01:04.220 --> 01:08.420
همچنین می‌بینی که توی این دیاگرام سرویس post رو کامل حذف کردم.

01:08.420 --> 01:10.370
نه به این معنی که قراره حذفش کنیم...

01:10.490 --> 01:12.980
فقط برای اینکه دیاگرام ساده‌تر و شفاف‌تر بشه.

01:12.980 --> 01:15.260
چون این ماژول جدید ارتباطی با سرویس post نداره.

01:16.680 --> 01:17.750
خب بریم ادامه ماجرا...

01:48.440 --> 01:54.140
توی گزینه اول، یه ساختار زنجیره‌ای داریم. یعنی چی؟ یعنی سرویس کامنت یه event با عنوان "comment created" می‌فرسته.

01:54.140 --> 01:57.530
بعد سرویس moderation یه event جدید با عنوان "comment moderated" می‌فرسته.

01:57.740 --> 02:02.060
و در نهایت سرویس query اون کامنت رو ذخیره می‌کنه.

02:02.060 --> 02:04.130
بیایم دقیق‌تر ببینیم چه اتفاقی می‌افته.

02:04.130 --> 02:06.230
اول از همه، کاربر یه کامنت ارسال می‌کنه برای comment service.

02:06.830 --> 02:11.060
سرویس کامنت طبق روال فعلی اطلاعات این کامنت رو ذخیره می‌کنه.

02:11.540 --> 02:16.190
مثلاً یه آی‌دی، محتوا، و آی‌دی پست. ولی فعلاً اون postId مهم نیست.

02:16.910 --> 02:22.310
بعد از ذخیره‌سازی، سرویس کامنت یک event می‌فرسته به event bus با عنوان "comment created".

02:22.310 --> 02:25.220
event bus هم این event رو مثل همیشه به همه‌ی سرویس‌ها broadcast می‌کنه.

02:26.510 --> 02:27.590
تا اینجای کار همونه.

02:27.590 --> 02:34.550
اما توی این گزینه ما فرض می‌کنیم فقط **moderation service** به event "comment created" اهمیت می‌ده.

02:34.550 --> 02:35.630
بقیه سرویس‌ها بی‌تفاوتن.

02:35.960 --> 02:38.030
query service دیگه به اون کاری نداره.

02:38.300 --> 02:44.720
moderation service میاد محتوای کامنت رو بررسی می‌کنه و تصمیم می‌گیره که تأیید یا رد بشه.

02:48.790 --> 02:54.250
مثلاً اگه توی محتوا کلمه‌ی "orange" نباشه، تصمیم می‌گیره که کامنت تأیید بشه.

02:54.250 --> 02:56.320
پس میاد یه event جدید ارسال می‌کنه:

03:01.330 --> 03:05.560
event جدید اسمش هست: **Comment Moderated**

03:06.370 --> 03:11.590
توی دیتا این event، همه اطلاعات کامنت به همراه status میاد. مثلاً: status: "approved"

03:13.690 --> 03:17.630
این event توسط moderation service منتشر می‌شه و می‌ره سمت event bus

03:17.650 --> 03:20.770
event bus هم طبق معمول می‌فرسته به همه سرویس‌ها.

03:21.250 --> 03:26.110
اما این بار فقط query service هست که به "comment moderated" واکنش نشون می‌ده.

04:00.850 --> 04:03.820
query service این event رو می‌شنوه و اطلاعات کامنت رو آپدیت می‌کنه.

04:04.120 --> 04:07.750
سرویس query این event رو می‌گیره، اطلاعاتش رو از داخلش درمیاره و ذخیره می‌کنه.

04:08.050 --> 04:12.820
حالا query service می‌دونه ID کامنت، متنش و وضعیتش چیه.

04:13.610 --> 04:14.360
مثلاً تایید شده.

04:14.690 --> 04:15.380
به این شکل.

04:17.200 --> 04:20.810
پس از این به بعد، هر کسی از query service دیتا بگیره، می‌بینه کامنت چه وضعیتی داره.

04:20.830 --> 04:24.190
مثلاً: این کامنت هست و وضعیتش "approved".

04:24.820 --> 04:30.820
بیایم راجع به مزایا و معایب این رویکرد حرف بزنیم. چون یه سری معایب جدی داره.

04:30.820 --> 04:31.420
عیب اصلی چیه؟

04:32.410 --> 04:38.110
تاخیری که بین ارسال کامنت توسط کاربر و ذخیره‌شدن اون کامنت توی query service اتفاق می‌افته.

04:42.330 --> 04:45.300
یادت باشه ما توی mockup سه وضعیت برای کامنت داشتیم:

04:45.330 --> 04:47.620
"approved"، "rejected" و "pending moderation".

04:47.640 --> 04:53.940
اون حالت "pending" خیلی مهمه. الآن ما فرض می‌کنیم تأیید خودکار و فوری انجام می‌شه.

04:54.060 --> 04:57.120
اما اگه بعداً تصمیم بگیریم بررسی کامنت‌ها دستی باشه چی؟

05:04.230 --> 05:10.590
اون موقع تأیید کامنت ممکنه چند ثانیه، دقیقه یا حتی چند روز طول بکشه.

05:10.590 --> 05:17.580
مثلاً یه اپراتور انسانی باید نظر رو بخونه و تأیید یا رد کنه. پس فرایند خیلی سریع نخواهد بود.

05:28.440 --> 05:30.480
خب این چه مشکلی ایجاد می‌کنه؟

05:30.780 --> 05:36.060
بیایم سناریو رو دوباره بررسی کنیم ولی این بار فرض کنیم moderation زمان‌بره.

05:36.790 --> 05:40.630
کاربر یه کامنت می‌نویسه → سرویس کامنت ذخیره می‌کنه → event می‌فرسته.

05:40.630 --> 05:43.420
event می‌ره برای moderation و منتظر بررسی می‌مونه.

06:00.790 --> 06:04.030
اینجا دیگه بقیه فرایند متوقفه تا بررسی انجام بشه.

06:04.030 --> 06:06.280
شاید مشکلی به‌نظر نرسه، اما…

06:06.700 --> 06:11.950
از دید کاربر چی؟ کاربر انتظار داره بعد از زدن "submit"، بلافاصله کامنتش رو ببینه.

06:16.690 --> 06:22.090
اگه کاربر صفحه رو رفرش کنه و کامنتش رو نبینه، فکر می‌کنه کامنت ارسال نشده.

06:22.090 --> 06:24.610
حداقل باید یه پیغام ببینه که بگه: "کامنت شما در حال بررسیه".

06:38.420 --> 06:44.300
پس با این روشی که الان داریم بررسی می‌کنیم، وقتی کاربر صفحه رو رفرش کنه...

06:44.300 --> 06:48.620
قرار نیست فوراً اون کامنتی که ارسال کرده رو ببینه، چون ممکنه تایید اون کامنت توسط سرویس moderation زمان‌بر باشه.

06:48.620 --> 06:54.590
و تا وقتی که moderation انجام نشه و event مربوطه به query service نرسه، اون کامنت نشون داده نمی‌شه.

06:54.590 --> 06:56.840
پس کاربر تصور می‌کنه کامنت ارسال نشده.

06:57.270 --> 07:02.720
این قضیه که کاربر تغییراتی ایجاد کنه ولی بلافاصله نتونه نتیجه‌شو ببینه، توی معماری microservice خیلی رایجه.

07:02.720 --> 07:06.860
و ما توی دوره قراره بارها درباره‌ش صحبت کنیم.

07:07.340 --> 07:12.050
ولی توی این سناریو، چون سرویس moderation ممکنه توسط یک انسان انجام بشه، این مشکل بدتر هم می‌شه.

07:12.050 --> 07:16.810
پس گزینه اول یک ضعف جدی و قابل توجه داره.

07:16.820 --> 07:20.060
و همونطور که حدس زدی، ما از گزینه اول استفاده نمی‌کنیم.

07:20.180 --> 07:25.310
حالا یکم مکث می‌کنیم و بعد می‌ریم سراغ بررسی سریع‌تر گزینه‌های دوم و سوم، چون دیگه با چالش‌های کلی آشنا شدیم.
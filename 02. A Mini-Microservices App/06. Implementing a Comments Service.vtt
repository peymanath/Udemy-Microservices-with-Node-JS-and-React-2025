WEBVTT

00:01.000 --> 00:02.500
ما سرویس پست‌مون رو کامل کردیم.

00:02.500 --> 00:07.420
حالا قراره مثل قبل، یه پیاده‌سازی اولیه از سرویس کامنت‌هامون رو هم آماده کنیم.

00:07.420 --> 00:08.230
دقیقاً مثل قبل.

00:08.260 --> 00:13.150
ارزش داره که دقیقاً مشخص کنیم این سرویس کامنت قراره چه کارهایی انجام بده.

00:14.170 --> 00:17.830
من یه طرح اولیه از اینکه این سرویس چطور می‌تونه کار کنه، آماده کردم.

00:18.520 --> 00:21.220
به نظرم مثل قبل، دو تا مسیر (route) خواهیم داشت.

00:21.460 --> 00:23.080
اولین هندلر ما

00:23.110 --> 00:27.910
قراره بتونه یک کامنت جدید بسازه که به یک پست خاص وصل باشه.

00:28.210 --> 00:33.070
یعنی آدرس مسیر به صورت `/posts/:id/comments` هست که `:id` همون شناسه پسته.

00:33.070 --> 00:36.790
کامنتی که می‌سازیم، مربوط به همین پست خاص خواهد بود.

00:37.990 --> 00:42.550
درخواست POST باید در body خودش یه فیلد `content` از نوع string داشته باشه.

00:42.700 --> 00:46.000
که متن خود کامنت رو شامل میشه.

00:47.170 --> 00:51.160
مسیر دوم هم قراره همه کامنت‌های مرتبط با یک پست خاص رو برگردونه.

00:51.160 --> 00:54.340
یعنی با GET روی همون آدرس `/posts/:id/comments`.

00:55.160 --> 00:59.390
این مسیر لیست همه کامنت‌های مربوط به یه پست خاص رو برمی‌گردونه.

00:59.390 --> 00:59.870
خیلی ساده‌ست.

01:00.470 --> 01:04.440
ولی نسبت به سرویس قبلی یکم پیچیدگی بیشتری داره، الان دلیلش رو می‌گم.

01:04.460 --> 01:05.780
فعلاً بریم سراغ کد زدن.

01:06.050 --> 01:09.350
ادیتور رو باز می‌کنم و شروع می‌کنیم به پیاده‌سازی سرویس کامنت.

01:10.010 --> 01:11.540
برمی‌گردم به ترمینال.

01:11.840 --> 01:15.320
ادیتور رو داخل پوشه `comments` باز می‌کنم.

01:17.700 --> 01:18.840
و بلافاصله

01:18.840 --> 01:20.790
یه فایل به اسم `index.js` می‌سازم.

01:22.530 --> 01:26.430
و مثل سرویس پست، یه سری کد پایه‌ای (boilerplate) بالای فایل می‌نویسیم.

01:26.430 --> 01:29.280
تقریباً شبیه به همون چیزی که لحظاتی پیش نوشتیم.

01:29.850 --> 01:31.440
express رو ایمپورت می‌کنم.

01:34.940 --> 01:36.380
بعد body-parser رو میارم.

01:39.730 --> 01:44.410
و تابع `randomBytes` رو از پکیج `crypto` می‌گیرم تا ID رندوم بسازیم.

01:47.540 --> 01:49.730
حالا اپلیکیشن express رو ایجاد می‌کنم.

01:52.200 --> 01:54.870
و `bodyParser.json()` رو بهش اضافه می‌کنم.

01:57.210 --> 01:59.580
حالا دو تا route تعریف می‌کنم.

01:59.670 --> 02:06.900
یکی برای `GET /posts/:id/comments` که کامنت‌های یک پست خاص رو می‌ده.

02:09.420 --> 02:14.220
یادت نره قبل از `id` باید علامت `:` باشه.

02:17.970 --> 02:20.830
و یکی هم برای `POST /posts/:id/comments`

02:20.850 --> 02:26.190
که یه کامنت جدید برای اون پست خاص می‌سازه.

02:27.840 --> 02:28.500
عالیه.

02:28.770 --> 02:32.880
در نهایت هم باید اپ رو روی یه پورت مشخص گوش بدیم.

02:32.910 --> 02:39.780
چون سرویس پست قبلاً روی پورت 4000 اجرا میشه، این سرویس رو می‌ذاریم روی پورت 4001.

02:42.840 --> 02:46.230
پس می‌نویسیم: `app.listen(4001, () => console.log('Listening on 4001'))`

02:48.220 --> 02:52.150
و بعد با `console.log` پیام اجرا شدن رو چاپ می‌کنیم.

02:52.970 --> 02:55.550
که بنویسه: Listening on 4001

02:56.690 --> 02:57.020
خب

02:57.020 --> 02:58.220
شروع خوبی داشتیم.

02:58.780 --> 03:03.820
حالا وقتشه که بریم سراغ پیاده‌سازی واقعی: گرفتن کامنت‌ها برای یک پست خاص

03:03.820 --> 03:10.240
و همچنین ایجاد کامنت جدید برای اون پست. اول از ایجاد کامنت جدید شروع می‌کنیم.

03:10.870 --> 03:13.900
مثل سرویس پست، کامنت‌ها رو هم داخل حافظه نگه می‌داریم.

03:14.380 --> 03:18.550
پس یه ساختار داده داخل حافظه (in-memory) براش تعریف می‌کنیم.

03:18.550 --> 03:19.990
اینجا یه آبجکت می‌سازیم

03:20.260 --> 03:25.480
به اسم `commentsByPostId` که نقش دیکشنری رو داره برای ذخیره‌سازی کامنت‌ها بر اساس شناسه پست.

03:26.560 --> 03:31.930
دلیل اینکه اسمش رو گذاشتیم `commentsByPostId` اینه که بتونیم خیلی راحت کامنت‌های مربوط به یه پست خاص رو پیدا کنیم.

03:31.960 --> 03:37.060
پس ساختار داده‌مون کمی پیچیده‌تر از اونیه که تو سرویس پست داشتیم.

03:37.060 --> 03:39.760
حالا بذارید با یه دیاگرام بهتر توضیحش بدم.

03:39.790 --> 03:43.750
پس ساختار داده‌ای که اینجا داریم کمی پیچیده‌تر از اونیه که در سرویس پست داشتیم.

03:44.800 --> 03:48.520
بذارید با یک دیاگرام بهتون نشون بدم که دقیقاً این آبجکت قراره چه شکلی باشه.

03:50.020 --> 03:50.410
خب

03:50.410 --> 03:51.180
ایده‌اش اینه:

03:51.190 --> 03:52.330
ما یه آبجکت داریم

03:52.480 --> 03:56.410
که کلیدهاش شناسه پست‌ها هستن (مثل `abc123` یا `post456`)

03:56.710 --> 03:59.740
طبیعتاً این آبجکت یک‌سری کلید خواهد داشت، چون خودش یک آبجکت است.

03:59.950 --> 04:05.110
و این کلیدها، آی‌دی پست‌هایی هستند که داخل اپلیکیشن ما ساخته شده‌اند.

04:06.290 --> 04:10.460
و برای هرکدوم از این آی‌دی‌ها، ما یک آرایه از کامنت‌ها خواهیم داشت.

04:05.110 --> 04:10.460
یعنی برای هر پست، لیستی از کامنت‌ها داریم که به راحتی می‌تونیم بهشون دسترسی داشته باشیم.

04:11.500 --> 04:14.740
هر کامنت هم یه آبجکت شامل اطلاعاتیه مثل id و content.

04:15.460 --> 04:20.590
این ساختار، lookup کامنت‌ها برای یک پست خاص رو خیلی سریع و ساده می‌کنه.

04:20.590 --> 04:22.860
کافیه با ID پست، وارد اون key بشیم

04:22.870 --> 04:28.660
و آرایه کامنت‌های مربوط بهش رو بگیریم. خیلی مستقیم و کارآمد.

04:33.880 --> 04:35.470
خب، حالا که ساختار رو متوجه شدیم،

04:36.760 --> 04:40.160
بریم سراغ استفاده ازش داخل handler مربوط به `POST /posts/:id/comments`

04:40.180 --> 04:43.150
اولین کاری که می‌کنیم اینه که یه ID رندوم برای کامنت جدید تولید کنیم.

04:43.700 --> 04:47.460
که بعداً بتونیم اون کامنت خاص رو در صورت نیاز شناسایی کنیم.

04:47.470 --> 04:51.250
پس یه ID تصادفی برای این کامنت تولید می‌کنیم که اگر در آینده خواستیم بهش دسترسی داشته باشیم، بتونیم.

04:52.630 --> 04:59.590
اینجا می‌گیم که متغیر commentId قراره از تابع randomBytes استفاده کنه تا یک شناسه‌ی تصادفی بسازه.

04:59.590 --> 05:03.460
بعدش هم با استفاده از toString اون رو تبدیل می‌کنیم به یک رشته‌ی هگزادسیمال.

05:04.060 --> 05:05.980
در نتیجه، این فقط یک آی‌دی تصادفی ساده است.

05:05.980 --> 05:08.170
هیچ پیچیدگی خاصی نداره، فقط برای تشخیص منحصربه‌فرد بودن کامنته.

05:09.050 --> 05:15.490
بعدش `content` رو از `req.body` استخراج می‌کنیم که متن اصلی کامنت رو شامل میشه.

05:29.840 --> 05:35.330
حالا باید بررسی کنیم که توی `commentsByPostId` برای این پست خاص آرایه‌ای وجود داره یا نه.

05:35.630 --> 05:41.150
می‌خوایم بررسی کنیم که آیا برای این پست خاص، از قبل آرایه‌ای از کامنت‌ها وجود داره یا نه.

05:42.500 --> 05:49.370
پس می‌نویسیم comments مساوی با commentsByPostId و با استفاده از آیدی پست از داخل URL مقدارشو می‌گیریم.

05:49.370 --> 05:50.780
این آیدی از پارامترهای روت میاد.

05:51.050 --> 05:53.690
با `req.params.id` به اون دسترسی داریم.

05:55.910 --> 05:58.930
اگر تا حالا هیچ کامنتی برای این پست ثبت نشده باشه، مقدار برگشتی `undefined` میشه.

05:58.940 --> 06:02.960
پس برای جلوگیری از خطا، اگه `undefined` بود، به‌جاش یه آرایه‌ی خالی قرار می‌دیم.

06:05.870 --> 06:11.330
با این کار مطمئن می‌شیم که همیشه یه آرایه داریم و می‌تونیم کامنت جدید رو توش اضافه کنیم.

06:14.830 --> 06:18.850
حالا کامنت جدیدی که ساختیم رو به این آرایه اضافه می‌کنیم.

06:18.880 --> 06:20.020
می‌نویسیم `comments.push`.

06:21.250 --> 06:22.120
و توی اون یه شیء با `id` کامنت و `content` کاربر قرار می‌دیم.

06:26.550 --> 06:28.740
یعنی محتوای کامنتی که از درخواست فرستاده شده.

06:30.280 --> 06:34.990
در نهایت این آرایه‌ی کامنت رو دوباره در شیء اصلی‌مون برای همون آیدی پست ذخیره می‌کنیم.

06:35.860 --> 06:37.630
یعنی commentsByPostId[postId] = comments.

06:38.690 --> 06:43.640
به این صورت ساختارمون به‌روز میشه و اطلاعات کامنت‌ها ذخیره می‌شن.

06:44.650 --> 06:45.550
و همین، کارمون با این بخش تمومه.

ز
در نهایت هم با status 201 آرایه کامل کامنت‌های اون پست رو به کلاینت برمی‌گردونیم.

07:06.110 --> 07:09.860
حالا می‌ریم سراغ handler برای درخواست GET که خیلی ساده‌تره.

07:10.160 --> 07:12.820
بالای همون فایل می‌نویسیم `res.send(...)` تا لیست کامنت‌ها رو برگردونیم.


007:17.790 --> 07:21.570
اینجا داخل آبجکت `commentsByPostId` می‌گردیم دنبال آی‌دی خاصی که داخل URL دریافت کردیم.

07:21.810 --> 07:25.620
از `req.params.id` برای گرفتن آی‌دی پست استفاده می‌کنیم.

07:29.120 --> 07:33.770
اگر مقدارش `undefined` بود (یعنی هیچ کامنتی برای اون پست وجود نداشت)، با `|| []` مطمئن می‌شیم که یه آرایه‌ی خالی برگرده.

07:33.770 --> 07:39.320
با این کار همیشه یک آرایه به عنوان پاسخ برمی‌گرده، چه اون پست کامنت داشته باشه، چه نداشته باشه.

07:43.110 --> 07:44.790
فایل رو ذخیره می‌کنیم.

07:47.550 --> 07:51.900
حالا داخل فایل `package.json` می‌ریم و یه اسکریپت جدید به نام `start` تعریف می‌کنیم.

08:01.820 --> 08:05.900
می‌نویسیم: `"start": "nodemon index.js"` تا با nodemon اجرا بشه.

08:08.070 --> 08:11.760
الان همه چیز برای اجرای سرویس کامنت آماده‌ست. در ویدیو بعدی با Postman تست دستی می‌کنیم.

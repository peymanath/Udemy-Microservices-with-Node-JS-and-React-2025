WEBVTT

00:00.850 --> 00:05.620
تا اینجا یه سری تنظیمات اولیه انجام دادیم، حالا وقتشه که واقعاً شروع کنیم به نوشتن سرویس‌ها برای این پیاده‌سازی اولیه.

00:05.620 --> 00:06.820
فعلاً کاری به مفاهیم میکروسرویس نداریم.

00:06.820 --> 00:10.810
فقط قراره یه سری قابلیت ساده برای سرویس پست و کامنت پیاده‌سازی کنیم.

00:10.810 --> 00:15.220
یعنی کدی خیلی ساده با Express برای کار با منابع ابتدایی.

00:15.220 --> 00:22.540
در واقع قراره فقط یک اپ ساده Express بسازیم که بتونه با پست‌ها و کامنت‌ها تعامل کنه.

00:22.810 --> 00:24.880
اول از همه با سرویس پست شروع می‌کنیم.

00:25.420 --> 00:30.100
وقتی داری یک سرویس طراحی می‌کنی، واقعاً ارزش داره که دقیق و با دید فنی فکر کنی که دقیقاً اون سرویس چه کاری قراره انجام بده.

00:30.100 --> 00:33.640
ما می‌دونیم که می‌خوایم پست ایجاد کنیم و همه پست‌ها رو لیست کنیم، ولی بریم یکم دقیق‌تر بررسی کنیم.

00:33.670 --> 00:38.080
ببینیم دقیقاً چه مسیرهایی (routes) و رفتارهایی لازم داریم.

00:38.080 --> 00:43.060
برای سرویس پست، فکر می‌کنم باید یک مسیر برای گرفتن همه‌ی پست‌های موجود داشته باشیم.

00:43.570 --> 00:49.540
و یک مسیر دیگه برای ساختن یک پست جدید. یعنی یکی GET و یکی POST روی /posts.

00:49.540 --> 00:54.220
اگه درخواست GET بزنیم، لیست همه پست‌ها رو بده. اگه POST بزنیم و بدنه درخواست یک عنوان (title) داشته باشه، یه پست جدید بسازه.

00:54.550 --> 00:59.500
این دو تا مسیر راهنمای ما هستن برای پیاده‌سازی این سرویس.

00:59.830 --> 01:02.290
پس بریم داخل پروژه پست و کدنویسی رو شروع کنیم.

01:02.290 --> 01:06.550
الان قراره یک اپ خیلی کوچیک با Express بنویسیم که فقط همین دو مسیر رو داشته باشه.

01:06.550 --> 01:12.160
می‌خوام ترمینال مربوط به پست رو باز کنم و توش ویرایشگر کد رو هم اجرا کنم.

01:13.000 --> 01:17.320
فایلی که قراره بسازیم `index.js` هست، و کل کد سرویس رو داخل همین فایل می‌نویسیم.

01:17.830 --> 01:21.190
بالای فایل اول از همه Express رو ایمپورت می‌کنیم و اپلیکیشن رو ایجاد می‌کنیم.

01:21.190 --> 01:25.420
سپس دو مسیر رو تعریف می‌کنیم: یکی برای GET و یکی برای POST روی `/posts`.

01:25.420 --> 01:26.530
همه‌اش ساده و سرراست.

01:27.370 --> 01:30.280
تو ترمینال، همونطور که می‌بینی لایه‌بندی ترمینال‌ها رو بهتر کردم

01:30.280 --> 01:33.730
که راحت‌تر بفهمی تو کدوم ترمینال داریم کار می‌کنیم.

01:34.660 --> 01:39.310
ترمینال مربوط به post رو باز می‌کنم و ویرایشگر کد رو اجرا می‌کنم.

01:42.360 --> 01:48.360
حالا داخل اون پوشه، اولین فایل یعنی `index.js` رو می‌سازم.

01:49.110 --> 01:54.090
تمام کد این اپلیکیشن express رو داخل همین فایل ساده می‌نویسیم.

01:55.120 --> 01:55.930
اول از همه

01:55.930 --> 01:59.980
express رو ایمپورت می‌کنیم و یه اپ جدید می‌سازیم.

01:59.980 --> 02:03.300
و مسیرهای GET و POST که قبلاً گفتیم رو بهش اضافه می‌کنیم.

02:03.310 --> 02:06.580
همه‌چی خیلی ساده و ابتداییه.

02:07.050 --> 02:07.140
خب،

02:07.300 --> 02:08.020
بریم سراغ کدنویسی.

02:08.020 --> 02:09.190
چند خط تایپ ساده.

02:09.670 --> 02:13.120
اول از همه `require('express')` و بعد ساختن `app`.

02:14.260 --> 02:15.670
و بعد مسیر `/posts` با متد GET.

02:18.320 --> 02:22.260
و همینطور مسیر `/posts` با متد POST و پارامترهای `req` و `res`.

02:22.280 --> 02:25.670
بعدش هم در انتهای فایل، مشخص می‌کنیم که اپ روی چه پورتی گوش بده.

02:26.470 --> 02:28.210
می‌ذاریم روی پورت ۴۰۰۰.

02:29.020 --> 02:35.830
و داخل تابع `listen`، یه `console.log` می‌زنیم که بنویسه:

02:37.590 --> 02:42.540
حالا در انتهای فایل، مشخص می‌کنم که اپلیکیشن Express ما روی یک پورت مشخص گوش بده.

02:42.540 --> 02:43.620
مثلاً می‌گم:

02:43.710 --> 02:45.360
`app.listen(...)`

02:45.720 --> 02:50.310
قراره این سرویس اول ما روی پورت 4000 اجرا بشه.

02:52.310 --> 02:55.460
و داخل تابع callback اون، یه `console.log` می‌نویسم

02:56.060 --> 02:56.930
که بنویسه:

02:58.300 --> 03:00.040
Listening on 4000.

03:00.370 --> 03:00.670
خب،

03:00.670 --> 03:01.530
تا اینجا خوب پیش رفتیم.

03:02.600 --> 03:02.890
حالا

03:02.900 --> 03:05.510
بیایم شروع کنیم به پیاده‌سازی خود هندلرهای مسیر‌ها.

03:06.180 --> 03:11.130
تو ویدیو قبلی گفتم که تو این پروژه کاری با دیتابیس نداریم.

03:11.130 --> 03:13.320
همه‌ی داده‌ها رو قراره داخل حافظه (in-memory) نگه داریم.

03:13.320 --> 03:16.230
یعنی همه منابع رو فقط تو حافظه ذخیره می‌کنیم.

03:16.470 --> 03:20.520
عیب این روش اینه که هر بار سرویس ریستارت بشه، تمام داده‌ها از بین می‌رن.

03:20.520 --> 03:21.060
اما اشکالی نداره.

03:21.060 --> 03:24.840
چون این پروژه فقط یه تمرین کوچیک و آزمایشی برای درک مفاهیمه.

03:26.070 --> 03:30.690
بعد از ساخت اپلیکیشن express، یک آبجکت درست می‌کنم که پست‌های ساخته‌شده رو توش نگه داریم.

03:30.690 --> 03:33.360
مثلاً یه آبجکت خالی به اسم `posts`.

03:33.780 --> 03:37.350
قراره همه‌ی پست‌ها داخل این آبجکت ذخیره بشن.

03:38.330 --> 03:41.360
حالا که یه جایی برای ذخیره‌سازی پست‌ها داریم، می‌تونیم اولین مسیر (route) رو پیاده کنیم

03:42.050 --> 03:45.770
که وظیفه‌اش اینه همه‌ی پست‌های ساخته‌شده رو برگردونه.

03:45.770 --> 03:49.940
یعنی وقتی درخواست GET به `/posts` بیاد، کل پست‌ها رو برگردونه.

03:49.940 --> 03:54.050
حالا بریم سراغ ایجاد قابلیت ساخت پست جدید با درخواست POST.

03:54.620 --> 03:56.810
باید هندلر مربوط به POST رو هم پیاده کنیم.

03:56.930 --> 04:00.770
یادمون باشه که قراره هر پست یه شناسه (ID) داشته باشه.

04:00.770 --> 04:01.580
فعلاً نداریم.

04:02.800 --> 04:06.220
پس کدی اضافه می‌کنیم که موقع دریافت درخواست، یه ID رندوم بسازه.

04:06.220 --> 04:10.890
و اون ID رو به پستی که کاربر فرستاده اضافه کنیم و ذخیره‌اش کنیم.

04:11.380 --> 04:16.960
برای ساخت ID، باید از `crypto` استفاده کنیم. یه `require` برای `randomBytes` از پکیج crypto اضافه می‌کنم.

04:17.230 --> 04:22.750
حالا داخل هندلر POST، یه ID رندوم تولید می‌کنیم با `randomBytes(4).toString('hex')`.

04:22.750 --> 04:28.360
این ID یه رشته رندوم مثل `f3ab9c2e` تولید می‌کنه.

04:28.360 --> 04:33.460
بعد می‌ریم سراغ داده‌ای که کاربر فرستاده (بدنه‌ی درخواست) و عنوان پست رو از `req.body.title` می‌گیریم.

04:33.460 --> 04:36.550
حالا ID و title رو تو آبجکت پست‌هامون ذخیره می‌کنیم.

04:36.910 --> 04:38.290
حالا همه چیز آماده‌ست.

04:38.380 --> 04:42.220
بعد از اینکه پست ذخیره شد، یه پاسخ به کاربر می‌دیم که بگه پستش با موفقیت ساخته شده.

04:42.550 --> 04:44.770
کد وضعیت (status code) رو می‌ذاریم 201 (یعنی created)

04:44.980 --> 04:46.600
و پست ساخته‌شده رو برمی‌گردونیم.

04:47.570 --> 04:52.370
فقط یه نکته آخر مونده. باید middlewareی اضافه کنیم برای پردازش JSON در بدنه درخواست‌ها.

04:52.670 --> 04:57.170
یعنی باید body-parser رو ایمپورت کنیم و بعد از ساخت app، بنویسیم:

04:57.170 --> 04:58.640
`app.use(bodyParser.json())`

04:59.120 --> 05:04.580
حالا داخل هندلر درخواست POST، یه متغیر به اسم `id` تعریف می‌کنیم و با استفاده از تابع `randomBytes` یه شناسه رندوم تولید می‌کنیم.

05:04.580 --> 05:09.140
می‌گیم `randomBytes(4)`، یعنی ۴ بایت داده تصادفی.

05:09.590 --> 05:11.720
بعد با `toString('hex')` اون رو به رشته تبدیل می‌کنیم.

05:11.990 --> 05:13.940
این فقط یه رشته‌ی تصادفیه برای ID.

05:13.940 --> 05:16.010
همین و بس.

05:16.010 --> 05:17.210
چیز خاصی نیست.

05:17.570 --> 05:22.370
خروجی این کار یه رشته‌ی هگزادسیمال (مثل `f4a9bc21`) میشه که به عنوان ID استفاده می‌کنیم.

05:22.400 --> 05:23.930
شامل حروف و اعداد تصادفیه.

05:23.930 --> 05:28.610
البته فقط حروف مجاز در مبنای ۱۶ هستن، پس حروف غیرمجاز مثل K یا H توش نیست.

05:28.610 --> 05:29.540
اما کلیت کار همینه.

05:29.540 --> 05:31.670
این میشه ID هر پست.

05:33.450 --> 05:37.860
حالا بریم سراغ داده‌ای که از سمت کاربر دریافت کردیم.

05:37.860 --> 05:38.460
یعنی درخواست POST.

05:38.550 --> 05:43.170
فرض ما اینه که بدنه درخواست حاوی یک فیلد `title` هست.

05:43.170 --> 05:47.580
پس باید اون `title` رو از `req.body` استخراج کنیم.

05:47.670 --> 05:49.650
و بعد با ID ترکیبش کنیم.

05:49.680 --> 05:55.560
اون شناسه‌ای که به صورت رندوم تولید کردیم رو همراه با عنوان (title) می‌گیریم

05:55.560 --> 05:58.110
و با هم داخل آبجکت پست‌هایی که بالا ساختیم ذخیره می‌کنیم.

05:59.570 --> 06:05.090
پس می‌نویسیم: `const { title } = req.body` و بعد مقدارش رو با ID ذخیره می‌کنیم داخل `posts[id]`.

06:06.090 --> 06:14.400
می‌گیم: `posts[id] = { id, title }`.

06:15.940 --> 06:18.250
الان پست جدید داخل حافظه ذخیره شده.

06:20.620 --> 06:24.700
در نهایت هم باید به کاربر یک پاسخ بدیم تا بفهمه پستش ساخته شده.

06:24.880 --> 06:29.800
می‌نویسیم: `res.status(201).send(posts[id])`

06:29.800 --> 06:30.320
تا پیام موفقیت بره.

06:30.340 --> 06:31.420
یعنی پست با موفقیت ساخته شد.

06:31.810 --> 06:33.170
کد وضعیت 201 یعنی resource ساخته شده.

06:33.190 --> 06:35.590
اینجا به صورت دستی وضعیت پاسخ رو روی ۲۰۱ قرار می‌دم.

06:35.590 --> 06:37.840
که یعنی یک منبع (resource) جدید با موفقیت ساخته شده.

06:38.290 --> 06:43.840
پس تا اینجا همه چیز خوبه، فقط یه نکته مونده.

06:46.220 --> 06:46.490
و اون اینکه:

06:46.490 --> 06:47.670
ما باید body-parser رو اضافه کنیم.

06:47.690 --> 06:49.430
تا JSON دریافتی در body رو درست بخونه.

06:49.610 --> 06:55.370
اگه این middleware رو اضافه نکنیم، `req.body` خالی خواهد بود و کد درست کار نمی‌کنه.

06:55.370 --> 06:57.500
پس این یه کار اجباریه با Express.

06:57.500 --> 07:00.520
در بالای فایل، body-parser رو ایمپورت می‌کنیم:

07:00.530 --> 07:06.020
`const bodyParser = require('body-parser')`

07:06.560 --> 07:09.650
و بعد از ساخت `app` می‌نویسیم:

07:13.330 --> 07:19.720
`app.use(bodyParser.json())`

07:20.950 --> 07:21.320
همین.

05:04.580 --> 05:06.020
خب تا اینجا کار عالی پیش رفت.

07:21.340 --> 07:22.270
و همین کافیه.

07:23.450 --> 07:25.620
کدی که نوشتیم الان باید آماده اجرا باشه.

07:25.640 --> 07:30.230
این کد هر دو ویژگی یا مسیر (route)‌ای که گفتیم رو پیاده‌سازی کرده.

07:30.680 --> 07:35.080
آخرین کاری که باید بکنیم اینه که داخل فایل `package.json` یه اسکریپت برای اجرای پروژه اضافه کنیم.

07:35.090 --> 07:38.780
بعد یه استراحت کوتاه می‌کنیم و تو ویدیوی بعدی این سرویس رو تست می‌کنیم.

07:39.470 --> 07:41.360
پس می‌رم داخل فایل `package.json`.

07:42.230 --> 07:43.760
بخش `scripts` رو پیدا می‌کنم.

07:43.820 --> 07:46.340
اسکریپت پیش‌فرض رو پاک می‌کنم.

07:48.000 --> 07:53.010
و به‌جاش یه اسکریپت `start` می‌نویسم که با استفاده از nodemon فایل `index.js` رو اجرا کنه.

07:53.760 --> 07:54.480
به همین سادگی.

07:55.420 --> 07:56.350
فایل رو ذخیره می‌کنم.

07:56.960 --> 07:59.060
و بعد برمی‌گردم به ترمینال.

07:59.950 --> 08:03.520
ترمینال مربوط به سرویس پست رو پیدا می‌کنم و دستور `npm start` رو می‌زنم.

08:03.520 --> 08:04.660
برای اجرای پروژه.

08:05.620 --> 08:08.560
باید یه پیام ببینم مثل "Listening on 4000".

08:08.590 --> 08:09.310
عالیه.

08:10.010 --> 08:13.840
حالا که سرویس ما اجرا شده، یه توقف کوتاه می‌کنیم

08:13.840 --> 08:17.530
و تو ویدیوی بعدی یه تست ساده از این سرویس انجام می‌دیم تا مطمئن بشیم که درست کار می‌کنه.


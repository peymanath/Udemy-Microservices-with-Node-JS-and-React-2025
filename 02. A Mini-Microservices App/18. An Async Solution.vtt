WEBVTT

00:01.710 --> 00:06.270
We just said that using synchronous communication was maybe not the best way of solving this because

00:06.270 --> 00:11.340
although it's really easy for you and I, it's not really the best solution from an engineering standpoint.

00:11.550 --> 00:14.310
So in this video, we're going to take a look at a second possible solution.

00:14.310 --> 00:18.180
As you guess, this is going to be an asynchronous communication based solution.

00:18.690 --> 00:23.520
Remember, with asynchronous communication, we frequently introduce something called an event broker.

00:23.670 --> 00:29.910
And the goal or purpose of this event broker is to receive notifications from some different services.

00:30.390 --> 00:35.610
Take those notifications or those events and route them off to all the other services that we are running.

00:37.190 --> 00:41.390
So with this approach, we're going to dramatically change how our application behaves.

00:41.960 --> 00:45.560
We are going to introduce the idea of a query service down here.

00:46.160 --> 00:52.700
The goal of the query service is to listen to any time that a post is created or a comment is created.

00:53.210 --> 00:58.070
So any time a post is created or a comment is created, we're going to have these services emit an event.

00:58.930 --> 01:03.460
The query service will then listen for those events and it's going to take all the different posts and

01:03.460 --> 01:09.310
comes to get created and assemble them all into a very efficient data structure that can essentially

01:09.310 --> 01:14.230
solve our root problem right now, which is to make sure that we reduce all these number of requests

01:14.230 --> 01:16.300
down to just one single request.

01:16.630 --> 01:21.550
So again, the goal of this query service is to take all the different posts, all the different comments,

01:21.550 --> 01:25.750
and just serve them up to the browser in one very simple and easy request.

01:27.360 --> 01:30.030
Let's take a look at how this would actually work in practice.

01:30.330 --> 01:32.820
So here's where everything would start.

01:33.610 --> 01:38.830
Whenever someone makes a post request to the post service, we're going to have our post feature emit

01:38.830 --> 01:41.410
an event and it might look something like this.

01:41.590 --> 01:47.350
Maybe it's an event that has some type of post created and it has some data associated with it as well.

01:47.350 --> 01:49.870
And that data might be the actual post that was generated.

01:49.870 --> 01:51.820
So would have an ID and a title.

01:52.810 --> 01:56.620
The Postal Service would throw that event off to the event bus.

01:57.420 --> 02:02.310
And then the event bus would automatically route that event or send the event off to all of our different

02:02.310 --> 02:04.560
services that express some interest in it.

02:04.860 --> 02:07.260
We might send that event off to our query service.

02:08.000 --> 02:12.860
Then it would be up to the query service to somehow process this event and store some data from it.

02:13.640 --> 02:17.510
So I've got here the query service and the event that it needs to process.

02:17.960 --> 02:22.130
We might decide to create some kind of data structure like the one you see right here to store all these

02:22.130 --> 02:23.480
different events that are coming in.

02:24.350 --> 02:29.840
So in this case, we might have a kind of collection or object keeping track of all of our different

02:29.840 --> 02:30.440
posts.

02:30.830 --> 02:35.840
We might store the ID of every post that has been created, its title and all the relevant comments.

02:36.350 --> 02:41.270
So any time that we see this post created event come in, we would take that ID right there.

02:42.390 --> 02:44.130
And enter in a brand new post.

02:44.130 --> 02:48.690
So ba1 JP five is the ID, the title is new post.

02:48.990 --> 02:53.370
And then right now we don't have any comments associated with this post, but probably just default

02:53.370 --> 02:58.110
this comments property right here to be an empty array for right now until we start to actually receive

02:58.110 --> 02:59.040
some comments.

03:00.410 --> 03:05.480
Then we can imagine that at some point in time in the future, maybe someone creates a comment tied

03:05.480 --> 03:06.410
to that post.

03:07.890 --> 03:12.690
So someone will make a post request to our coven service and very similar to what we just went through.

03:12.720 --> 03:17.250
We're going to have our common service emit an event that might look a little something like this.

03:17.940 --> 03:23.100
It might have a type of comet created and some data related or describing the comment that was just

03:23.100 --> 03:23.670
made.

03:24.110 --> 03:28.620
So that will go to our event bus, and the event bus is going to take that thing and route it off to

03:28.620 --> 03:31.080
any service inside of our app that is interested in it.

03:31.810 --> 03:36.550
Now it's up to our query service once again to process this new, different incoming event.

03:37.920 --> 03:39.780
So we're back to work where we service.

03:39.930 --> 03:43.980
We still have that same kind of data structure that we had before, and we've got the definition of

03:43.980 --> 03:46.110
some existing post inside there already.

03:46.710 --> 03:50.250
So we'll write out some code inside of our query service to process this event.

03:51.520 --> 03:53.890
It's going to take this comment that was just created.

03:54.220 --> 03:58.560
It's going to find the related post with this given post ID right here.

03:58.630 --> 04:01.390
In this case, the post ID is a one JB five.

04:02.050 --> 04:03.250
There's the post right there.

04:03.820 --> 04:08.710
So our query service will take this comment and add it into some kind of comments array.

04:09.190 --> 04:16.510
I'll say the idea of this comment is to j56 and the content is a comment like so.

04:19.100 --> 04:24.800
Then at that point in time, someone can make a request directly to our query service and ask for all

04:24.800 --> 04:27.200
the different posts and all the related comments.

04:27.350 --> 04:32.150
And our query service really has to do now is take this entire data structure and send it out.

04:32.540 --> 04:36.320
And inside this thing we've got all the relevant posts, all the relevant comments.

04:37.510 --> 04:40.480
So again, this is this kind of asynchronous communication style.

04:41.670 --> 04:45.900
So in this diagram, I just want to make sure it's really clear rather than making a request to our

04:45.900 --> 04:50.040
post service now to get a list of all the posts and whatnot, we would instead make a get request down

04:50.040 --> 04:51.630
to the query service instead.

04:51.960 --> 04:55.350
So that would require making some changes inside of our React application.

04:56.330 --> 04:56.600
Okay.

04:56.600 --> 05:00.140
So at this point, I want to go over some pros and cons of this approach.

05:00.140 --> 05:04.220
And it turns out, yeah, the pros and cons are identical to what we discussed before.

05:04.940 --> 05:09.530
This query service that we're imagining creating doesn't really have any direct dependencies on other

05:09.530 --> 05:10.370
services.

05:10.430 --> 05:12.020
Yes, I totally agree with you.

05:12.020 --> 05:16.790
I understand it does rely upon some incoming events that are being issued by those services.

05:17.000 --> 05:21.350
But if those services go down for any reason, if they stop functioning, if they stop working, the

05:21.350 --> 05:24.380
query service is still going to work as expected.

05:25.330 --> 05:29.620
The query service is also going to be really, really fast compared to that more synchronous style of

05:29.620 --> 05:30.550
communication.

05:31.360 --> 05:35.800
The reason for this is that we're not making any requests between our different services anymore.

05:35.830 --> 05:39.730
If someone ever wants to get a list of all the different posts and comments associated with them, that's

05:39.730 --> 05:41.620
going to be one very simple request.

05:43.400 --> 05:46.490
The downsides here are identical to the downsides we looked at previously.

05:46.490 --> 05:48.350
We now have some data duplication.

05:48.770 --> 05:54.410
One thing to be clear about is that even in this asynchronous style approach, if we have, say, a

05:54.410 --> 05:56.870
post request, come in to the post service right here.

05:57.380 --> 06:00.260
The post service is still going to store a post.

06:00.260 --> 06:05.240
It's still going to have its own idea of what a post is, though, still being stored here.

06:05.240 --> 06:10.460
But we're also storing what a post is or this some information about this post inside of our query service

06:10.460 --> 06:11.120
as well.

06:11.600 --> 06:15.890
So we now are now effectively duplicating data between these two services.

06:16.340 --> 06:20.990
It might sound really wasteful to duplicate this data, but there are some really good reasons to persist

06:20.990 --> 06:25.130
data between these two services and these reasons are something that we'll discuss a little bit later

06:25.130 --> 06:25.550
on.

06:26.710 --> 06:31.480
And then the last issue here is, well, without a doubt, way harder to understand.

06:31.510 --> 06:32.680
No doubt about it.

06:33.130 --> 06:37.090
From an engineering standpoint, this is a lot harder to implement because we need to be aware of all

06:37.090 --> 06:39.670
these different events that are floating around our application.

06:40.370 --> 06:45.470
However, when it comes down to the actual operational efficiency of this, it's going to be incredibly

06:45.470 --> 06:46.250
fast.

06:46.280 --> 06:48.650
No issues with dependencies on their services.

06:48.650 --> 06:52.670
So again, if anything else goes down, this service will continue to work.

06:54.610 --> 06:57.490
Now at this point, you might be thinking, all right, Steven.

06:57.940 --> 06:58.420
Sure.

06:58.420 --> 06:59.070
Whatever.

06:59.080 --> 07:00.380
Maybe this is how it's done.

07:00.400 --> 07:02.020
You might have some really big questions.

07:02.020 --> 07:06.400
So I put together a quick diagram here where I think I've got some questions that you might have at

07:06.400 --> 07:09.070
this point in time and some possible answers to them.

07:09.340 --> 07:10.930
This video is going a little bit long, however.

07:10.930 --> 07:14.560
So let's take a pause right here and we'll go over some of your concerns that you might have with this

07:14.560 --> 07:16.000
approach in just a moment.

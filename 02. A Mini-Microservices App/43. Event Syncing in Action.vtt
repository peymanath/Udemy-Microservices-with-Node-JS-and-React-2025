WEBVTT

00:01.170 --> 00:05.770
توی ویدیوی قبلی یه مقدار کد sync توی سرویس query نوشتیم. قبل از اینکه تستش کنیم...

00:05.790 --> 00:10.890
ما سعی کردیم از Axios استفاده کنیم، ولی متأسفانه Axios هنوز روی سرویس query نصب نشده.

00:10.890 --> 00:11.580
و اصلاً اصلاً توی فایل index هم import نشده.

00:11.610 --> 00:14.550
پس اول از همه باید اون رو به بالای فایل اضافه کنیم.

00:14.910 --> 00:16.710
می‌رم بالای فایل و Axios رو require می‌کنم.

00:16.980 --> 00:19.530
بعد فایل رو ذخیره می‌کنم.

00:20.990 --> 00:21.950
حالا می‌رم ترمینال.

00:22.310 --> 00:23.840
ترمینالی که مربوط به این سرویسه رو پیدا می‌کنم.

00:24.170 --> 00:28.340
اون سرویس رو متوقف می‌کنم.

00:28.880 --> 00:30.200
سریع Axios رو نصب می‌کنم.

00:30.620 --> 00:32.810
و بعد دوباره سرویس query رو اجرا می‌کنم.

00:34.830 --> 00:36.390
خب، فعلاً همه چیز خوبه.

00:38.070 --> 00:38.370
اوکی

00:38.400 --> 00:39.240
همه چیز مرتب به نظر می‌رسه.

00:39.780 --> 00:43.320
حالا باید مطمئن بشیم که واقعاً می‌تونیم این کد رو به‌درستی تست کنیم.

00:43.830 --> 00:47.730
برای همین، حتی با اینکه سرویس رو الان بالا آوردیم، دوباره متوقفش می‌کنم.

00:47.820 --> 00:50.450
یعنی الان سرویس query کامل خاموشه.

00:50.460 --> 00:52.240
اصلاً وجود نداره.

00:52.260 --> 00:58.290
اما امیدوارم بتونیم یه پست و کامنت ایجاد کنیم و این رویدادها توسط event bus ذخیره بشن.

01:00.690 --> 01:05.280
و وقتی سرویس query دوباره اجرا بشه، بتونه همه اون رویدادهایی که از دست داده رو دریافت کنه و سینک بشه.

01:05.280 --> 01:06.750
پس بریم تستش کنیم.

01:07.230 --> 01:10.990
الان که query اجرا نمی‌شه، می‌رم تو مرورگر.

01:11.010 --> 01:12.840
صفحه رو رفرش می‌کنم.

01:13.580 --> 01:14.990
می‌بینید که یه خطا توی کنسول دارم.

01:15.500 --> 01:19.610
اینم طبیعیه چون query الان اصلاً ران نیست.

01:19.610 --> 01:21.470
کاملاً خاموشه.

01:21.470 --> 01:22.700
ولی باید بتونم یه پست بسازم.

01:23.630 --> 01:25.340
پس یه پست می‌سازم: مثلاً "new post" و Submit می‌زنم.

01:25.340 --> 01:29.480
از نظر تئوری، این پست توی سرویس post ذخیره شده و بقیه فرآیندها انجام شده.

01:31.180 --> 01:36.130
اگه دوباره رفرش کنم، طبیعتاً دوباره خطا می‌گیرم چون query هنوز اجرا نشده.

01:38.260 --> 01:42.700
حالا می‌رم سراغ ترمینال و سرویس query رو اجرا می‌کنم.

01:43.390 --> 01:45.010
به محض اجرا شدنش...

01:45.730 --> 01:47.710
باید به event bus وصل بشه.

01:47.710 --> 01:51.340
ممکنه یه‌سری ارورها ببینید، نگران نباشید، می‌تونید نادیده‌شون بگیرید.

01:51.370 --> 01:52.590
مهم اینه که query باید سعی کنه...

01:52.600 --> 01:53.530
رویدادهای از دست رفته رو بگیره.

01:53.590 --> 01:58.330
یعنی همه چیزهایی که تا قبل از بالا اومدنش اتفاق افتاده بودن.

01:58.900 --> 02:00.430
پس سرویس query رو اجرا می‌کنم.

02:01.150 --> 02:04.120
می‌بینی که به محض اجرای سرویس query، اولین چیزی که لاگ شده رویداد "post created" ـه.

02:04.120 --> 02:05.650
یعنی دقیقاً همون رویدادی که قبلاً از دست داده بود.

02:06.130 --> 02:09.850
حالا اگه دوباره برم توی مرورگر و صفحه رو رفرش کنم، پستم رو می‌بینم.

02:11.360 --> 02:15.620
حالا بیایم یه قدم جلوتر بریم: سرویس query رو دوباره خاموش می‌کنم.

02:15.620 --> 02:16.760
پس دوباره قطع شد.

02:16.850 --> 02:18.950
حالا شروع می‌کنم به ساختن کامنت.

02:18.950 --> 02:21.260
مثلاً یه کامنت با متن "comment number one"

02:22.660 --> 02:23.410
کامنت اول.

02:23.590 --> 02:24.560
بعدی: "comment number two"

02:24.580 --> 02:29.140
و حتی یه کامنت نامعتبر هم می‌نویسم — مثلاً یه چیزی با کلمه "orange" که باعث رد شدن کامنت می‌شه.

02:31.060 --> 02:35.650
اگه دوباره صفحه رو رفرش کنم، هنوز هیچی نمی‌بینم چون سرویس query خاموشه

02:35.650 --> 02:38.370
و هیچ‌کدوم از رویدادها (comment created, moderated, updated) رو دریافت نکرده.

02:38.380 --> 02:43.960
الان query هیچ اطلاعی از این تغییرات نداره.

02:44.560 --> 02:46.180
پس بیایم دوباره سرویس query رو بالا بیاریم.

02:47.660 --> 02:51.170
و به محض اجرا، همه رویدادهایی که از دست داده رو دریافت و پردازش می‌کنه.

02:51.830 --> 02:54.110
الان می‌رم تو مرورگر و صفحه رو رفرش می‌کنم.

02:56.520 --> 02:58.620
انگار داره یه کم طول می‌کشه برای رندر.

02:59.430 --> 03:01.170
احتمالاً برای شما خیلی سریع‌تر اجرا می‌شه.

03:01.170 --> 03:01.800
اینه شد!

03:01.800 --> 03:05.970
الان می‌بینیم که سرویس query بالا اومده و کاملاً آپ‌تودیته.

03:05.970 --> 03:06.930
پست‌مون هست.

03:06.930 --> 03:10.380
کامنت‌ها هستن — حتی اون کامنتی که رد شده هم هست.

03:11.210 --> 03:11.630
خب

03:11.630 --> 03:13.700
قبول کن که این خیلی باحاله!

03:13.820 --> 03:19.850
این روش ۱۰۰٪ مشکل راه‌اندازی دیرهنگام سرویس یا قطع شدن موقت یه سرویس و از دست رفتن چندتا رویداد رو حل می‌کنه.

03:19.850 --> 03:25.250
حتی اگه یه سرویس وسط کار خاموش بشه و چندتا event رو از دست بده، با این روش همه چی جبران می‌شه.

03:25.250 --> 03:27.230
و ما قراره توی اپلیکیشن بعدی حسابی از این استراتژی استفاده کنیم.

03:27.680 --> 03:31.460
اگه به این روش ایرادی می‌بینی، درسته! بعضی مشکلات توش هست — قطعاً هست.

03:32.600 --> 03:36.890
ولی فعلاً نگرانش نباش، توی مراحل بعدی بهش می‌پردازیم و اصلاحش می‌کنیم.

03:38.330 --> 03:43.430
یه‌سری حالت‌های خاص وجود داره و ما قراره این سناریوهای گوشه‌ای (corner cases) رو هم بررسی کنیم،

03:43.430 --> 03:45.030
به‌خصوص در مورد داده‌های پایدار (persistent data).

03:45.050 --> 03:46.790
الان، هیچ‌کدوم از داده‌های ما پایدار نیستن.

03:46.790 --> 03:51.680
همه‌شون توی یه ساختار داده‌ای در حافظه (in-memory) ذخیره می‌شن که به محض خاموش شدن سرویس، از بین می‌رن.

03:52.660 --> 03:57.910
ولی اگه از یه دیتابیس استفاده می‌کردیم — مثلاً اگه پست‌ها و کامنت‌ها رو توی یه دیتابیس ذخیره می‌کردیم...

03:57.910 --> 04:01.900
مثلاً توی سرویس query — ممکنه با خودت بگی: خب، اگه یه event دوبار پردازش بشه چی؟

04:01.900 --> 04:04.730
یعنی اگه یه رویداد تکراری دوباره اجرا بشه، ممکنه به مشکل بخوریم؟

04:04.750 --> 04:07.030
اگه به این فکر کردی، نگران نباش.

04:07.180 --> 04:10.330
براش راه‌حل داریم و قراره توی اپلیکیشن بعدی دقیقاً اون‌ها رو پیاده‌سازی کنیم.

04:10.870 --> 04:14.280
پس کل ایده‌ی سینک شدن با رویدادها خیلی کار راه‌اندازه.

04:14.290 --> 04:15.250
همین‌جا یه توقف کوچیک داشته باشیم.

04:15.250 --> 04:16.360
و در ادامه، ویدیو رو ادامه می‌دیم.

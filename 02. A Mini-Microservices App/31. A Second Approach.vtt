WEBVTT

00:00.700 --> 00:05.080
الان می‌خوایم بریم سراغ گزینه دوم برای اضافه کردن سرویس فیلترینگ و تعریف ایونت‌هایی که ازش پشتیبانی کنن.

00:05.080 --> 00:06.450
اینجا گزینه دوم چیه؟

00:06.460 --> 00:08.110
تقریباً مثل گزینه اوله.

00:08.350 --> 00:12.980
اما یه تفاوت خیلی کوچیک داره. در واقع، احتمالاً چیزی که شما فکر می‌کردید گزینه اول باشه، در واقع همین گزینه دومه.

00:13.000 --> 00:17.110
خب، بیاید با هم مرورش کنیم.

00:19.600 --> 00:22.450
هنوز هم کاربر میاد و یه کامنت رو به سرویس کامنت فعلی می‌فرسته.

00:22.450 --> 00:27.250
و همچنان سرویس کامنت یه ایونت از نوع "comment created" ارسال می‌کنه.

00:28.000 --> 00:31.930
ایونت باس (Event Bus) همچنان این ایونت رو می‌فرسته به سرویس فیلترینگ.

00:31.930 --> 00:37.270
ولی حالا یه تفاوت کوچیک اینه که این ایونت به سرویس کوئری هم ارسال می‌شه و اون هم پردازش‌ش می‌کنه.

00:38.050 --> 00:43.450
یعنی دقیقاً مثل چیزی که تا الان توی اپلیکیشن داریم قبل از اینکه سرویس فیلترینگ رو اضافه کنیم.

00:43.830 --> 00:49.780
به‌محض اینکه سرویس کوئری ایونت "comment created" رو ببینه، یه رکورد از اون کامنت ذخیره می‌کنه.

00:49.780 --> 00:54.400
و نکته مهم اینه که یه وضعیت پیش‌فرض مثلاً "pending" براش در نظر می‌گیره.

00:57.350 --> 01:03.050
یعنی سرویس کوئری فوراً از وجود این کامنت باخبر میشه، حتی اگه بررسی محتوای اون توسط سرویس فیلترینگ زمان‌بر باشه.

01:08.700 --> 01:12.690
الان می‌تونیم تصور کنیم که کاربر میاد یه کامنت وارد می‌کنه و ارسال رو می‌زنه.

01:12.690 --> 01:18.630
بلافاصله ایونت "comment created" ارسال میشه و سرویس کوئری اون رو دریافت و ذخیره می‌کنه.

01:22.800 --> 01:27.240
پس به‌محض اینکه کاربر صفحه رو رفرش کنه، کامنتش رو می‌تونه ببینه.

01:27.240 --> 01:32.340
و چون وضعیتش "pending" هست، می‌تونیم یه پیام مناسب مثل "در انتظار بررسی" براش نمایش بدیم.

01:41.680 --> 01:45.370
البته ما هنوز هم می‌خوایم کامنت رو فیلتر کنیم.

01:45.520 --> 01:50.200
بنابراین ایونت "comment created" همچنان به سرویس فیلترینگ هم ارسال میشه.

01:50.200 --> 01:54.760
و بعد از یه مدت — حالا چند ثانیه یا چند ساعت — سرویس فیلترینگ یه ایونت جدید منتشر می‌کنه.

01:56.110 --> 01:57.850
ایونتی مثل "comment moderated".

01:58.180 --> 02:03.910
که دوباره میره برای سرویس کوئری، و اون هم وضعیت کامنت رو آپدیت می‌کنه به "approved" یا "rejected".

02:06.170 --> 02:07.430
پس این شد گزینه دوم.

02:07.880 --> 02:12.230
این مدل دیگه مشکل اینکه کاربر کامنت رو ارسال کنه ولی بلافاصله نبینه رو حل می‌کنه.

02:18.440 --> 02:22.070
اما یه مشکلی هست که هم در گزینه اول وجود داشت و هم در گزینه دوم.

02:22.160 --> 02:26.210
الان می‌خوایم بگیم اون مشکل چیه که توی هر دو گزینه مشترکه.

002:27.300 --> 02:31.230
می‌خوام یکم عمیق‌تر به سرویس Query فکر کنی و کاری که داره انجام می‌ده.

02:31.260 --> 02:34.680
این سرویس صرفاً مربوط به منطق نمایش داده‌هاست.

02:34.950 --> 02:37.250
در واقع، اسمش هم "query service" ـه.

02:37.260 --> 02:42.960
کارش اینه که داده‌ها رو جمع کنه یا ذخیره کنه و خیلی سریع اون‌ها رو در اختیار کاربر قرار بده.

02:43.470 --> 02:48.420
الان فقط دوتا منبع رو به هم مرتبط می‌کنه: پست‌ها و کامنت‌ها.

02:48.420 --> 02:52.770
ولی در آینده، کاملاً قابل تصوره که منابع دیگه‌ای هم بهش اضافه بشه.

02:52.770 --> 02:59.400
مثل رأی مثبت، رأی منفی، تصویر، یا هر چیز دیگه‌ای. این سرویس ممکنه چندین منبع داده رو با هم ترکیب کنه.

03:03.450 --> 03:04.620
و این دقیقاً کاریه که قراره انجام بده.

03:07.500 --> 03:08.880
حالا یه سؤال برات دارم:

03:09.360 --> 03:16.380
آیا منطقیه که این سرویس نمایشی، منطق دقیق مربوط به به‌روزرسانی کامنت‌ها رو هم بفهمه؟

03:16.380 --> 03:19.440
مثلاً ایونت comment moderated رو پردازش کنه؟

03:19.470 --> 03:24.210
الان به‌نظر ساده میاد. چون فقط باید اون کامنت رو پیدا کنه و وضعیتش رو به approved یا rejected تغییر بده.

03:24.840 --> 03:30.660
پس الان به‌ظاهر مشکلی نیست، چون فقط یه خط کده. اما حالا بیا یه سیستم کامنت‌گذاری واقعی رو تصور کن.

03:30.690 --> 03:35.460
توی دنیای واقعی، آپدیت‌های زیادی روی یه کامنت ممکنه انجام بشه.

03:35.610 --> 03:40.590
ممکنه یک کامنت فیلتر بشه، رأی مثبت یا منفی بگیره، یا حتی promote بشه.

03:45.660 --> 03:50.820
مثلاً یک ناظر بخواد بگه این کامنت باکیفیت بالاست و اونو بیاره بالاتر از بقیه.

03:50.820 --> 03:52.470
ممکنه ناشناس بشه.

03:53.340 --> 03:58.470
ممکنه به‌عنوان قابل جستجو علامت‌گذاری بشه یا تبلیغاتی باشه که برای نمایش پول پرداخت شده.

04:00.570 --> 04:05.550
هرکدوم از این تغییرات دقیق، منطق تجاری خاص خودش رو داره.

04:05.550 --> 04:08.160
یعنی فقط یه status نیست که عوض شه، چیزای زیادی درگیرشن.

04:29.700 --> 04:33.000
اگه بخوایم این مسیر رو ادامه بدیم و بگیم سرویس Query باید بتونه event مربوط به comment moderated رو پردازش کنه،

04:33.790 --> 04:38.630
در اصل داریم می‌گیم که ممکنه در آینده به یه وضعیتی برسیم مثل همین مثالی که الان می‌زنم،

04:38.650 --> 04:42.970
که توش سرویس Query باید بتونه کلی نوع مختلف از به‌روزرسانی‌های ممکن روی یک کامنت رو هندل کنه.

04:42.970 --> 04:49.360
و راحت می‌تونی تصور کنی اگه سرویس‌های دیگه‌ای مشابه سرویس Query داشته باشیم—مثلاً یه سرویسی برای پردازش پست‌های محبوب هفتگی،

04:49.360 --> 04:51.370
یا یه سرویس برای پیشنهاد محتوا به کاربر—

04:52.460 --> 04:57.710
و اگه اون‌ها هم مجبور باشن ساختار کامنت‌ها رو ذخیره کنن، خب اون‌ها هم باید این eventها رو پردازش کنن.

04:57.710 --> 05:03.260
و اینجا دیگه وارد سناریویی می‌شیم که توش هر تغییر کوچیک در کامنت باید توسط تعداد زیادی از سرویس‌ها هندل بشه.

05:03.950 --> 05:08.450
و مشخصه که این اصلاً چیزی نیست که بخوایم؛ این معماری اصلاً درست و بهینه نیست.

05:09.920 --> 05:15.620
درسته که این روش الان برای نسخه‌ی فعلی اپلیکیشنمون جواب می‌ده، ولی من می‌خوام بگم که شاید بهترین راه‌حل نباشه.

05:15.620 --> 05:18.320
پس یه توقف دیگه اینجا داشته باشیم.

05:18.440 --> 05:22.250
توی ویدئوی بعدی، می‌ریم سراغ بررسی گزینه‌ی سوم برای حل این مسئله.

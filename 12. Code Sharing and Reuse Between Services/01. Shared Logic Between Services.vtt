WEBVTT

00:01.210 --> 00:03.340
Our client side application is now looking pretty good.

00:03.340 --> 00:06.430
We've got the full gamut of authentication stuff running inside of here.

00:06.430 --> 00:09.010
So sign in, sign up, sign out, and so on.

00:09.340 --> 00:12.070
So now we're going to start to move on to our next service.

00:12.830 --> 00:14.900
Before we do, however, you might have a quick question.

00:14.900 --> 00:20.060
You might say, Hey, Steven, we have not really done any event related stuff around our service.

00:20.060 --> 00:23.180
Remember all of our microservices communicate using events.

00:23.180 --> 00:27.470
We have not implemented any events or anything like that inside of our cluster so far.

00:27.980 --> 00:33.770
So as it turns out, our service really doesn't have a whole lot to communicate to our other services

00:33.770 --> 00:34.850
inside of our cluster.

00:35.030 --> 00:40.430
Yes, we could emit events like say, sign up or sign in or stuff like that, but there's no other services

00:40.430 --> 00:44.240
that we are going to have inside of our cluster that are ever going to make use of those events.

00:44.330 --> 00:47.540
So we're not going to worry about any event related stuff for the auth service.

00:47.840 --> 00:52.760
As a matter of fact, all the actual stuff that the service really does is being communicated through

00:52.760 --> 00:54.170
that JSON web token.

00:54.170 --> 00:58.520
So that's how the service kind of somewhat communicates with other services.

00:58.520 --> 01:01.760
It's really by setting that JSON web token inside the user's cookie.

01:02.710 --> 01:03.000
Okay.

01:03.010 --> 01:06.550
So in this video, we're going to start to work on our next big service.

01:06.820 --> 01:09.460
So what service are we going to work on next?

01:09.490 --> 01:12.760
Well, it's going to be the ticketing service or the ticket service.

01:13.090 --> 01:17.260
The goal the ticket service is going to be to list all the different tickets that have been created

01:17.260 --> 01:20.050
inside of our application and all the tickets that are for sale.

01:20.620 --> 01:24.040
We want to have the ability to show details about a very particular ticket.

01:24.370 --> 01:26.790
We want to create a ticket and edit a ticket.

01:26.800 --> 01:29.390
So these are all some pretty basic root handlers.

01:29.410 --> 01:34.450
We're going to list stuff, show a particular record, create a record and edit a record.

01:35.020 --> 01:38.590
The ticket service is definitely going to need to have some event related stuff.

01:38.590 --> 01:42.700
So as soon as we get some kind of basic groundwork put together for the ticket service, then we're

01:42.700 --> 01:45.850
going to start implementing that event stuff inside of our cluster.

01:46.840 --> 01:47.170
All right.

01:47.170 --> 01:51.280
Now, as we start to think about these different routes right here, specifically create a ticket and

01:51.280 --> 01:53.830
edit a ticket, there's one quick thing I want to mention.

01:54.220 --> 01:59.320
Chances are that whenever someone comes to our service and tries to create a ticket or edit one, we

01:59.320 --> 02:01.660
probably want to make sure that this user is logged in.

02:01.660 --> 02:06.860
So in other words, we're going to require authentication for a user to create or edit a ticket.

02:06.880 --> 02:09.070
That seems like a very reasonable requirement, right?

02:09.670 --> 02:12.430
Let's think about the impact that's going to have on our ticket service.

02:12.670 --> 02:16.840
That means that our ticket service is probably going to need to have some kind of middleware inside

02:16.840 --> 02:19.420
of it to make sure that the user is authenticated.

02:19.420 --> 02:24.760
So inspect the cookie, pull out that JSON web token, validate the token, and so on.

02:25.300 --> 02:30.010
We'll probably implement that inside of a middleware and we'll probably want to have that run before

02:30.010 --> 02:31.450
we ever send that thing off to a route.

02:31.480 --> 02:34.120
HANDLER Now, does that sound familiar?

02:34.150 --> 02:36.020
Does this require off middleware?

02:36.040 --> 02:36.940
Sound familiar?

02:37.360 --> 02:38.710
You might recall.

02:39.580 --> 02:43.420
Now we kind of put something together inside of our art service.

02:43.420 --> 02:45.100
Very, very similar to that.

02:45.130 --> 02:49.570
You might recall inside that middleware directory, we've got this require auth middleware right here.

02:50.000 --> 02:54.280
It's certainly a very easy implementation, but without a doubt, we already wrote out something like

02:54.280 --> 02:54.850
this.

02:56.260 --> 03:00.000
As we start to also think about that require auth middleware inside the ticket service.

03:00.010 --> 03:05.410
If a user is not signed in, chances are we're going to want to throw some kind of air, maybe like

03:05.410 --> 03:10.750
a not authorized air or something like that, and have that air somehow get captured by our express

03:10.750 --> 03:15.790
application, turned into some error message and then sent back to whoever made the request.

03:15.790 --> 03:21.160
So something very similar, for example, to maybe this not authorized air that we already put together

03:21.160 --> 03:22.780
inside of our service.

03:23.380 --> 03:26.770
So I think you might be seeing where I'm going with this.

03:26.800 --> 03:32.380
It turns out that we've got a lot of functionality already created inside of our service that we need

03:32.380 --> 03:34.060
inside the ticket service.

03:34.420 --> 03:38.530
And so the first thing we're going to do before even worrying about putting together the ticket service,

03:38.530 --> 03:43.390
we're going to go back to our OTT service and we're going to start to extract a ton of logic from it.

03:43.690 --> 03:46.220
We're going to pull out that entire custom air system.

03:46.240 --> 03:49.720
We're going to pull out some of the different middleware we put together, and we're going to pull out

03:49.720 --> 03:52.390
some of that request validation stuff as well.

03:52.570 --> 03:57.160
We're going to pull all this out into a shared library that we're going to then start to use between

03:57.160 --> 03:58.960
all of our different services.

03:59.140 --> 04:04.210
And this is going to dramatically decrease the amount of time it takes together or takes to put together

04:04.210 --> 04:05.390
our ticket service.

04:05.410 --> 04:10.090
The ticket service in general is going to come together so much more quickly than the time that we spent

04:10.090 --> 04:14.950
on our service, because all of this kind of core foundational stuff has already been written, and

04:14.950 --> 04:19.330
all we really need to do is make sure that we can use it in both of these different services.

04:20.520 --> 04:20.730
Okay.

04:20.850 --> 04:22.510
So that's the first thing we're going to be working on.

04:22.530 --> 04:26.910
We're going to extract a lot of the shared logic into a shared library and then make sure that we can

04:26.910 --> 04:29.460
use this library inside of our different services.

04:29.790 --> 04:33.570
So with that in mind, quick pause right here and let's get started in the next video.

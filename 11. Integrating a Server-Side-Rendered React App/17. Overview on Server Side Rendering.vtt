WEBVTT

00:00.900 --> 00:04.870
As I mentioned at the end of the last video, we are going to now focus on this landing page.

00:04.890 --> 00:08.850
We need to figure out whether or not the user is signed in at any given point in time and then display

00:08.850 --> 00:12.900
on the screen either you are signed in or you are not signed in.

00:13.380 --> 00:17.130
Now, doing this is going to be a little bit more challenging than you might expect just because we

00:17.130 --> 00:18.840
are using server side rendering.

00:19.080 --> 00:23.280
I first want to begin this video by giving you a quick reminder of how we can decide whether or not

00:23.280 --> 00:25.240
we are signed in in general.

00:25.260 --> 00:27.060
So here's what we want to do.

00:28.380 --> 00:33.870
We want to make sure that we make a request off to our service, specifically a request to the API users

00:33.870 --> 00:35.310
current user route.

00:35.460 --> 00:40.140
If we are signed in, then the response we get back is going to have some information about ourselves.

00:40.140 --> 00:43.020
So for example, our ID, our email and so on.

00:43.020 --> 00:46.110
But if we are not signed in, the response is going to have null.

00:46.830 --> 00:48.690
So ultimately that's what we want to do.

00:48.690 --> 00:54.210
To find whether or not we are signed in, we got to make a request off to this current user endpoint.

00:54.540 --> 00:58.020
Now, the real question here is when are we going to make this request?

00:58.470 --> 01:03.660
Chances are that whenever a user makes an initial request to our server, so this initial request to

01:03.660 --> 01:10.200
get our application, we want to have some kind of HTML file being immediately sent back with some relevant

01:10.200 --> 01:11.330
content inside of it.

01:11.340 --> 01:16.350
In other words, this HTML file that we send back immediately needs to say whether or not the user is

01:16.350 --> 01:17.010
signed in.

01:17.820 --> 01:22.980
So that means that we need to figure out essentially how to make the request while our application is

01:22.980 --> 01:26.400
being built or served from our next gen server.

01:28.320 --> 01:31.860
So we're going have to inspect this entire server side rendering approach just a little bit more and

01:31.860 --> 01:34.500
get a better idea or understanding of what's going on with it.

01:34.500 --> 01:35.670
So quick diagram.

01:36.400 --> 01:36.730
All right.

01:36.730 --> 01:41.350
So here's what's actually going on behind the scenes whenever we make a request to our next DJ's application.

01:41.710 --> 01:47.200
So request is going to come in to the next JSP and on our client pod or inside that container, the

01:47.200 --> 01:49.210
following logic is going to be executed.

01:49.600 --> 01:54.220
Next JS is going to take a look at the URL of the incoming request, and based upon that URL, it's

01:54.220 --> 01:56.200
going to decide what components to show.

01:56.500 --> 02:01.300
So in other words, it's going to decide whether or not it needs to show the sign up page or the banana

02:01.300 --> 02:03.250
page or the root route page.

02:04.780 --> 02:10.150
Then for each those components that it decides that needs to show it's going to call the get initial

02:10.150 --> 02:13.900
props static method for each of these relevant components.

02:14.170 --> 02:15.760
What is get initial props?

02:15.790 --> 02:17.680
Well, let me show you back inside my code editor.

02:18.470 --> 02:21.110
I'm going to find my index file.

02:23.210 --> 02:23.810
Inside of here.

02:23.810 --> 02:25.960
We've got a very simple component function right now.

02:25.970 --> 02:27.620
I'm going to update this thing just a little bit.

02:27.620 --> 02:31.610
I'm going to change the name of this, or I'm going to assign this function to a variable.

02:32.060 --> 02:34.040
I'll call about landing page.

02:35.930 --> 02:39.170
I'll then do an export default of landing page down here at the bottom.

02:40.610 --> 02:45.440
Then in between the two, I'm going to say landing page, get initial props.

02:46.840 --> 02:50.350
So this get initial props thing is specific to next JRS.

02:50.350 --> 02:56.260
If we decide to implement get initial props, the next DJs is going to call this function while it is

02:56.260 --> 02:58.960
attempting to render our application on the server.

02:59.350 --> 03:04.270
Get initial props is our opportunity to attempt to fetch some data that this component needs during

03:04.270 --> 03:06.100
the server side rendering process.

03:06.670 --> 03:11.890
So if we decide to implement get initial props, it will be automatically called on the server when

03:11.890 --> 03:13.990
next JZ decides to show this component.

03:15.890 --> 03:17.810
Once get initial props is invoked.

03:18.080 --> 03:23.060
Any data that we return from it, usually in the form of an object, is going to be provided to our

03:23.060 --> 03:24.740
component as a prop.

03:25.990 --> 03:30.400
So we're going to render each component that next decided to show with whatever data we return from.

03:30.400 --> 03:31.600
Get initial props.

03:32.020 --> 03:37.120
Next JS is then going to take the HTML from all the components that rendered and send back a full response.

03:37.570 --> 03:43.090
So long story short, if we ever want to fetch some data with next JS during the server side rendering

03:43.090 --> 03:48.190
process, we are going to define this get initial prop function right here and this is where we can

03:48.190 --> 03:50.080
make some async requests.

03:50.080 --> 03:55.750
We can somehow generate data, whatever we need to do to fetch data we are going to implement inside

03:55.750 --> 04:00.250
of get initial props and this function will be executed on the server.

04:00.890 --> 04:06.560
We cannot do any data loading inside of components themselves when we render a component with next JZ

04:06.590 --> 04:11.450
during the server side rendering phase, we don't get any opportunity to make requests.

04:11.660 --> 04:14.930
All of our components are executed or rendered just one single time.

04:14.930 --> 04:20.180
So we cannot attempt to say make a request and then wait for the response and possibly try to update

04:20.180 --> 04:21.700
some state or anything like that.

04:21.710 --> 04:26.900
Instead, each of our components during server side rendering are just rendered once we take the result

04:26.900 --> 04:27.560
and that's it.

04:27.560 --> 04:29.240
That's what's going to be sent back to the user.

04:29.750 --> 04:35.480
Now of course, after our application shows up on the browser, all bets are off, get initial props

04:35.480 --> 04:36.590
not really used anymore.

04:36.590 --> 04:39.770
Instead, we're going to rely upon our components implementation.

04:39.980 --> 04:45.170
So all this discussion around get initial props is really just about the server side rendering process.

04:45.170 --> 04:45.890
That's it.

04:46.880 --> 04:48.780
And it helped you really understand how this stuff works.

04:48.800 --> 04:52.280
Let's just put in a little bit of test code inside this index file.

04:53.110 --> 04:54.610
Inside of get initial props.

04:54.610 --> 04:58.600
I'm going to put in a console log of I am on the server.

05:00.030 --> 05:02.610
And then after that, I'm going to return an empty object.

05:03.090 --> 05:08.610
So this empty object right here is going to show up as props to a landing page to make it a little bit

05:08.610 --> 05:09.360
more interesting.

05:09.360 --> 05:11.490
Let's put some imaginary data inside there.

05:11.850 --> 05:14.130
I'm going to put in how about a color of red?

05:14.820 --> 05:21.150
So now I would be able to access that property as a prop inside this component so I can pull out that

05:21.150 --> 05:22.080
color property.

05:23.130 --> 05:27.330
I'll do a console log right here of I am in the component.

05:30.090 --> 05:32.520
And after that, I will print out the color.

05:34.310 --> 05:38.900
Okay, let's save this and let's go back over the browser and try to test this thing out.

05:39.500 --> 05:43.610
I'm going to navigate back to our main landing page, and once they are, I'm going to make sure that

05:43.610 --> 05:46.250
I refresh the page manually at least one time.

05:47.300 --> 05:53.500
You'll notice now that we've got a console log right here of I am in the component and we see red and

05:53.500 --> 05:58.570
if I also go back over to my terminal most importantly we'll see a console.log right here of I am on

05:58.570 --> 05:59.170
the server.

05:59.170 --> 06:00.910
I am in the component.

06:02.130 --> 06:03.510
So what's the lesson here?

06:03.540 --> 06:04.320
Well, again.

06:05.110 --> 06:06.010
Let's get initial props.

06:06.040 --> 06:09.590
Function is going to be executed during the server side rendering process.

06:09.610 --> 06:13.690
This function is where we're going to attempt to fetch some data specifically for doing some initial

06:13.690 --> 06:14.680
rendering of our app.

06:15.350 --> 06:19.700
Any data that we returned from this function is going to show up inside of our component so we can freely

06:19.700 --> 06:21.260
access all the data inside there.

06:21.620 --> 06:25.940
If we need to fetch any data during the server side rendering process, we have to do it inside of get

06:25.940 --> 06:26.640
initial props.

06:26.660 --> 06:28.550
We cannot do it inside of a component.

06:29.030 --> 06:34.250
And then finally, once our entire application is executing inside the browser, we're not really going

06:34.250 --> 06:37.040
to rely upon get initial props too much after that.

06:37.040 --> 06:42.230
Instead, we're going to be mostly concerned with fetching data as usual inside of a component.

06:42.980 --> 06:46.700
So now that we've got some back story on server side rendering, quick pause right here and continue

06:46.700 --> 06:47.480
in just a moment.

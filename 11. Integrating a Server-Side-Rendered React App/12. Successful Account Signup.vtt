WEBVTT

00:00.990 --> 00:05.310
We can now read in the email and password that a user enters into this form when they submit it.

00:05.340 --> 00:09.660
So now we need to take that email and password and reach out to our service and attempt to sign up for

00:09.660 --> 00:10.560
a new account.

00:10.740 --> 00:12.210
So how are we going to do that?

00:12.300 --> 00:16.890
Well, remember, we've already discussed this at a great length when we were initially putting together

00:16.890 --> 00:18.030
our service.

00:18.180 --> 00:23.670
The All Service has a post request handler watching for incoming requests on API users sign up.

00:24.180 --> 00:29.370
So all we have to do from our React application running inside the browser is make a post request to

00:29.400 --> 00:32.790
API user sign up that's going to go off to our service.

00:33.060 --> 00:37.290
Now the reason I'm kind of making a big deal around this is remember we actually have multiple layers

00:37.290 --> 00:40.100
of things between the browser and the OTT service.

00:40.110 --> 00:44.010
We've got the Ingress Engine X Service, which is going to handle some initial routing.

00:44.490 --> 00:49.740
Whenever Ingress Engine X routes, the request, it goes off to a cluster IP service running inside

00:49.740 --> 00:52.290
of our cluster and from the cluster IP service.

00:52.290 --> 00:56.970
Then the thing finally gets sent off to the pod that is running our off container.

00:57.950 --> 01:02.060
And then inside that container is the express application that's going to route the request to a request

01:02.090 --> 01:05.150
handler where we actually create our user.

01:05.750 --> 01:10.460
So even though this diagram looks really simple, remember there are many things running between our

01:10.460 --> 01:13.280
actual off container and the browser.

01:14.090 --> 01:14.330
Okay.

01:14.330 --> 01:15.620
So I'll let mind again.

01:15.620 --> 01:20.570
All we really have to do here is make an Ajax request to our service, specifically that route right

01:20.570 --> 01:20.990
there.

01:21.320 --> 01:24.530
To make the request itself, we're going to use the Axios library.

01:25.070 --> 01:29.960
We need to install Axios, so I'm going to flip back over to my terminal and again inside my client

01:29.960 --> 01:30.590
directory.

01:30.590 --> 01:33.200
I will run an NPM install Axios.

01:34.940 --> 01:38.750
Now just like bootstrap whenever we install something or make a change to that package.

01:38.930 --> 01:43.670
JSON file scaffold needs to rebuild the image and then deploy it into our cluster.

01:43.910 --> 01:48.650
So after running this command, you're going to want to go back over to the window running scaffold.

01:49.870 --> 01:52.750
And make sure that you wait for the installation to be completed.

01:52.750 --> 01:56.380
So you're going to see something like this right here, all that gibberish.

01:56.650 --> 01:58.210
So there's my NPM install.

01:59.350 --> 02:04.720
The image was rebuilt and then eventually updated inside the cluster.

02:04.720 --> 02:08.870
And I could see right there is where the pod got restarted with a new version of that image.

02:08.890 --> 02:11.080
The image that has Axios installed.

02:11.290 --> 02:14.440
So make sure you wait for that installation process to be completed.

02:15.870 --> 02:20.070
Once it's done, we can then go into our editor and start to write out some code inside of here to make

02:20.070 --> 02:21.090
use of Axios.

02:21.600 --> 02:25.800
So at the very top we will first import Axios from Axios.

02:28.400 --> 02:28.610
All.

02:28.610 --> 02:29.870
Then find the submit.

02:30.560 --> 02:33.050
I'm going to delete the console log and replace it with.

02:34.180 --> 02:36.850
Await Axios dot post.

02:37.450 --> 02:40.750
Two API users sign up.

02:41.600 --> 02:45.440
And I'll pass along the email and password as the second argument.

02:47.770 --> 02:50.380
Let's then take the response coming back from this.

02:53.680 --> 03:01.090
And right now I'll do a console log of response dot data just you know, whenever Axios gets a response

03:01.090 --> 03:05.440
from some request, the actual response data is available on response data.

03:05.440 --> 03:08.620
So we're just going to make sure that we get back something that looks like a user, something that

03:08.620 --> 03:11.590
describes we just signed in as well.

03:11.590 --> 03:12.550
Then save this.

03:13.120 --> 03:18.940
I'm going to flip back over to my browser and again, if you did not wait for everything to be restarted,

03:18.940 --> 03:23.620
then you're going to get an error when you run this code or more relevant when we even try to refresh

03:23.620 --> 03:24.220
our code.

03:24.220 --> 03:29.770
Because I tried to use the awake keyword right here without marking the enclosing function as async.

03:29.770 --> 03:30.460
That's better.

03:32.420 --> 03:32.590
Okay.

03:32.660 --> 03:33.670
Now, the air went away.

03:33.680 --> 03:38.090
So again, if you tried to submit this form now and you get an error about Axios being undefined or

03:38.090 --> 03:41.660
something like that, you need to make sure that you wait for Axios to be installed.

03:42.450 --> 03:45.330
Well then go ahead and enter in an email address right here.

03:45.330 --> 03:49.590
So I'll do test 20 at Test and a password.

03:51.490 --> 03:52.450
Well, then hit sign up.

03:52.870 --> 03:54.490
And there's the response right there.

03:54.850 --> 03:59.110
So I've got an email and the ID of the user that I just signed up as.

03:59.350 --> 04:05.500
And in theory, I now have a cookie tied as well that identifies me to the back end server.

04:05.980 --> 04:07.660
If I go over to network.

04:08.650 --> 04:10.420
And find air right here.

04:10.660 --> 04:12.130
I can then click on sign up.

04:13.180 --> 04:19.630
Take a look at the headers tab and if I find it response headers I should see inside of here a set cookie.

04:19.660 --> 04:20.860
There it is right there.

04:21.010 --> 04:24.160
So remember the set cookie header is what sets a cookie.

04:24.580 --> 04:28.300
My browser is going to intercept this header and automatically manage that data.

04:28.330 --> 04:33.310
Now, any time I make a follow up request to the backend server, this cookie will be automatically

04:33.310 --> 04:34.370
included with the request.

04:34.390 --> 04:37.060
And remember, that is the mechanism that identifies us.

04:37.810 --> 04:39.890
Well, I'd say this is a good success.

04:39.910 --> 04:44.870
However, do remember that we put in some actual validation for this thing as well.

04:44.890 --> 04:47.200
We said that an email must look like an email.

04:47.320 --> 04:53.290
Right now, if I change the email input to an invalid email and then try to submit, I definitely get

04:53.290 --> 04:53.980
an error.

04:54.720 --> 04:56.470
So there's the request right there.

04:56.490 --> 05:02.220
If I take a look at the response, there is our standard error formatting, but we are not actually

05:02.220 --> 05:04.320
showing this information anywhere on the screen.

05:04.680 --> 05:07.750
So this definitely looks good, but we still got a little bit of work to do.

05:07.770 --> 05:12.330
So let's take a quick pause and then add in some of this actual validation handling in the next video.

WEBVTT

00:01.620 --> 00:01.950
All right.

00:01.950 --> 00:06.390
Let's summarize what we learned in the last three videos and kind of turn this into some steps to move

00:06.390 --> 00:06.960
forward.

00:07.290 --> 00:09.690
At the end of the day, here's our goal, here's our plan.

00:10.260 --> 00:14.520
If we are ever making requests from the browser, then we're going to essentially allow the browser

00:14.520 --> 00:18.510
to work as usual when it comes to figuring out what domain to make the request to.

00:18.780 --> 00:22.380
In other words, we're going to use a base URL in Axios of just empty string.

00:22.650 --> 00:28.470
So we will continue when we're executing requests inside the browser to have a URL like that right there.

00:29.660 --> 00:34.730
But if we are making a request during the server side rendering process, then we need to make sure

00:34.730 --> 00:39.110
that we set a base URL on that request to reach out to Ingress and Gen X directly.

00:39.590 --> 00:44.240
So for example, if we were making this request right here during the server side rendering process,

00:44.240 --> 00:51.320
we would have to add in something like HTTP, ingress and all that other stuff that we just spoke about

00:51.320 --> 00:52.040
a moment ago.

00:53.620 --> 00:55.490
So that's what we really need to do.

00:55.510 --> 00:58.570
We need to customize the request based upon the environment.

00:59.050 --> 01:04.630
Now that starts to raise an important question How do we know when a request is going to be executed

01:04.630 --> 01:09.520
in the browser versus on next DJs or by next DJs itself?

01:09.700 --> 01:11.530
Well, here's the rule of thumb we're going to use.

01:12.350 --> 01:17.420
If we ever have a request coming from a component, then that is always going to be issued from the

01:17.420 --> 01:17.990
browser.

01:17.990 --> 01:21.410
So we will use that rule of using a domain of basically empty string.

01:22.160 --> 01:26.150
How do we know the request is always going to come from the browser if it's issued in a component?

01:26.180 --> 01:31.610
Well, remember, during the server side rendering process, it initial props gets called one time.

01:31.610 --> 01:34.460
We can make some requests inside there and then we return some data.

01:34.910 --> 01:40.070
That data is provided to this component as props and that component is then going to render itself exactly

01:40.070 --> 01:40.850
one time.

01:41.150 --> 01:46.880
Although we technically can make a request from inside of here, we don't ever get the opportunity to

01:46.880 --> 01:50.720
wait for the request to be resolved during the server side rendering process.

01:50.720 --> 01:56.540
So we don't get the the we don't get the ability to update any state, make use of any lifecycle methods

01:56.540 --> 01:57.890
or anything like that.

01:57.890 --> 02:02.630
All the components just get executed or rendered one time and whatever they return is immediately sent

02:02.630 --> 02:03.800
back down to the browser.

02:04.940 --> 02:09.470
Then once inside the browser, if we have any requests being issued from inside of the component, that's

02:09.470 --> 02:10.220
totally fine.

02:10.550 --> 02:15.170
So basically, if the request is inside of a component, we do not have to worry about setting a very

02:15.170 --> 02:17.060
particular domain or anything like that.

02:18.450 --> 02:23.190
So the only other location where we'll be making requests is inside of get initial props.

02:23.190 --> 02:26.610
And unfortunately this is where life starts to get a little bit confusing.

02:27.150 --> 02:32.790
Up to this point, I've said to you several times that get initial props gets executed during the server

02:32.790 --> 02:35.580
side rendering process 100% true.

02:35.630 --> 02:39.690
Initial props always call during server side rendering it is executed on the server.

02:39.930 --> 02:45.120
However get initial props will also be executed in the browser under some very.

02:46.440 --> 02:50.000
Particular, I guess is the best word, very particular circumstances.

02:50.010 --> 02:55.050
So let's take a look at when that that function is going to be executed inside the browser.

02:56.200 --> 02:58.030
So here's essentially the rules.

02:59.040 --> 03:02.220
On the left hand side, we've got a couple of request sources.

03:02.220 --> 03:07.710
So this is essentially when we try to navigate to our app or when some request is issued from inside

03:07.710 --> 03:08.610
of our application.

03:10.450 --> 03:15.850
So if we ever do a hard refresh the page, get initial props will be executed on the server.

03:16.240 --> 03:19.590
If we ever click a link from a different document or a different domain.

03:19.600 --> 03:24.790
So let's say that you go to Reddit and you click on a link and that takes you to our application that

03:24.790 --> 03:27.730
is going to cause get initial props to be executed on the server.

03:28.060 --> 03:33.100
And then finally, if we ever say type a URL into the address bar and hit the enter key once again,

03:33.100 --> 03:35.440
get initial props executed on the server.

03:36.130 --> 03:39.640
But get initial drops can be executed on the client.

03:39.970 --> 03:44.800
And the case in which that will happen is any time that we are navigating from one page to another while

03:44.800 --> 03:46.960
inside of our application already.

03:47.500 --> 03:52.210
So let's go through these different scenarios and I want to prove to you exactly make sure that this

03:52.210 --> 03:53.440
is actually what occurs.

03:53.830 --> 03:54.460
So.

03:55.880 --> 03:56.960
To really test this out.

03:57.410 --> 03:59.320
I'm going to go back over to my good initial props.

03:59.330 --> 04:01.550
I'm going to comment out what is inside there right now.

04:01.550 --> 04:04.640
And I'm also going to comment out the console log of current user up there.

04:05.120 --> 04:09.140
I'll then put in a console log of I was executed.

04:11.010 --> 04:12.990
And they'll go into return an empty object.

04:14.050 --> 04:19.150
So we're going to try to load up our page in a couple of different ways, and we'll take a look at where

04:19.150 --> 04:23.860
this console log shows up at, and we can use that to really determine what context or whether good

04:23.860 --> 04:26.980
initial props is being executed in the browser or on the server.

04:27.780 --> 04:27.970
Yeah.

04:28.020 --> 04:30.690
So let's try first a hard refresh the page.

04:30.840 --> 04:32.920
So I'm going to go over to ticketing Dev.

04:33.840 --> 04:35.430
I'm going to refresh the page.

04:36.070 --> 04:38.080
And I see no console.log at all.

04:38.470 --> 04:42.520
But if I go over to my terminal, I see I was executed right there.

04:43.730 --> 04:44.060
Okay.

04:44.060 --> 04:47.630
Well, that definitely means that the initial process was executed on the server.

04:47.990 --> 04:50.540
I'm now going to clear this log by pressing command k.

04:52.070 --> 04:53.990
And I'm going to test out the next scenario.

04:54.730 --> 04:58.240
We don't really have the ability to click on a link from a different domain, so I'll just go directly

04:58.240 --> 04:58.690
to this one.

04:58.690 --> 05:01.210
I'm going to try typing our URL into the address bar.

05:01.660 --> 05:04.900
So for this I can really just go to the address bar and hit enter.

05:05.810 --> 05:08.090
And when I do so, I don't see any console.log over here.

05:08.090 --> 05:12.080
But again, if I go over to my terminal, I will see I was executed again.

05:12.080 --> 05:15.320
That means that get initial props was executed on the server.

05:15.770 --> 05:17.270
Now, finally, last case.

05:18.290 --> 05:22.400
If we are navigating from one page to another while already inside the application.

05:22.400 --> 05:24.210
So how can we simulate this?

05:24.230 --> 05:28.850
Remember, any time that we successfully sign up to our application, we navigate to a different page

05:28.850 --> 05:30.260
inside of our app.

05:30.740 --> 05:36.020
So if we go and try to sign up right now, that should cause get initial prompts to be executed on the

05:36.020 --> 05:36.740
client.

05:37.310 --> 05:40.670
So to test that out, I'm going to go to ticketing dev off.

05:40.670 --> 05:41.390
Sign up.

05:42.250 --> 05:46.900
I'm then going to enter in a valid email and a valid password and then click on sign up.

05:47.760 --> 05:51.930
I then automatically navigated over while still inside the application.

05:51.930 --> 05:54.510
I did not do a full reload of the page.

05:54.630 --> 05:57.690
Instead, we just changed the HTML that was on the screen.

05:57.870 --> 06:02.340
So in this scenario, we see that get initial props was in fact executed.

06:03.120 --> 06:04.260
On the browser.

06:05.640 --> 06:10.710
So in total what this is what I'm really saying here is that if we are making requests from inside of

06:10.710 --> 06:13.530
a component, we don't have to worry about this whole domain issue.

06:13.800 --> 06:17.790
But if we are making a request from get initial props, we do have to worry about it.

06:18.150 --> 06:22.920
So if we are ever making a request from, say, inside of a component or inside of a hook like, let's

06:22.920 --> 06:26.660
say use request, which we had put together a little bit ago, we don't have to worry about in this

06:26.670 --> 06:32.010
domain stuff, but any request that is originating from inside of a get initial props, that's where

06:32.010 --> 06:34.830
we have to worry about this whole domain problem.

06:35.750 --> 06:35.860
Okay.

06:35.960 --> 06:37.850
So now we've narrowed this down a little bit more.

06:37.880 --> 06:41.630
We're going to come back the next video and we're going to figure out how we can tell whether we are

06:41.630 --> 06:45.920
on the client or the server by writing out some code inside of get initial props.

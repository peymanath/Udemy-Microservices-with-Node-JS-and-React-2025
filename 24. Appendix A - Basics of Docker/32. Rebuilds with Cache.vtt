WEBVTT

00:00.330 --> 00:01.110
In this section.

00:01.110 --> 00:04.930
There's one last quick thing that I want to mention about the Docker build process.

00:04.950 --> 00:10.020
This is an important thing to understand because it's what gives Docker so much performance whenever

00:10.020 --> 00:11.910
creating a new image.

00:12.420 --> 00:12.690
All right.

00:12.690 --> 00:14.550
So I'm looking at my Docker file right here.

00:14.740 --> 00:16.320
We have our three instructions.

00:16.320 --> 00:20.910
And as you very well know by this point, out of each one of these instructions, we essentially get

00:20.910 --> 00:22.020
a new image.

00:22.020 --> 00:28.290
So from Alpine, we get the Alpine image from the run instruction, we get a temporary image that gets

00:28.290 --> 00:32.160
fed into the CMD instruction, which gives us another temporary image.

00:32.160 --> 00:38.490
So at every structure instruction along the way, we have a file system snapshot and a startup command

00:38.490 --> 00:39.510
for that image.

00:39.660 --> 00:42.000
Now I want to show you something a little bit interesting.

00:43.260 --> 00:48.990
I'm going to go back over to my doctor file and on the run instruction I'm going to add a new one right

00:48.990 --> 00:49.760
underneath it.

00:49.770 --> 00:55.140
I'm going to say run apk, add dash dash update GCSE.

00:55.140 --> 00:59.130
So we're just installing a very random second dependency here.

00:59.130 --> 01:01.410
There's nothing important that you need to know about GCSE.

01:01.560 --> 01:03.810
We're just installing a second dependency.

01:04.110 --> 01:08.040
So I want you to think about what effect this is going to have on our overall flow.

01:08.280 --> 01:12.810
Essentially what it's going to do is add in a new instruction right here that's going to look a little

01:12.810 --> 01:14.010
something like this.

01:14.280 --> 01:16.140
We're going to see a new one.

01:16.970 --> 01:18.170
Let's see how quickly I can do this.

01:18.170 --> 01:22.790
Edit We're going to get our new instruction right there.

01:23.640 --> 01:26.820
It's going to be very similar to the image from the previous step.

01:28.080 --> 01:34.140
And it's going to have a new little program or folder or something inside of it of GCSE.

01:34.140 --> 01:38.820
So essentially it is identical to the previous image, but it has this extra little program that has

01:38.820 --> 01:39.990
been added in.

01:40.170 --> 01:41.820
Let's now flip over to our terminal.

01:41.820 --> 01:46.020
I want to rebuild our image and you're going to notice something kind of interesting.

01:46.350 --> 01:51.810
So back over at my terminal, I'm still inside of my Redis image directory and I'm going to build my

01:51.810 --> 01:55.650
image a second time by running Docker build dot.

01:57.920 --> 01:58.250
All right.

01:58.250 --> 02:02.210
So we're going to very quickly see some installation steps right here as it adds in that additional

02:02.210 --> 02:03.010
package.

02:03.020 --> 02:07.730
But I want to scroll up to the second instruction and I want to point out something interesting up there.

02:08.890 --> 02:12.720
So we still see step one of four right here where we do from Alpine.

02:12.730 --> 02:18.190
You'll notice that we do not see any of that like fetching image stuff that we saw the first time because

02:18.190 --> 02:20.380
we have already fetched the Alpine image.

02:20.380 --> 02:24.430
We've already downloaded it from the Docker hub, and so we don't have to go and download it a second

02:24.430 --> 02:25.060
time.

02:25.330 --> 02:29.770
Now, the interesting thing that I want to show you, and this is where Docker gets so much of its speed

02:29.770 --> 02:33.850
and performance from when building an image, you'll notice that during step number two right here,

02:33.850 --> 02:38.230
we do not see any of that stuff around running in blah, blah, blah.

02:38.260 --> 02:42.070
We don't see any fetch, we don't see any installation of dependencies.

02:42.070 --> 02:45.880
Instead, we see a single message that says using cache.

02:46.150 --> 02:53.350
So what this means is that Docker has realized that from the previous step to step number two, nothing

02:53.350 --> 02:57.400
has changed from the last time that we ran Docker build.

02:57.730 --> 03:03.010
In other words, it knows without a doubt that it's going to get the same image from the previous step

03:03.010 --> 03:06.130
because it's the exact same instruction that it was before.

03:07.060 --> 03:13.780
And then for step number two, Docker knows that it has already executed the command apk add update

03:13.780 --> 03:14.140
Redis.

03:14.170 --> 03:16.960
It's already generated an image out of that step.

03:16.960 --> 03:22.450
This image right here and this image has been cached and stored on your local machine.

03:22.540 --> 03:28.210
So rather than going through the process of creating another container out of the alpine image and running

03:28.240 --> 03:33.850
apk add update redis inside that container a second time, it says, You know what, I've already done

03:33.850 --> 03:34.480
this work.

03:34.480 --> 03:38.410
I'm just going to use the image that I generated during the previous step again.

03:39.190 --> 03:43.660
But then after that, Docker correctly sees that there is a new command in play.

03:44.350 --> 03:45.900
And this is not an update, right?

03:46.090 --> 03:47.550
It's an update, TCC.

03:47.560 --> 03:50.620
It sees that there's a new command right here, a new instruction in play.

03:50.620 --> 03:55.030
And so from this point on, it decides, well, you know what, something has changed during the build

03:55.030 --> 03:55.630
process.

03:55.630 --> 03:57.580
We probably can't use our cache anymore.

03:57.580 --> 04:03.640
And from here on out, we have to go through that process of generating a container and running a command

04:03.640 --> 04:07.840
inside the container and taking the snapshot and going through all that stuff again.

04:08.560 --> 04:15.760
Now, the interesting thing about this is that it has now executed run APK Ad GCSE and it has generated

04:15.760 --> 04:18.210
an image out of that instruction right there.

04:18.220 --> 04:25.300
So if we now run Docker, build a third time without making any changes to our Docker file, Docker

04:25.300 --> 04:28.960
is going to correctly see we have made no changes to the Docker file.

04:28.960 --> 04:30.940
None of these steps have changed whatsoever.

04:30.940 --> 04:36.730
And so it's going to use the cached or saved versions of each of these images in building this new one.

04:36.880 --> 04:39.310
Let's do that right now and you're going to see it in action.

04:39.310 --> 04:42.370
So we're going to do Docker, build it a third time.

04:43.470 --> 04:46.550
And you'll notice that bill process went extremely quickly.

04:46.560 --> 04:49.650
So Docker correctly realised that it's already downloaded Alpine.

04:49.650 --> 04:53.460
It's realized that it already ran the run command on top of Alpine.

04:53.460 --> 04:57.930
So it's using the cache version, that image, it knows it's already done the GC, so it's using the

04:57.930 --> 05:00.660
cache version of that and it knows that it's already executed.

05:00.660 --> 05:01.110
Command Right.

05:01.110 --> 05:03.840
A server on top of the output of the GC step.

05:03.840 --> 05:05.790
And so it's using the cache there again.

05:06.000 --> 05:11.280
So the lesson to learn here is that any time that we make a change to our Docker file, we're going

05:11.280 --> 05:16.560
to have to only rerun the series of steps from the change line on down.

05:16.680 --> 05:22.590
As a quick example of that, let's try taking this GC line right here and I'm going to cut it and put

05:22.590 --> 05:24.360
it right above Redis.

05:25.020 --> 05:30.870
So even though we're still taking the Alpine image and adding GC to it and adding Redis to it, the

05:30.870 --> 05:33.120
series of steps have changed.

05:33.120 --> 05:39.970
And so Docker is going to say, okay, well this time we're taking Alpine and first adding in GC scene.

05:40.110 --> 05:45.990
So it will use the cache version of Alpine, but it's not going to have a cached version of the GC ad

05:45.990 --> 05:52.440
to use because the last time that it ran that it added GC only after installing Redis.

05:52.440 --> 05:56.880
So essentially the order of operations is different, so the cache cannot be used.

05:57.030 --> 06:03.180
So I'm going to save this file after moving GC around and we'll try rebuilding our image for a fourth

06:03.180 --> 06:03.750
time.

06:04.380 --> 06:08.880
So I'll do Docker build dot, I'll run that and now you're going to see.

06:08.880 --> 06:13.710
Yep, it has to go through that installation process all over again because the order of operations

06:13.710 --> 06:14.460
have changed.

06:14.460 --> 06:20.880
However, it only needs to rerun the steps from the change line on down, and so we have to rerun the

06:20.880 --> 06:27.090
entire ad cc we rerun the entire ad redirects and we have to rerun the command server.

06:27.810 --> 06:28.260
All right.

06:28.260 --> 06:33.090
So again, if you are not changing your Docker file, that's great because it means that we can use

06:33.090 --> 06:34.800
cache versions for building the image.

06:34.800 --> 06:39.960
But the real lesson to learn here is that if you ever expect to have to change your Docker file, you

06:39.960 --> 06:43.530
always want to put those changes like as far down as possible.

06:43.530 --> 06:47.940
Now for right now, that might sound really confusing, but we're going to very quickly go through another

06:47.940 --> 06:52.800
example in a couple of videos where you'll see that by changing the order of operations inside of our

06:52.800 --> 06:57.750
Docker file can dramatically change how long it takes to rebuild our image.

06:58.230 --> 06:58.620
All right.

06:58.620 --> 07:01.500
So a quick pause right here and we'll catch you in the next section.

WEBVTT

00:00.480 --> 00:05.070
In the last section, we were able to successfully build our image and then start up a container based

00:05.070 --> 00:05.530
on it.

00:05.550 --> 00:11.490
We saw the message listing on for 8080, but when we actually tried to visit localhost, 80, 80 inside

00:11.490 --> 00:13.830
the browser, we got a pretty nasty error message.

00:13.830 --> 00:16.650
So let's figure out what went wrong and how to fix it.

00:17.820 --> 00:18.360
All right.

00:18.360 --> 00:21.210
So here's a diagram of what's happening right now.

00:21.240 --> 00:27.420
Our browser is making a request to local host 8080, which is essentially a reference to your current

00:27.420 --> 00:34.710
machine on Port 8080 by default, no traffic that is coming into your computer or into your local host

00:34.710 --> 00:37.380
network is routed into the container.

00:37.530 --> 00:43.620
So the container essentially has its own isolated set of ports that can receive traffic.

00:43.620 --> 00:49.710
But by default, no incoming traffic to your computer is going to be directed into the container in

00:49.710 --> 00:55.950
order to make sure that any request from either your computer or some outside computer will be redirected

00:55.950 --> 00:56.910
into the container.

00:56.910 --> 01:00.180
We have to set up a explicit port mapping.

01:01.320 --> 01:07.080
A port mapping essentially says any time that someone makes a request to a given port on your local

01:07.080 --> 01:13.530
network, take that request and automatically forward it to some port inside the container.

01:13.650 --> 01:18.960
So in other words, if anyone makes a request to local host 88, we take that request automatically

01:18.960 --> 01:25.140
forward it into the container on Port 8080 where the node application can then receive it and process

01:25.140 --> 01:27.330
the request and eventually respond to it.

01:27.810 --> 01:32.970
Now, one thing that I want to make sure is really clear right now from the get go, this is only talking

01:32.970 --> 01:35.190
about incoming requests.

01:35.460 --> 01:41.520
Your Docker container can by default make requests on its own behalf to the outside world.

01:41.670 --> 01:46.110
We've already seen that in action any time that you've been installing a dependency.

01:46.830 --> 01:53.760
When we ran NPM install during the Docker build process just a moment ago and PM reaches to the outside

01:53.760 --> 01:59.790
world, it reaches out across the internet and so there's no limitation by default on your containers

01:59.790 --> 02:01.380
ability to reach out.

02:01.380 --> 02:07.080
It's strictly a limitation on the ability for incoming traffic to get in to the container.

02:07.620 --> 02:12.780
So in order to set up this mapping, in order to kind of forward this traffic to a specific port inside

02:12.780 --> 02:18.150
the container, we're going to make a slight adjustment to the way in which we start the container up

02:18.150 --> 02:21.240
or specifically the Docker run command.

02:21.690 --> 02:23.340
So this is not a change.

02:23.340 --> 02:25.050
So we're going to make to the Docker file.

02:25.050 --> 02:28.380
We do not set up port forwarding inside the Docker file.

02:28.410 --> 02:32.130
The port forwarding stuff is strictly a runtime constraint.

02:32.130 --> 02:37.830
In other words, it's something that we only change when we run a container or start a container up.

02:39.410 --> 02:43.640
So here's what we're going to do to set up Docker, run with port mapping.

02:43.640 --> 02:46.400
We're going to add on a dash P flag.

02:46.400 --> 02:50.120
The syntax overall is Docker run, then dash P.

02:50.120 --> 02:57.620
Then we're going to specify that any incoming traffic on our local network to this port right here should

02:57.620 --> 03:02.060
be automatically forwarded on to this port inside the container right here.

03:02.060 --> 03:06.170
And notice how there's a separation between these two ports or these two numbers of a colon.

03:06.410 --> 03:11.780
And then as usual, after that, we're going to specify either the image ID or the image name, which

03:11.780 --> 03:13.070
is what we are now using.

03:14.030 --> 03:17.450
So let's flip over to our terminal and we're going to give this a quick shot.

03:18.140 --> 03:21.740
I'm going to first stop the running container by pressing control c.

03:22.720 --> 03:25.390
And then I'm going to start the container back up.

03:25.390 --> 03:27.940
But this time I'm going to set up some port mapping.

03:28.030 --> 03:36.100
So I'll say any time a request comes in to 80 to 80 on my local machine, redirect it to port 80, 80

03:36.100 --> 03:41.710
inside the container, and then I'll make sure that I still specify the image that I want to use for

03:41.710 --> 03:44.290
this container as my docker ID.

03:44.320 --> 03:50.710
You'll put whatever yours is right there, simple web and I'm going to get that on to just one line

03:50.710 --> 03:51.370
like so.

03:53.170 --> 03:53.470
Okay.

03:53.470 --> 03:55.180
So let's start this now.

03:55.180 --> 04:00.010
From the outside, it looks like everything is still identical to how it was before, but if you flip

04:00.010 --> 04:05.380
on over to your browser, open up a new tab again and go to local host 8080.

04:05.380 --> 04:07.000
You'll very quickly see the text.

04:07.000 --> 04:08.800
Hi there, appear on the screen.

04:09.160 --> 04:12.910
This is the response that we would expect to see from the running node application.

04:12.910 --> 04:17.500
So that means that we are now correctly forwarding incoming requests into the container.

04:17.710 --> 04:22.210
The node application is processing the request and then sending a response back out.

04:22.750 --> 04:23.740
So that's pretty much it.

04:23.740 --> 04:26.950
That is port mapping in a nutshell.

04:27.670 --> 04:31.210
Now, very quickly, one last little thing that I want to show you, because this will be done very

04:31.210 --> 04:37.480
frequently on real projects, the port from the source machine or the source network that we are mapping

04:37.480 --> 04:43.360
from to the port that we are mapping to inside the container do not have to be identical.

04:43.360 --> 04:50.020
So we could very easily say, hey, any time that a request comes into local host 5000, redirect that

04:50.020 --> 04:52.750
request to 8080 inside the container.

04:52.750 --> 04:57.820
And like I said, this is actually something that we're going to do quite frequently in production applications.

04:58.920 --> 05:05.700
So now this is essentially saying, okay, browsers make you request a 5000 redirect request to 8080

05:05.700 --> 05:06.600
inside the container.

05:06.600 --> 05:09.540
Again, these two ports do not have to be identical.

05:10.230 --> 05:12.870
So let's try doing that again with the Docker run command.

05:13.260 --> 05:19.530
I'm going to stop the thing by pressing control C and then we'll do Docker run dash P and I'll say that

05:19.530 --> 05:25.260
I want to map port 5000 on my local network to 8080 inside the container.

05:25.950 --> 05:28.650
And then I'll do Steven Grider Simple Web.

05:30.150 --> 05:30.370
Okay.

05:30.400 --> 05:32.580
It looks like everything started up successfully.

05:32.880 --> 05:39.240
Now, if I go back over to my browser and I try to refresh local host Colin 8080, I'll very quickly

05:39.240 --> 05:45.090
see an error message, but if I instead go to local host 5000, well there's the node server.

05:45.090 --> 05:52.080
It is now taking traffic or incoming requests to local those 5000 and redirecting them to 8080 inside

05:52.080 --> 05:52.890
the container.

05:53.430 --> 05:58.680
Now last thing you might be kind of curious about, this is kind of an obvious, but I'm going to say

05:58.680 --> 06:00.420
simultaneously a silly question.

06:00.420 --> 06:02.850
Can we change the port inside the container?

06:02.880 --> 06:09.000
Well, yes, of course we can change this to be 6000, 7000, whatever you want it to be.

06:09.450 --> 06:15.060
Just if you change the port inside the container, you need to make sure that your actual web server

06:15.060 --> 06:15.750
application.

06:15.750 --> 06:22.480
So inside my index file, we specified that our node application should listen on Port 8080.

06:22.500 --> 06:26.130
So if you're going to change the target port inside the container, well, of course, you've got to

06:26.130 --> 06:30.360
make sure that you change the port that your application is listening to as well.

06:30.480 --> 06:34.710
You would have to change this to 6000 or 7000 or whatever it might be.

06:36.000 --> 06:36.660
So that's it.

06:36.660 --> 06:39.150
That is port mapping in a nutshell.

06:39.180 --> 06:44.910
The one big thing to remember is that we have to specify it at runtime, not inside of the Docker file.

06:45.750 --> 06:49.170
So we've got one more step towards success.

06:49.170 --> 06:52.700
We are actually able to visit our running application inside the browser.

06:52.710 --> 06:57.530
So like I said, we were going to run into a handful of little errors along the way.

06:57.540 --> 07:05.520
We saw a case in which we were not copying over the packaged JSON file we saw using a bad base image

07:05.520 --> 07:08.000
and we also saw a lack of port forwarding.

07:08.010 --> 07:12.360
Again, these are all little things that I kind of expect that you'll see as soon as you start using

07:12.360 --> 07:14.370
Docker on your own personal project.

07:14.640 --> 07:20.340
Now, even though our application is successfully running, there is one last little thing that I want

07:20.340 --> 07:20.880
to point out.

07:20.880 --> 07:23.760
So we're going to go over one last little fix in the next section.

07:23.760 --> 07:26.010
So quick break and I'll see you in just a minute.

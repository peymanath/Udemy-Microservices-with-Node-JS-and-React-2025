WEBVTT

00:01.080 --> 00:04.500
We're now successfully able to visit our running Web application site, the browser.

00:04.500 --> 00:07.290
But there's one last little thing that I want to point out.

00:07.350 --> 00:11.820
I'm going to start my container up using the image that we've already built, but this time I'm going

00:11.820 --> 00:16.920
to start up a shell inside the container so that we can do a little bit of debugging inside there.

00:17.040 --> 00:24.000
Remember that we can start up a shell inside of most alpine based containers by running Docker run dash

00:24.000 --> 00:32.850
i t and I'll put down my container name of Steven Grider Simple Web, and then I will override the Default

00:32.850 --> 00:35.000
Startup Command with S-H.

00:35.040 --> 00:37.550
Remember, this is a reference to the Shell program.

00:37.560 --> 00:42.090
It will start up a shell that we can type commands into inside the container.

00:42.120 --> 00:45.210
Now you'll notice that I did not specify a port mapping here.

00:45.210 --> 00:47.580
It's because we are not going to actually start up the server.

00:47.580 --> 00:51.960
I just want to attempt to look at the files and folders inside the container.

00:52.900 --> 00:58.120
So I'll run that and then we'll get a command prompt based inside of the root directory of the container.

00:58.480 --> 01:03.370
Now, inside of here, I'm going to print out all the available files and folders with LRS.

01:04.600 --> 01:10.930
So inside of here, you'll notice that when we did that copy operation, we copied into the root directory

01:10.930 --> 01:12.970
or the root folder of the container.

01:12.970 --> 01:18.970
And so in this route directory we can see the Docker file, a package lock JSON file which is automatically

01:18.970 --> 01:23.140
generated by NPM package, JSON indexed JS.

01:23.170 --> 01:27.070
And all of our installed dependencies were placed into this node modules folder.

01:27.070 --> 01:32.080
And again, these were all placed into the root directory of this container.

01:32.710 --> 01:38.620
Now this is definitely not the best practice and the reason for that is that if we happen to have any

01:38.620 --> 01:44.470
files or folders that conflict with the default folder system, like if we have a folder called var

01:44.470 --> 01:50.830
or root or run or lib, super, super likely for us to have a folder called Lib inside of our project,

01:50.830 --> 01:57.190
we might accidentally overwrite some existing files or folders inside the container, which is definitely

01:57.190 --> 01:58.150
not ideal.

01:58.480 --> 02:01.240
So we're going to make a little change to our Docker file.

02:01.240 --> 02:06.490
And rather than copying everything directly into the root project directory, we're actually going to

02:06.490 --> 02:09.790
copy everything into kind of a nested directory instead.

02:10.120 --> 02:16.000
Now, rather than just changing the copy command inside of our Docker file and saying, oh yeah, copy

02:16.000 --> 02:21.460
it into like some application folder or something like that, there's actually an instruction that we

02:21.460 --> 02:26.560
can use inside the Docker file that is specifically meant to address this whole issue right here of

02:26.560 --> 02:30.480
accidentally overwriting files or folders by copying into a root directory.

02:30.490 --> 02:33.070
So let's take a look at what the instruction is.

02:34.520 --> 02:41.480
So we can add the work order or work directory instruction into the Docker file and then pass a reference

02:41.480 --> 02:43.160
to a folder to it.

02:43.970 --> 02:50.570
Then any following commands or any following instructions so we add to our Docker file will be executed

02:50.570 --> 02:52.670
relative to this folder.

02:52.820 --> 02:59.150
So in other words, if we add the work dir and then a folder above the copy instruction right here,

02:59.150 --> 03:04.730
it will make sure that we only execute or simply it'll make sure that when we actually do the copy instruction

03:04.730 --> 03:06.400
it won't copy it into the work directory.

03:06.410 --> 03:11.510
Seeing the root directory, it'll copy it into the directory that we have specified as the working directory

03:11.510 --> 03:12.200
instead.

03:12.560 --> 03:14.270
So let's try doing that right now.

03:14.960 --> 03:21.710
I'm going to add in an instruction of work dir and then we're going to use a folder of slash user slash

03:21.710 --> 03:22.310
app.

03:22.310 --> 03:25.070
So let's say slash user slash app.

03:25.400 --> 03:29.960
If this folder does not exist inside the container, it will be automatically created for us.

03:29.990 --> 03:33.500
Now, you might be curious as to why I'm using a user slash app.

03:33.590 --> 03:39.680
Well, to be honest, in the Node.js world, it doesn't make a tremendous difference where you put your

03:39.680 --> 03:42.650
application into in a Linux based operating system.

03:42.650 --> 03:47.300
There definitely are places you don't want to put it, but at the end of the day, the user folder is

03:47.300 --> 03:48.950
a safe place to put your application.

03:48.950 --> 03:53.890
It's specified as the location for all of user home directories.

03:53.900 --> 03:57.090
Essentially, it's an okay place for us to put our application.

03:57.110 --> 04:01.700
Now, as I say that there's definitely a lot of Linux diehards out there who would probably disagree

04:01.700 --> 04:06.290
with me and they might say, Oh no, you should put this into VR or you should put it into the home

04:06.290 --> 04:07.150
directory instead.

04:07.160 --> 04:11.030
So there is some disagreement out there on where the best place is for your application.

04:11.030 --> 04:15.650
But I can just about guarantee you that if you put it into user slash app, you're probably going to

04:15.650 --> 04:16.520
be okay.

04:17.850 --> 04:18.040
Okay.

04:18.270 --> 04:23.430
So now we've added in the worked instruction, I'm now going to save the Docker file and then we'll

04:23.430 --> 04:24.790
flip back over to our terminal.

04:24.810 --> 04:31.110
I'll exit the running container by typing in exit and then we're going to make sure that we first rebuild

04:31.110 --> 04:33.960
our container and then we will try to relaunch it.

04:34.140 --> 04:38.130
So I'll do a rebuild with Docker build dot.

04:39.090 --> 04:40.170
Let's not forget to tag it.

04:40.170 --> 04:47.510
So Docker, build your docker ID slash, simple web and then a dot.

04:47.520 --> 04:48.240
There we go.

04:49.680 --> 04:51.090
So we're going to rebuild it.

04:51.120 --> 04:56.310
Now, one thing that you'll notice is really interesting, because we made a change to an instruction

04:56.310 --> 04:58.770
above the copy and NPM install.

04:58.800 --> 05:04.870
Everything after that instruction has to rerun from scratch, so we cannot use any cache versions.

05:04.890 --> 05:10.200
In other words, the NPM install command has to run again and reinstall all of our dependencies because

05:10.200 --> 05:13.190
we cannot use the cached version of that step.

05:15.230 --> 05:16.440
So we got our output here.

05:16.460 --> 05:18.600
Let's try starting up our container again.

05:18.620 --> 05:22.820
I'll first start it up in normal mode and try to visit inside my browser.

05:22.820 --> 05:30.200
So we'll do a Docker run dash P to set up a port mapping and we'll map 80, 80 to 80, 80.

05:30.530 --> 05:36.260
And then the container that I want to run is Steven Grider slash simple web.

05:39.170 --> 05:43.130
So we'll run that and then I'll go back over to my browser.

05:43.760 --> 05:50.140
I'll try to visit localhost 80, 80 and yeah, it looks like we're good to go.

05:50.150 --> 05:51.770
I can refresh the page.

05:51.890 --> 05:57.200
And if we also try to start up a shell inside the container, we'll see that all of our project directories

05:57.200 --> 06:00.390
or all of our project files are no longer in the root directory.

06:00.410 --> 06:07.640
To do so, we can either rerun the Docker run command with the T and S attached to it, or we can use

06:07.640 --> 06:09.470
that Docker exec command.

06:09.500 --> 06:14.420
You'll recall we can use Docker exec to start up a second process inside of a running container.

06:14.600 --> 06:17.600
Let's try doing it that way, just for a little bit of variety.

06:18.560 --> 06:21.170
So I will open up a second terminal window.

06:21.710 --> 06:26.120
I'll get the idea of that running container by using Docker is.

06:26.270 --> 06:28.010
So here's the ID right here.

06:28.340 --> 06:34.490
And then we can attach to that container and start up a shell inside of it by using Docker exec, dash

06:34.510 --> 06:40.670
it the ID of the container and then the program that we want to run inside of it, which in this case

06:40.670 --> 06:41.660
is Shell.

06:41.840 --> 06:47.630
Don't forget the it right here is to attach standard in and a nice looking terminal to the shell that

06:47.630 --> 06:48.410
starts up.

06:49.310 --> 06:55.430
So I'll run that and you'll notice that we enter directly in to the user slash app folder because we

06:55.430 --> 07:00.230
had set up that working directory previously that worked for instruction right here.

07:00.230 --> 07:06.260
Not only affects commands that are issued later on inside of our Docker file, it also affects commands

07:06.260 --> 07:10.820
that are executed inside the container later on through the Docker exec command.

07:12.120 --> 07:18.180
So if I now do an LZ right here, I'll see all of my project files and folders nicely isolated inside

07:18.180 --> 07:24.750
of this single file, and I can change back to my root directory by doing CD forward slash, print out

07:24.750 --> 07:30.000
all the files and folders there with LZ and I'll see that I do not have any possible conflicts going

07:30.000 --> 07:30.420
on.

07:30.420 --> 07:36.660
We have nicely spaced our application or kind of isolated our application into this folder right here.

07:37.110 --> 07:37.530
All right.

07:37.530 --> 07:38.490
So that's pretty much it.

07:38.490 --> 07:39.540
Looking pretty good.

07:40.470 --> 07:44.370
Now, believe it or not, there is one last little thing that I want to look at.

07:44.370 --> 07:49.740
So let's do one more quick break and we'll come back in the next section and do one quick, quick,

07:49.740 --> 07:50.610
last little thing.

07:50.610 --> 07:51.930
So I'll see you in just a minute.

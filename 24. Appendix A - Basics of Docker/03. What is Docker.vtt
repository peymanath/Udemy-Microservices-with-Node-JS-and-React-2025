WEBVTT

00:00.570 --> 00:03.990
In the last section, we tried to answer the question of why use Docker?

00:03.990 --> 00:09.210
And we eventually said that we use Docker because it makes it really easy to install and run new software

00:09.210 --> 00:10.200
on our computer.

00:10.560 --> 00:15.480
We're not going to try to answer the other big question here, which is what is Docker?

00:15.510 --> 00:18.750
Well, this question is a lot more challenging to answer.

00:18.810 --> 00:24.660
Any time you see someone refer to Docker in a blog post or an article or a forum or wherever it might

00:24.660 --> 00:30.960
be, they're kind of making reference to an entire ecosystem of different projects, tools and pieces

00:30.960 --> 00:31.800
of software.

00:31.920 --> 00:38.100
So if someone says, Oh yeah, I use Docker on my project, they might be referring to Docker client

00:38.100 --> 00:39.300
or Docker server.

00:39.300 --> 00:42.000
They might be referring to Docker Hub or Docker Compose.

00:42.030 --> 00:48.780
Again, these are all projects, tools, pieces of software that come together to form a platform or

00:48.780 --> 00:53.640
ecosystem around creating and running something called containers.

00:53.910 --> 00:58.080
And so your immediate question might be OC, well, what's a container?

00:58.320 --> 01:01.980
That's a good question, and that's a question that we're going to be trying to answer throughout this

01:01.980 --> 01:03.120
entire course.

01:03.300 --> 01:09.810
Just a moment ago, when I ran that command at my terminal of Docker run Redis, it went through a little

01:09.810 --> 01:14.520
series of actions behind the scenes, and we're going to examine that entire series of actions very

01:14.520 --> 01:15.540
closely over time.

01:15.540 --> 01:19.200
But right now, let me give you two important pieces of terminology.

01:19.290 --> 01:25.020
When I ran that command, something called the Docker CLI reached out to something called the Docker

01:25.020 --> 01:29.070
Hub, and it downloaded a single file called An Image.

01:29.370 --> 01:35.070
An image is a single file containing all the dependencies and all the configuration required to run

01:35.070 --> 01:37.080
a very specific program.

01:37.080 --> 01:41.580
For example, Redis, which is what the image that I just downloaded was supposed to run.

01:42.180 --> 01:47.640
This is a single file that gets stored on your hard drive, and at some point in time you can use this

01:47.640 --> 01:50.130
image to create something called a container.

01:50.910 --> 01:56.730
A container is an instance of an image, and you can kind of think of it as being like a running program.

01:57.360 --> 02:02.700
We're going to go into great detail over time, over behind her to learn exactly how a container works.

02:02.700 --> 02:03.270
Exactly.

02:03.270 --> 02:09.060
But right now, all we really need to understand is that a container is a program with its own isolated

02:09.060 --> 02:10.770
set of hardware resources.

02:10.770 --> 02:16.740
So it kind of has its own little set or its own little space of memory as its own little space of networking

02:16.740 --> 02:20.580
technology and its own little space of hard drive space as well.

02:21.990 --> 02:28.230
So I didn't really answer the question here of what Docker is, but we did learn at least that a reference

02:28.230 --> 02:32.100
to Docker is really talking about a whole collection of different projects and tools.

02:32.100 --> 02:37.320
And we also picked up two important pieces of terminology a Docker image and a container.

02:37.740 --> 02:41.970
Now these images and containers are the absolute backbone of what you and I are going to be working

02:41.970 --> 02:43.560
with throughout the rest of this course.

02:43.560 --> 02:45.060
So let's take a quick pause right now.

02:45.060 --> 02:48.390
We're going to come back the next section, and we're going to start talking a little bit more about

02:48.390 --> 02:50.580
how we work with images and containers.

02:50.580 --> 02:52.800
So a quick break and I'll see you in just a minute.

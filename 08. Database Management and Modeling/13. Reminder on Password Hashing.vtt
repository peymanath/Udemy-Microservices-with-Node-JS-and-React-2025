WEBVTT

00:00.760 --> 00:04.900
In this video, we're going to start working on hashing the user's password before we send it off to

00:04.900 --> 00:06.280
our database to be saved.

00:06.310 --> 00:11.170
In this video, I want to give you a quick reminder on why we hash passwords in general and how the

00:11.170 --> 00:12.550
entire process works.

00:12.550 --> 00:16.720
If you are already familiar with password hashing, go ahead and skip this video and take a look at

00:16.720 --> 00:18.430
the implementation in the next one.

00:18.430 --> 00:20.440
Otherwise, stick around and let's get to it.

00:21.120 --> 00:21.450
All right.

00:21.450 --> 00:24.150
So in this diagram right here, I'm showing you a bad approach.

00:24.150 --> 00:28.170
This is something that we are currently doing inside of our app, but is something that we do not want

00:28.170 --> 00:28.740
to do.

00:28.740 --> 00:31.500
So we need to replace our current implementation.

00:32.140 --> 00:37.300
So at present our React application or right now technically postman, we're making a request to sign

00:37.300 --> 00:40.690
up to our app and we are including an email and a password.

00:40.960 --> 00:47.500
At present we are creating a new user document out of that, using the email of test at test and a password

00:47.500 --> 00:49.030
of whatever gets sent.

00:49.030 --> 00:51.010
In this case, we're singing its word pass.

00:51.850 --> 00:55.240
So we create a new user document and persist that to MongoDB.

00:55.690 --> 01:00.160
So our password is sitting inside of this user's collection in plain text.

01:00.490 --> 01:06.250
This is a very bad approach because if anyone ever got access to our MongoDB database, they would see

01:06.250 --> 01:08.830
all the emails and passwords of our users.

01:09.980 --> 01:13.850
Now we don't really care about someone necessarily logging into our application.

01:13.880 --> 01:19.010
It's more that if a user or if some malicious person gets access to all these email and passwords,

01:19.010 --> 01:24.700
our users might use the same email and password combination to log on to many other services.

01:24.710 --> 01:31.160
And so a malicious user could take test at test and word pass and then go and try to log on to my banking

01:31.160 --> 01:34.220
website and they might possibly successfully log in.

01:34.850 --> 01:40.730
So again, under no scenario, under no circumstance do we ever store our passwords in plain text as

01:40.730 --> 01:41.720
we are currently doing.

01:42.140 --> 01:43.310
So how are we going to fix this?

01:43.340 --> 01:45.740
Well, we're going to introduce password hashing.

01:46.370 --> 01:51.260
This is a two step process that spans over the sign up and sign in flows.

01:51.590 --> 01:53.910
So let's first focus on what occurs during sign up.

01:53.930 --> 01:56.150
This is what we are about to implement right now.

01:56.760 --> 01:59.730
So once again, our React app is going to make requests to sign up.

02:00.360 --> 02:04.710
And maybe once again, it's an email of test at test and a password of word pass.

02:06.360 --> 02:08.930
We are going to take that password and hash it.

02:08.940 --> 02:12.180
So we're going to hash the password word pass.

02:12.330 --> 02:17.760
When we hash, this string is going to produce a unique series of characters that are unique just for

02:17.760 --> 02:20.340
that word right there or that very particular string.

02:20.730 --> 02:25.800
So the word or the string of word pass might produce this hash string right here.

02:26.070 --> 02:30.060
If you want to get more information about the hashing process, I encourage you to look it up online.

02:30.060 --> 02:33.870
Right now, I'm just giving you a very quick overview on what we're going to be doing.

02:34.890 --> 02:39.750
We then take this hash password and store it inside of our database instead of the original plaintext

02:39.750 --> 02:40.200
one.

02:40.650 --> 02:45.210
So now we only have the email and the hash password, not the original one.

02:46.630 --> 02:49.220
So then we go ahead and create the new user.

02:49.240 --> 02:52.660
Really, let's say this diagram should be a little bit closer to that right there.

02:53.820 --> 02:58.250
So now inside of our database, we've only got the hash password with the hash passwords.

02:58.260 --> 03:03.330
There is no way or no easy way, we should say, to somehow figure out what the original password was.

03:03.570 --> 03:09.240
So if some malicious user somehow got access to this email password combination, in theory, hopefully

03:09.240 --> 03:11.100
there would not be much damage done.

03:11.340 --> 03:15.560
Now, again, there are scenarios where even a hash password can have some negative consequences.

03:15.570 --> 03:19.110
And in general, we don't want anyone getting access to our data at all.

03:19.110 --> 03:24.720
But if it's some malicious user does get access to this hash password, it's not as big a problem.

03:27.080 --> 03:28.550
Well, that's just the signup process.

03:28.550 --> 03:31.790
How do we actually make use of the hash password at some point in time in the future?

03:32.270 --> 03:36.410
Well, let's imagine the sign in flow that we're going to be implementing very shortly.

03:36.740 --> 03:40.850
So once again, maybe our React application sends a request to sign into our app.

03:41.270 --> 03:44.210
When a user signs in, they're going to send us their email and password.

03:44.940 --> 03:50.300
So as soon as we get that, we are going to hash the password in the exact same way that we did when

03:50.310 --> 03:51.990
user signed up initially.

03:52.620 --> 03:56.580
So we'll hash the password and we once again that get that same identical string.

03:57.520 --> 04:02.380
We're then going to take a look and try to find a user saved inside of our database with the same email

04:02.380 --> 04:04.140
as the one that was just submitted.

04:04.150 --> 04:04.900
Test, that test.

04:06.130 --> 04:07.750
So we'll find that record right there.

04:08.290 --> 04:14.020
Now, at this point in time, we've got the stored hashed password and we've got the hash version,

04:14.020 --> 04:17.140
version of the password that the user just applied to us.

04:17.620 --> 04:22.510
We are going to check and see if the hash passwords are equal to each other.

04:22.840 --> 04:27.730
If they are equal to each other, that means that the user must have supplied the correct password.

04:28.460 --> 04:32.810
And then at that point in time, we're going to say, okay, you are or you have supplied some valid

04:32.810 --> 04:33.740
login credentials.

04:33.740 --> 04:36.560
We now consider you to be signed into our application.

04:37.300 --> 04:37.930
So that's it.

04:37.930 --> 04:38.770
That's the flow.

04:39.190 --> 04:43.150
Now, I went through this really quickly, so if any of this is still kind of confusing, I would encourage

04:43.150 --> 04:44.740
you to do a little bit of research.

04:44.770 --> 04:48.160
Again, I'm just giving you a quick reminder on how the stuff is working.

04:48.190 --> 04:51.490
Hopefully you have seen password hashing at least once in the past before.

04:52.650 --> 04:53.920
Well, let's take a pause right here.

04:53.940 --> 04:57.840
Now that we got this review in place, we're going to start implementing the password hashing flow in

04:57.840 --> 04:58.770
the next video.

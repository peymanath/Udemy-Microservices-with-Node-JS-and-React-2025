WEBVTT

00:00.630 --> 00:05.130
In this video, we're going to start to implement password hashing during the signup process.

00:05.400 --> 00:07.890
Now, there are many different ways of implementing this.

00:07.890 --> 00:12.990
And if you take a look online at some different tutorials on how to implement password hashing while

00:12.990 --> 00:17.550
using MongoDB and Mongoose, you're going to see that a lot of them recommend that you place all this

00:17.550 --> 00:21.490
password hashing logic directly into your user model file.

00:21.510 --> 00:26.490
So in other words, inside of our models user points, we would write out a lot of code to hash the

00:26.490 --> 00:28.710
password and then store it along with the user.

00:29.130 --> 00:34.200
Now we are going to do something similar to that, but we're going to break our logic up here into two

00:34.200 --> 00:35.250
separate files.

00:35.430 --> 00:41.340
We're going to make a separate file or more specifically, a separate class that is just responsible

00:41.400 --> 00:43.800
for taking a string and hashing it.

00:44.460 --> 00:49.680
We're also going to have inside that class a function that's going to compare to different hash strings

00:49.680 --> 00:50.370
as well.

00:50.790 --> 00:55.290
So the majority of the actual hashing logic that actual implementation is going to be in this separate

00:55.290 --> 01:00.180
file, in this separate class, and then we're going to use that inside of our user model file.

01:00.510 --> 01:05.850
The reason we're doing this is to just keep our user model file a little bit cleaner, because right

01:05.850 --> 01:09.600
now there's a lot of stuff already inside of here and a lot of the stuff is pretty confusing.

01:09.600 --> 01:12.740
So I want to limit the complexity of this file as much as possible.

01:12.750 --> 01:16.620
That's why we are going to place a lot of this hashing stuff in another location.

01:17.040 --> 01:17.910
So let's get to it.

01:17.910 --> 01:21.900
Let me show you how we're going to build out this password hashing stuff in a separate location.

01:23.660 --> 01:27.830
And by CRC directory, I'm going to make a new folder called Services.

01:28.220 --> 01:29.890
There's probably a better name for this folder.

01:29.900 --> 01:34.400
I like to create a services directory for just a lot of kind of general purpose things that are floating

01:34.400 --> 01:34.610
around.

01:34.610 --> 01:39.140
My application again, probably could think of a better name, but this will work for right now.

01:39.560 --> 01:42.520
Inside there, I'm going to make a new file called Password.

01:42.830 --> 01:43.560
It's.

01:44.950 --> 01:49.660
And then inside of that, I'll export a new class called Password.

01:51.770 --> 01:56.420
And I'm going to give this last password to different static methods.

01:56.690 --> 01:58.040
So I'm going to say static.

01:58.680 --> 01:59.610
To hash.

02:00.850 --> 02:08.530
We're going to receive a password as a string and I'll make a separate method that's also static called

02:08.530 --> 02:09.190
compare.

02:09.950 --> 02:12.230
This is going to take a stored password.

02:14.320 --> 02:17.470
That is a string and a supplied password.

02:18.070 --> 02:19.090
That is a string.

02:22.100 --> 02:24.560
Quick reminder on what a static method is.

02:24.590 --> 02:28.520
Static methods are methods that we can access without creating an instance of the class.

02:29.230 --> 02:35.740
So for example, we can call both these methods right here by simply calling passwords to hash or password.

02:36.070 --> 02:36.760
Compare.

02:37.590 --> 02:42.780
This is opposed to what normal methods or instance methods such as if we had a method on here like print

02:42.960 --> 02:47.490
to access print, we would have to first make a new instance of password.

02:48.680 --> 02:51.140
And then on there we could access rent.

02:54.900 --> 02:55.380
Okay.

02:57.960 --> 03:02.040
So we're going to implement our hashing logic here and then some logic right here to actually compare

03:02.040 --> 03:03.900
a stored password and a supplied one.

03:05.110 --> 03:10.420
So for handling the two hash parts, this is where we want to take in a plaintext password and somehow

03:10.420 --> 03:11.130
hash it.

03:11.440 --> 03:14.330
Now, the logic that we're going to write out inside of here is going to be a little bit specialized.

03:14.350 --> 03:19.240
Again, I'm going to kind of assume that you have seen password hashing at least once in the past.

03:19.240 --> 03:24.730
And if you haven't, again, I recommend doing a little quick blog search online, look at a tutorial

03:24.730 --> 03:25.060
or two.

03:25.090 --> 03:26.710
There's a ton of resources out there.

03:27.310 --> 03:30.610
So for the most part, we're just going to throw in a bunch of code rather quickly.

03:31.090 --> 03:40.900
At the very top, I'm going to import script and random bytes from the built in node library of crypto.

03:42.140 --> 03:46.790
I'm also going to get the promise of FY function from you till.

03:48.280 --> 03:52.670
Script is the hashing function that we're going to use as script is fantastic.

03:52.680 --> 03:55.590
The downside to it is that is callback based.

03:55.680 --> 03:59.820
We want to eventually use async, await for doing a lot of logic inside of here.

03:59.820 --> 04:05.970
So I got promise ify so we can take this callback based function and turn it into a promise based implementation

04:05.970 --> 04:08.220
which is compatible with using async await.

04:08.820 --> 04:13.290
So I'm going to say const script async.

04:14.090 --> 04:17.150
Is promise ify is script like so.

04:18.200 --> 04:23.630
So again, just going from the callback implementation to a promise based implementation.

04:24.730 --> 04:29.410
So then inside of here, we're going to generate a salt, which is a part of the hashing process.

04:29.920 --> 04:32.950
So I'll say salt is random bytes.

04:32.950 --> 04:34.780
Eight to string.

04:35.680 --> 04:36.240
X.

04:36.580 --> 04:38.770
So that's going to generate a random string for us.

04:41.390 --> 04:44.750
And then going to do the actual password hashing process.

04:44.750 --> 04:50.240
When we use script async or really script in general, we get back what is called a buffer, which is

04:50.240 --> 04:52.870
kind of like an array with raw data inside of it.

04:52.880 --> 04:56.840
So we are going to create a variable right here called Buff Short for Buffer.

04:58.330 --> 05:01.990
I'm going to do an O8 script async.

05:02.820 --> 05:08.100
I'm going to pass it in the password and the salt and a number of 64 right here.

05:09.260 --> 05:11.930
We immediately get an error because we're using O8.

05:11.930 --> 05:16.670
So if you want to use the syntax, we need to mark the enclosing function as async as usual.

05:17.000 --> 05:18.140
So I'll do so right away.

05:20.280 --> 05:24.750
Now, if we mouse over buffer right here, you'll notice that unfortunately TypeScript is getting a

05:24.750 --> 05:29.180
little bit confused because it doesn't really know what happened during this promise of PHI process.

05:29.190 --> 05:33.020
So when we mouse over buffer it's type is annotated as unknown typescript.

05:33.060 --> 05:36.030
TypeScript is saying I have no idea what is going on here.

05:36.420 --> 05:40.560
So we're going to fix this up by just telling TypeScript exactly what Buffer is.

05:40.980 --> 05:45.450
I'm going to wrap this entire await statement with the set of parentheses, and then at the very end,

05:45.450 --> 05:47.400
I'll put on as buffer.

05:48.520 --> 05:49.600
That's telling TypeScript.

05:49.600 --> 05:51.140
Look, we know what's going on here.

05:51.160 --> 05:51.890
This is a buffer.

05:51.910 --> 05:53.230
Just treat it as such.

05:53.320 --> 05:54.970
If I now mouse over buff.

05:55.600 --> 05:57.700
Now this thing is recognized as being a buffer.

05:59.570 --> 06:03.860
Now finally, we're going to return the hashed result along with the assault.

06:04.040 --> 06:06.770
So I'm going to return a template string.

06:07.420 --> 06:09.970
So note the back ticks here, not single quotes.

06:11.080 --> 06:16.630
I'm going to put in here buff to string x because remember we are working with the buffer which is not

06:16.630 --> 06:17.590
the same as a string.

06:17.590 --> 06:19.150
So we have to turn it into a string.

06:20.860 --> 06:23.260
Then at the very end, I'm going to put a dot.

06:24.680 --> 06:27.740
And then put on the rest, which is our salt.

06:30.930 --> 06:31.230
Okay.

06:31.230 --> 06:33.420
So that is our two hash function.

06:33.420 --> 06:38.280
It's going to take in some password or essentially any arbitrary string, generate a salt.

06:39.980 --> 06:45.260
It's going to hash the password along with the salt, and then we're going to return both the hash password

06:45.260 --> 06:48.770
and the salt concatenated together and joined by a little dot.

06:50.850 --> 06:51.090
Yes.

06:51.090 --> 06:52.170
That's pretty good.

06:52.200 --> 06:55.380
Well, let's take a quick pause right here, and then we're going to implement the computer function

06:55.380 --> 06:56.700
in the next video as well.

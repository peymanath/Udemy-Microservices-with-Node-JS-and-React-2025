WEBVTT

00:00.950 --> 00:03.530
We are finally all complete with that air handling stuff.

00:03.530 --> 00:07.130
So now it's time to move on and start to actually implement our signup flow.

00:07.430 --> 00:11.030
Whenever a user signs up to our application, as you would imagine, one of the first things we need

00:11.030 --> 00:16.220
to do is take that email and password and create some entry inside of some database to reflect that

00:16.220 --> 00:17.360
user being created.

00:18.110 --> 00:22.280
We discussed previously when we were first talking about the architecture of this application that we

00:22.280 --> 00:24.920
were going to be using MongoDB across the board.

00:25.400 --> 00:30.650
So in this video, we're going to start to focus on adding in Mongoose into our express application

00:30.650 --> 00:32.150
or really the service.

00:32.480 --> 00:37.190
And we're going to make sure that we also have a MongoDB instance to communicate with as well.

00:37.700 --> 00:43.070
Now as a quick reminder, once again, every copy or every service that we are going to implement is

00:43.070 --> 00:47.000
going to have its own instance of MongoDB, its own private instance.

00:47.000 --> 00:51.050
And this goes back to that whole idea of one database per service.

00:51.950 --> 00:55.050
So in this video, we're going to install Mongoose into our project.

00:55.070 --> 01:00.170
We're also going to set up a new MongoDB instance inside of our Kubernetes cluster as well.

01:01.550 --> 01:05.180
Let's first just install Mongoose because that's pretty easy and straightforward.

01:05.480 --> 01:06.800
So back at my terminal.

01:08.790 --> 01:09.810
Inside my.

01:10.620 --> 01:12.120
Off directory.

01:12.450 --> 01:15.510
I will run npm install mongoose.

01:17.050 --> 01:17.800
Well, yep.

01:17.800 --> 01:18.880
That's easy enough.

01:19.830 --> 01:24.960
Now that Mongoose is installed into our project, let's go ahead and create a new instance of MongoDB.

01:25.260 --> 01:26.880
So how are we going to do that?

01:27.060 --> 01:33.270
Well, MongoDB is just like any other thing that we're trying to run inside of our Kubernetes cluster.

01:33.300 --> 01:36.340
We are going to be running MongoDB inside of a pod.

01:36.360 --> 01:39.010
And remember, we usually do not create pods directly.

01:39.030 --> 01:41.040
Instead, we make use of deployments.

01:41.430 --> 01:43.830
The deployment is going to create a pod for us.

01:43.950 --> 01:49.080
And in order to communicate with this pod, we're going to have to create a cluster IP service to go

01:49.080 --> 01:50.340
along with it as well.

01:50.850 --> 01:54.790
In total, we're going to really just be writing out one single deployment file.

01:54.810 --> 01:59.460
So a config file that's going to look very similar to one we already put together for the authentication

01:59.460 --> 02:00.150
service.

02:01.220 --> 02:02.480
So back at my editor.

02:04.430 --> 02:10.820
I'm going to find the infra AIDS directory and inside there I'm going to make a new file called off

02:11.060 --> 02:14.150
dash mongo dash deploy yaml.

02:15.100 --> 02:19.290
That is the general naming strategy that we're going to use for our different databases that we create.

02:19.300 --> 02:23.410
We're going to put in the service that owns this database, the type of database.

02:23.410 --> 02:27.880
So in this case it's MongoDB, and then we are creating a deployment, so we're going to abbreviate

02:27.880 --> 02:29.230
that simply as devel.

02:31.050 --> 02:33.930
Then inside of here, once again, we're going to write out some configuration that's going to look

02:33.930 --> 02:37.200
very similar to what we already have inside of our deployment file.

02:37.740 --> 02:41.370
So at the very top, we'll get our API version of apps.

02:42.730 --> 02:43.450
Be one.

02:44.350 --> 02:46.120
A kind of deployment.

02:48.090 --> 02:54.210
The metadata section will give this a name of off mongo double.

02:57.780 --> 03:00.450
Then our spec section will have replicas.

03:00.450 --> 03:01.170
One.

03:02.210 --> 03:03.710
We'll put in that selector.

03:04.310 --> 03:08.570
With a match labels property of app.

03:10.350 --> 03:12.390
Off Dash Bongo.

03:15.300 --> 03:19.500
Then our pod template where we will have some metadata once again.

03:20.640 --> 03:24.770
But the label section that has app auth dash mongo.

03:24.780 --> 03:29.940
So once again, we've gone over this many times now remember this is going to be a label that gets applied

03:29.940 --> 03:30.750
to the pod.

03:30.870 --> 03:35.310
This selector thing right here is how the deployment is going to find the pods that it actually creates.

03:37.620 --> 03:40.920
After the metadata section will then add in a spec for the pod.

03:41.520 --> 03:45.720
We'll say that there's going to be one container, so we'll put in the container section with a single

03:45.720 --> 03:46.650
array entry.

03:47.630 --> 03:54.890
We're going to give that container a name of off mongo and we'll specify the image as simply mango.

03:56.620 --> 03:59.530
Now a quick reminder on where this image is coming from right here.

03:59.950 --> 04:01.740
Remember that on Docker Hub.

04:01.750 --> 04:07.900
So if we go to NBC.com instead of our browser right now, there are a wide variety of different images

04:07.900 --> 04:10.300
hosted on Docker Hub for public use.

04:10.630 --> 04:16.030
So if I do a search at the very top for simply mongo, I'll see that there is in fact a image called

04:16.030 --> 04:16.600
Mongo.

04:17.080 --> 04:22.720
This is an officially hosted image that we can run to get a MongoDB database.

04:23.230 --> 04:28.150
So by just putting in an image name of Mongo, we are referring to this image right here.

04:29.110 --> 04:32.890
If we ever want to understand how to configure this thing, we can always read some of the documentation

04:32.890 --> 04:34.030
on this page as well.

04:36.940 --> 04:37.270
Okay.

04:37.270 --> 04:38.680
So that's it for the deployment.

04:38.680 --> 04:42.760
But remember, after creating the deployment, we're also going to create a cluster IP service inside

04:42.760 --> 04:46.150
of here so that we can actually connect to the pods that are going to be created.

04:47.290 --> 04:52.270
So I'm going to add in a dash, dash, dash to indicate that I want to put in some configuration for

04:52.270 --> 04:53.410
a second object.

04:54.190 --> 04:59.020
Well, then put in an API version of v1a kind of service.

05:00.000 --> 05:01.080
Metadata.

05:02.750 --> 05:02.990
What?

05:02.990 --> 05:05.780
The name of Mongo CRV.

05:07.940 --> 05:08.750
A spec.

05:09.540 --> 05:12.060
With a selector.

05:12.980 --> 05:15.540
Of App Dash Mango.

05:15.770 --> 05:20.390
Remember when we put the selector together inside of a service that is telling the service which pods

05:20.390 --> 05:22.280
it is going to govern access to?

05:22.310 --> 05:28.580
So in this case, we're saying find a set of pods or any pod with a label of app off mongo.

05:28.580 --> 05:31.340
And of course, that matches up to the one that we just put right there.

05:33.450 --> 05:35.010
So we can list out all of the different ports.

05:35.010 --> 05:36.660
So we want to allow access to.

05:37.460 --> 05:39.530
We're only going to expose one port.

05:39.560 --> 05:42.170
I'm going to give it a name of simply DB.

05:42.560 --> 05:47.150
Remember, the name that we put here is really just for logging purposes.

05:47.150 --> 05:51.590
Once we start to print out information about this service, if we ever do at our terminal, it's going

05:51.590 --> 05:53.670
to give us a name of DB for this port.

05:53.690 --> 05:54.680
The name that you put there?

05:54.710 --> 05:55.670
Not super important.

05:55.670 --> 05:57.920
I actually used a different name in my notes than DB.

05:57.950 --> 06:01.190
Just when we were writing this config file I thought, hey, DB makes sense.

06:01.190 --> 06:02.510
Let's just use that instead.

06:04.260 --> 06:12.760
List, a protocol of TCP and then a port of 2701 seven and a target port of 2701 seven.

06:12.760 --> 06:14.590
Why are we using this port right here?

06:14.590 --> 06:20.140
Well, by default, MongoDB listens for incoming traffic on 2701 seven.

06:20.140 --> 06:22.060
That is the default port for Mongo.

06:22.120 --> 06:23.740
And so that's why I put it in here.

06:24.130 --> 06:29.140
You would normally have to do a little bit of research to figure out what port a given database or a

06:29.140 --> 06:31.750
given application is going to be listing on.

06:32.110 --> 06:37.090
To do so, you would look up some information about the image itself, so I could go back over to that

06:37.090 --> 06:41.770
Docker hub page over here, and chances are I should be able to do a search on this page.

06:41.770 --> 06:47.740
420 7017 And sure enough, yep, it does say, hey, to connect to this thing, it's going to be listing

06:47.740 --> 06:49.810
on Port 2701 seven.

06:52.440 --> 06:54.090
All right, so that's it for our service.

06:54.210 --> 06:55.740
That is it for our deployment.

06:56.010 --> 07:01.230
It's now to create this database, and the service will just do yet another.

07:01.230 --> 07:08.460
Either it'll apply or a better way of handling this would be to just make use of scaffold, because

07:08.460 --> 07:12.780
remember, scaffold is going to try to deploy all the different files we list out inside this directory.

07:13.770 --> 07:17.300
Sometimes scaffold does not actually see when we create new files, however.

07:17.310 --> 07:20.100
So I'm going to go back over to the window that is running scaffold.

07:20.400 --> 07:24.300
It looks like in my case, Scaffold did see that I created that new file.

07:25.130 --> 07:30.590
And so I see right here that scaffold has gone ahead, applied that file, and my deployment has been

07:30.590 --> 07:33.050
created and the service has been created as well.

07:33.970 --> 07:35.800
In your terminal window running scaffold.

07:35.800 --> 07:41.650
If for some reason you do not see this information, then all you have to do is get control C and restart

07:41.650 --> 07:44.560
scaffold by running scaffold dev once again.

07:45.700 --> 07:50.650
Once everything gets applied, we should then be able to do a little get pods.

07:52.080 --> 07:53.950
Oh, I'm connected to the wrong.

07:54.740 --> 07:55.820
Luster right now.

07:55.880 --> 07:56.780
They fix that up.

07:59.760 --> 08:00.480
That's better.

08:00.480 --> 08:04.980
We should build to do a little get pods and see our authentication.

08:04.980 --> 08:06.810
Mongo deployment.

08:07.650 --> 08:07.860
Cool.

08:07.860 --> 08:08.510
So it looks good.

08:08.520 --> 08:13.530
So now in theory we are running a copy of MongoDB for our off service.

08:14.130 --> 08:15.360
So let's take a quick pause right here.

08:15.360 --> 08:19.620
When we come back, the next video, we're going to make sure that our actual service has some code

08:19.620 --> 08:24.420
inside of it to reach out and connect to the Mongo instance running inside of this pod.

WEBVTT

00:00.600 --> 00:02.530
Let's wrap up our password class.

00:02.550 --> 00:06.000
In this video, we're going to implement the static compare method right here.

00:06.540 --> 00:11.820
So we're going to take some stored password out of our database and some supplied password as well.

00:12.330 --> 00:16.560
And going back over to the diagram we were just looking at, remember, we're going to hash the supplied

00:16.560 --> 00:21.300
password, get the hash version, we'll then compare it to the one stored inside of our database.

00:21.300 --> 00:25.290
And if they are equal, that means that the user must have given us the correct password.

00:26.570 --> 00:28.960
Something that's just kind of complicating this a little bit.

00:28.970 --> 00:33.860
The stored password right here is whatever we are storing tied to our user inside the database.

00:34.460 --> 00:39.400
So it's going to be the output of two hash as a part of that two hash process.

00:39.410 --> 00:45.200
We are not only generating a hash password, but we are also concatenating on there at the very end,

00:45.200 --> 00:48.350
separated by that little dot, something called the salt as well.

00:48.380 --> 00:51.080
The salt is part of the actual hashing process.

00:51.200 --> 00:56.120
So stored password right here is not just the hash password, it's not just that part.

00:56.120 --> 01:00.620
It is the hash password plus a period and the salt at the very end.

01:02.160 --> 01:03.840
So we're going to accommodate for that.

01:04.050 --> 01:07.890
On the very first line by saying hashed password.

01:08.740 --> 01:15.070
And salt are coming from stored password split on like so.

01:15.740 --> 01:20.690
So now hash password is the actual truly hash password that is stored in our database.

01:21.020 --> 01:25.610
And salt is the salt that we generated during the initial hashing process.

01:26.330 --> 01:27.560
I know this stuff is confusing.

01:27.560 --> 01:32.630
Again, really assuming that you have seen haphazard hashing and salting and all this stuff at least

01:32.630 --> 01:33.410
once before.

01:35.830 --> 01:41.350
So after that, we're going to go ahead and go through the same exact password hashing process on the

01:41.350 --> 01:42.580
supplied password.

01:43.390 --> 01:47.050
So we are going to write out the same line as up here rather than retyping it.

01:47.050 --> 01:49.000
I'm just going to copy that and paste it.

01:49.630 --> 01:54.670
I am going to change password right there to the actual argument name of supplied password.

01:56.970 --> 01:59.580
I'm going to make sure I also mark this function as a sync.

02:01.040 --> 02:08.180
And then finally we now have the original hash password, plus a buffer containing the newly hash password,

02:08.180 --> 02:09.590
the one that the user just applied.

02:09.800 --> 02:14.120
So we're going to take the buffer, turn it into a string, and then compare it against the hash one.

02:14.600 --> 02:15.650
I'm going to return.

02:16.570 --> 02:21.010
Buffed to string converted to a hex hexadecimal string.

02:21.760 --> 02:27.300
I'm not going to compare its quality versus the stored hashed password like so.

02:28.430 --> 02:29.480
And that is it.

02:30.620 --> 02:32.840
So we've got our class password all put together.

02:32.840 --> 02:37.970
Now we've got the ability to hash the password and we've got the ability to compare to as well.

02:38.370 --> 02:41.660
So now the last thing we have to do is go back over to our user model.

02:41.930 --> 02:46.760
We're going to import that password manager class we just put together and we're going to wire it up

02:46.760 --> 02:52.010
inside of this user model to make sure that we automatically hash a password whenever we attempt to

02:52.010 --> 02:53.570
save a user to our database.

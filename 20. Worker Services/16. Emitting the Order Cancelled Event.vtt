WEBVTT

00:00.970 --> 00:05.710
At the end of the last video I mentioned, whether or not it made sense to empty out or essentially

00:05.710 --> 00:08.680
reset the ticket property of this order that is now being canceled.

00:08.920 --> 00:13.600
The reason that this is a relevant question is remember that we are tracking essentially whether or

00:13.600 --> 00:18.250
not a ticket is reserved by taking a look and seeing if there are any orders that refer to it.

00:18.790 --> 00:23.020
Let's go take a look at the code that actually decides inside of our order service whether or not a

00:23.020 --> 00:24.400
ticket is currently reserved.

00:24.940 --> 00:29.560
You might recall that we had written that inside of our model directory in the ticket file.

00:30.310 --> 00:34.180
So on the ticket document, we added on a very special little method.

00:35.300 --> 00:37.280
That we called is reserved.

00:37.310 --> 00:38.270
Here it is right here.

00:39.530 --> 00:40.760
So is reserved.

00:41.150 --> 00:45.680
We are going to invoke that and try to find in order that reference this ticket.

00:45.860 --> 00:47.450
But then here's the critical part.

00:47.450 --> 00:53.150
We made sure that we were only looking for orders that had a status of created a waiting payment or

00:53.150 --> 00:53.930
complete.

00:54.380 --> 00:57.350
So as soon as the order goes to the canceled state.

00:58.070 --> 01:02.600
The ticket that is associated with it is going to be considered to be no longer reserved.

01:02.930 --> 01:08.450
That's going to essentially unlock the ticket inside of the OR as far as the order service is concerned.

01:10.120 --> 01:13.750
That means that we do not need to reset or clear out this ticket property.

01:13.750 --> 01:19.480
And that's actually a good thing because now once an order is cancelled, a user can still see what

01:19.480 --> 01:21.520
ticket it had been associated with.

01:21.550 --> 01:27.580
Just imagine if we had set ticket to know like so a user would then try to look at all their different

01:27.580 --> 01:32.440
orders and we would not have any idea what any given cancelled order was for what they were trying to

01:32.440 --> 01:33.010
buy.

01:33.040 --> 01:37.840
So if we reset that ticket property, there would be no tie between this order and a given ticket anymore.

01:38.170 --> 01:41.620
So a user might just see, hey, you've got like five cancelled orders, but they'd be sitting there

01:41.650 --> 01:43.380
wondering, what were these orders for?

01:43.390 --> 01:44.770
I don't have any information.

01:45.500 --> 01:50.270
And so it's pretty convenient that we decide our is reserved function to allow us to have a canceled

01:50.270 --> 01:50.930
status.

01:51.590 --> 01:54.920
So in closing, we are not going to include ticket of NULL.

01:56.490 --> 01:59.970
Now after setting that status on the order, we then need to save the order.

01:59.970 --> 02:02.190
So we'll do an a wait order.

02:02.190 --> 02:03.000
Dot save.

02:04.980 --> 02:09.120
And then naturally we need to infer, inform the rest of the world, all of our different services,

02:09.120 --> 02:11.220
that this order has now been cancelled.

02:11.730 --> 02:16.920
Well, you might recall that a while ago inside of our order service, we had already put together a

02:16.920 --> 02:19.560
publisher for the order cancelled event.

02:19.740 --> 02:21.570
We put that together a long time ago.

02:21.600 --> 02:25.770
So all we have to do is import that order cancelled publisher into this listener.

02:25.770 --> 02:30.360
And right after we save that order, right after we make that update and cancel thing, we should definitely

02:30.360 --> 02:33.150
publish an event right away saying that this order has been cancelled.

02:33.630 --> 02:36.360
And let's just go take a look at a quick diagram of that.

02:37.530 --> 02:39.620
So we're going to make sure we emit that event.

02:39.630 --> 02:43.050
And right now, we're really just going to worry about making sure that we eventually listen for that

02:43.050 --> 02:44.400
over on the ticket service.

02:44.400 --> 02:48.270
But as soon as we put together the payment service, payment service is going to care about that event

02:48.270 --> 02:48.900
as well.

02:50.420 --> 02:50.750
All right.

02:50.750 --> 02:55.330
So to emit an event or publish an event from inside of a listener, we've done this once before.

02:55.340 --> 02:55.700
Remember?

02:55.700 --> 03:01.460
All we have to do is import the publisher, read an instance of it right here, pass in the net's wrapper

03:01.460 --> 03:06.770
client to really just the Nats client that has already a instance property of our class and that's it.

03:06.770 --> 03:08.300
We can then call the publish function.

03:08.450 --> 03:10.310
So at the very top I will import.

03:11.900 --> 03:14.570
The ticket cancelled or order cancelled.

03:17.370 --> 03:18.120
Publisher.

03:19.490 --> 03:20.540
From up one directory.

03:20.540 --> 03:23.330
Publishers Order Cancelled Publisher.

03:27.580 --> 03:28.720
Then back down here.

03:29.050 --> 03:33.020
We can do a new order cancelled.

03:33.340 --> 03:34.030
Publisher.

03:35.500 --> 03:38.980
We're going to pass in our listeners now a client.

03:39.670 --> 03:41.140
That's this client.

03:42.230 --> 03:47.090
Well, then publish some information and I definitely forget what properties this event is supposed

03:47.090 --> 03:47.720
to have.

03:47.870 --> 03:50.550
Let's definitely do a mouse over and be told what we have to do here.

03:50.840 --> 03:56.240
So we have to provide the ID of the order that's being cancelled its version again for concurrency issues,

03:56.420 --> 04:01.190
and then a reference to the ticket or essentially the ID of the ticket that this order was associated

04:01.190 --> 04:01.670
with.

04:03.330 --> 04:06.330
So I'm going to put in my ID, which will come from order ID.

04:07.310 --> 04:10.810
I'll put in its version, which is older version.

04:11.540 --> 04:12.740
And then ticket.

04:15.470 --> 04:17.060
And ticket is going to be.

04:18.790 --> 04:21.220
The ID and we have to get the idea of that ticket.

04:21.580 --> 04:26.770
Well, remember, back up here when we initially fetched our order, we did not try to populate that

04:26.770 --> 04:27.390
ref.

04:27.400 --> 04:30.790
Remember, we are relating an order and a ticket together through that ref system.

04:30.880 --> 04:36.220
So if you want to make sure that we get our order or fetch this order and also load up the associated

04:36.220 --> 04:42.700
ticket, we do have to chain on that dot populate statement and put in ticket like so.

04:45.510 --> 04:49.770
So now we should be able to reference order ticket ID.

04:52.070 --> 04:52.300
Okay.

04:52.340 --> 04:53.060
Looks good.

04:53.390 --> 04:55.880
Now, let's throw in a wait in front of that Polish statement.

04:56.690 --> 05:00.770
Just to make sure we wait for this thing to be published before finally acting or acknowledging the

05:00.770 --> 05:01.700
overall message.

05:02.520 --> 05:05.280
And speaking of which, let's put that in at the very bottom as well.

05:05.280 --> 05:07.200
So message like so.

05:08.790 --> 05:08.910
Okay.

05:08.970 --> 05:10.100
So that should be it.

05:10.110 --> 05:13.380
That is our listener for the expiration complete event.

05:13.860 --> 05:18.870
Naturally, it would be nice to write out a quick test or two around this because this is a pretty critical

05:18.870 --> 05:23.430
flow inside of our app and we really want to make sure that this event gets processed quickly.

05:23.940 --> 05:28.140
I know that we've been through testing so many times now, and it really might be a little bit tedious

05:28.140 --> 05:28.830
at this point.

05:28.860 --> 05:31.770
Nonetheless, we really, really should test this thing.

05:31.890 --> 05:33.360
We'll go through the test rather quickly, though.

05:33.360 --> 05:36.690
So let's take a pause right here and just nail these tests in the next video.

WEBVTT

00:00.800 --> 00:04.730
In this video, we're going to learn how to create a secret inside of a Kubernetes cluster.

00:05.030 --> 00:06.020
So here's the command.

00:06.020 --> 00:07.390
We're going to run cubes.

00:07.430 --> 00:13.910
It'll create secret generic, then the name of the secret, then dash dash from literal equals.

00:13.910 --> 00:16.820
Then the key that we want to set and the value for it.

00:17.150 --> 00:18.350
A couple of notes on this.

00:18.380 --> 00:20.180
First off, the word generic right here.

00:20.210 --> 00:23.260
There are different kinds of secrets we can create in Kubernetes.

00:23.270 --> 00:28.790
An example of a different kind of secret we can create is some information related to accessing a repository

00:28.790 --> 00:29.960
of Docker images.

00:29.960 --> 00:31.790
That is a different kind of secret.

00:32.000 --> 00:38.300
We are creating a generic secret, which means this is just a all purpose kind of secret piece of information.

00:39.240 --> 00:44.620
The name of the secret right here is very similar to the names we assigned to pods or deployments.

00:44.640 --> 00:50.310
This is mostly used for logging purposes, but in the case of a secret, we also use this to refer to

00:50.310 --> 00:51.820
inside of a pod config file.

00:51.840 --> 00:53.580
You'll see an example of that very shortly.

00:54.550 --> 00:58.900
Over here on the right hand side, we can assign many different properties or many different key value

00:58.900 --> 01:00.230
pairs into a secret.

01:00.250 --> 01:06.550
In this case, we are assigning one key value pair of JSON web token or JWT equals SDF.

01:08.730 --> 01:10.670
Now there's another note I want to give you here.

01:10.680 --> 01:14.400
This is an example of an imperative command in Kubernetes.

01:14.550 --> 01:20.940
Imperative commands are where we run a command to, to create an actual object for everything else we've

01:20.940 --> 01:21.570
done in Kubernetes.

01:21.570 --> 01:27.130
So far, we have not used an imperative approach where we run commands to directly create objects.

01:27.150 --> 01:32.880
Instead, we've used a more declarative approach where we wrote out a config file and then applied that

01:32.880 --> 01:33.780
config file.

01:34.320 --> 01:38.220
The reason that we were using this imperative approach right here is because we don't really want to

01:38.220 --> 01:42.240
have a config file that lists out the value of our secrets.

01:42.810 --> 01:46.560
We don't necessarily have to list out the value of a secret inside the config file.

01:46.560 --> 01:51.570
We can technically use a local environment variable on your machine and then are referred to that from

01:51.570 --> 01:52.650
the config file.

01:52.680 --> 01:56.100
And so that would still allow us to have a more declarative approach.

01:57.410 --> 01:59.900
So this is just a very easy way of creating a secret.

01:59.930 --> 02:04.790
The one downside to it is that any time you start to create or spin up a new cluster, you are going

02:04.790 --> 02:08.330
to have to remember all the different secrets that you had created over time.

02:08.450 --> 02:13.220
So even though this is very easy to run right now and does not require us to create a config file or

02:13.220 --> 02:17.840
set up some local environment variable or anything like that, there is a cost to pay down the line

02:17.840 --> 02:20.030
as we have to remember the different secrets.

02:21.160 --> 02:26.710
Now what I do personally, I have whenever I'm working on a cluster and I'm creating secrets manually

02:26.710 --> 02:32.230
in this style, I will essentially just take this exact command right here and store it in some very,

02:32.230 --> 02:34.060
very secure location.

02:34.390 --> 02:37.150
I usually do not really do that for production deployments.

02:37.180 --> 02:40.690
Instead, I will write out that or take that config file approach.

02:40.690 --> 02:45.910
But for a development or a staging or a test environment, I will usually just kind of copy paste this

02:45.910 --> 02:47.860
somewhere else in a very secure location.

02:47.860 --> 02:49.420
I'm not going to tell you where I store it.

02:49.420 --> 02:53.590
In particular, you could do some research on your own and I just throw the command over there.

02:53.590 --> 02:57.580
So any time I need to remember all the different secrets that exist, I can just go in reference that

02:57.580 --> 02:58.120
file.

02:58.640 --> 02:59.980
Okay, so let's go over to our terminal.

02:59.980 --> 03:01.510
We are going to run that command.

03:03.450 --> 03:03.620
Okay.

03:03.630 --> 03:04.380
So back over here.

03:04.380 --> 03:08.520
We'll do a CTL and then create secret generic.

03:12.870 --> 03:21.990
Well, then put down the name of the secret which is JWT secret, then dash dash, rum literal and then

03:21.990 --> 03:24.120
our key value pair that we want to set inside of here.

03:24.630 --> 03:27.190
So on this diagram I said JWT is a.

03:27.930 --> 03:34.310
That's probably not a great key value pair just because it's implying that the value of JWT is SDF.

03:34.320 --> 03:41.000
Maybe a better thing to use here would be something like JWT or something like that equals SDF.

03:41.010 --> 03:42.900
That might be a little bit more clear.

03:43.970 --> 03:48.520
I going to do JWT underscore e equals a pdf.

03:48.850 --> 03:53.720
Naturally, in reality, you would probably want to use a string here way more complicated than a PDF.

03:53.920 --> 03:59.500
You might want to do something like that, but for me, in a development environment, SDF is just fine.

04:01.050 --> 04:01.350
Okay.

04:01.380 --> 04:02.850
So now the secret is created.

04:03.090 --> 04:08.160
We can always get a list of all the different secrets that exist inside of our cluster by doing a tell

04:08.220 --> 04:09.570
it secrets.

04:10.240 --> 04:15.300
And so you'll see in my case, I've got a couple of secrets that already exist, such as Stripe, a

04:15.300 --> 04:18.780
post-arrest password, and the one that we just created 2 seconds ago.

04:20.670 --> 04:20.940
Okay.

04:20.970 --> 04:22.080
So now we've created that secret.

04:22.080 --> 04:24.930
We need to somehow get it into our pods.

04:24.930 --> 04:29.550
So we need to take the information inside that secret and set it on the environment variables for each

04:29.550 --> 04:30.600
of our different pods.

04:31.140 --> 04:36.750
To do so, we're going to open up our pod config file or more precisely, our deployment config file.

04:36.750 --> 04:40.830
We're going to add in some options to our pod configuration spec.

04:40.830 --> 04:45.840
That's going to tell Kubernetes that whenever it creates this pod, we want to find the secret, get

04:45.840 --> 04:51.240
that JWT, underscore piece of information and assign it to the set of environment variables that are

04:51.240 --> 04:52.890
paired inside of that container.

04:53.700 --> 05:00.450
So let's go and find our deployment config file that is inside of our infra directory off depot.

05:01.340 --> 05:05.600
So this is the only order that we are creating right now through this deployment.

05:06.500 --> 05:11.660
So we need to somehow reference that secret and tell Kubernetes to include it as an environment variable

05:11.660 --> 05:14.420
inside of this container right here.

05:16.090 --> 05:18.160
To do so right after image.

05:18.250 --> 05:22.480
We're going to throw in a new line and put in an end of Section E and V.

05:22.660 --> 05:24.660
This is short for environment variable.

05:24.670 --> 05:28.150
So this is where we're going to list out all the different environment variables we want to have access

05:28.150 --> 05:29.800
to inside of this container.

05:30.640 --> 05:32.350
This is going to be an array.

05:32.380 --> 05:36.100
So I'm going to put down a single dash is right now we're going to have just a single entry.

05:37.010 --> 05:39.000
I'm going to put in a name property.

05:39.020 --> 05:44.330
This is going to be the name of the environment variable as it shows up inside of that container.

05:44.480 --> 05:50.780
So when we start up, our application name right here is going to be the property on our set of environment

05:50.780 --> 05:54.350
variables that we're going to access inside of our app.

05:55.140 --> 05:56.970
So for us, we'll just stay very consistent.

05:56.970 --> 06:01.050
We're going to use a name of J.W. Key to underscore Key.

06:03.580 --> 06:07.420
Then we're going to tell Kubernetes that we want the value for this environment variable to come from

06:07.420 --> 06:08.850
the secret that we just created.

06:08.860 --> 06:11.140
So we will write out value from.

06:11.950 --> 06:15.280
Secret key Ref. which is short for reference.

06:16.110 --> 06:18.120
Well, then list out the name of the secret.

06:18.540 --> 06:20.610
So the name of the secret that we just created.

06:21.690 --> 06:24.210
Was JWT a secret?

06:25.140 --> 06:27.360
So put in GW2 secret.

06:28.980 --> 06:30.870
And then the key inside there.

06:31.110 --> 06:34.340
So remember, inside of a secret, we can have many different key value pairs.

06:34.350 --> 06:37.740
We just used a key of JWT underscore key.

06:37.740 --> 06:41.730
So we want to look up this key value pair and give us the value for it.

06:42.270 --> 06:47.340
So for key we'll put in JWT key like so that should be it.

06:47.880 --> 06:49.140
So I'll now save this.

06:49.140 --> 06:50.610
I'm going to go back over to my terminal.

06:52.000 --> 06:53.320
Take a look at scaffold.

06:54.120 --> 06:56.790
And now will see that a change was made to my deployment.

06:57.000 --> 07:00.200
Now, I do want to show you something really, really interesting very quickly.

07:00.210 --> 07:04.380
This is something that might help you out down the line really quick, back inside of another terminal

07:04.380 --> 07:04.600
window.

07:04.620 --> 07:08.040
I'm going to do a little get pods and I'll see that.

07:08.040 --> 07:10.530
Yep, my pod is running right there.

07:11.300 --> 07:14.990
I'm now going to go back over to that same config file and I encourage you not to do this.

07:14.990 --> 07:16.820
This is just a very quick example.

07:17.120 --> 07:18.550
I'm going to find the secret key ref.

07:18.560 --> 07:23.210
I'm going to find the name of the secret that we want to load up, and I'm going to change it to gibberish.

07:23.450 --> 07:27.770
So this is a reference to a key that does not exist inside of our cluster.

07:28.340 --> 07:29.810
I'm then going to save this.

07:30.500 --> 07:31.430
Look back over.

07:31.910 --> 07:34.340
If I go to scaffold, I'll see that.

07:34.340 --> 07:34.880
Hey.

07:34.910 --> 07:35.330
All right.

07:35.330 --> 07:39.500
Looks like the deployment was configured, but I got an error right here from something.

07:39.500 --> 07:42.380
Who knows what's actually throwing this there that says secret, blah, blah, blah.

07:42.410 --> 07:43.430
Not found.

07:43.880 --> 07:46.280
A little bit more interesting than that little error, though.

07:46.610 --> 07:49.550
If I go and do another cube, it'll get pods.

07:49.970 --> 07:55.640
I'm going to get another pod right here for our auth deployment that has a status of create container

07:55.640 --> 07:56.780
config error.

07:57.170 --> 08:02.420
To debug this, we would do a describe statement or run the described command on this pod.

08:02.750 --> 08:08.840
So I'll do a tell the scribe pod and then put in the name of the pod that I want to describe.

08:10.510 --> 08:15.160
When I run that, I then get the air that says secret, blah, blah, blah, not found.

08:15.460 --> 08:19.750
So it turns out that if you try to load a secret or reference a secret inside of a pod that doesn't

08:19.750 --> 08:23.170
exist, Kubernetes is just going to not start up that pod.

08:23.680 --> 08:27.670
This is just, like I said, something to keep in mind, because I've ran into this issue every now

08:27.670 --> 08:30.350
and then where I will try to deploy something new.

08:30.370 --> 08:32.890
I'll then get a create container config error.

08:32.890 --> 08:35.240
And I say to myself, What's going on here?

08:35.260 --> 08:39.280
And so you do the describe and it turns out you might have made a typo in the name of the secret.

08:40.260 --> 08:40.560
All right.

08:40.560 --> 08:44.160
I'm going to revert that change back to JWT secret.

08:44.460 --> 08:45.750
So now if I save this.

08:46.490 --> 08:47.830
I should be able to flip back over.

08:47.840 --> 08:49.280
Take a look at scaffold again.

08:50.410 --> 08:52.210
Looks like there's still an issue here.

08:52.210 --> 08:53.920
I'm not really going to sweat that too much.

08:54.430 --> 08:56.330
If I do a cube, I'll get pods.

08:56.350 --> 08:57.220
Yeah, that's better.

08:57.220 --> 08:59.680
So it looks like everything is back to running as expected.

09:00.880 --> 09:01.210
Okay.

09:01.210 --> 09:03.120
So we have now created our secret.

09:03.130 --> 09:05.600
We have bound it to a very specific container.

09:05.620 --> 09:10.600
Now, the last thing we have to do is go into the application that's running inside of that container

09:10.870 --> 09:16.060
and make sure that we start to reference that environment variable called JWT underscore key.

09:16.660 --> 09:18.580
So let's take care of that in just a moment.

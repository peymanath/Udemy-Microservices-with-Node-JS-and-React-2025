WEBVTT

00:01.250 --> 00:02.000
Our order created.

00:02.000 --> 00:04.550
Listener is looking pretty good and we've got some tests around it.

00:04.550 --> 00:05.960
So that's it, right?

00:05.960 --> 00:07.160
We're all done with the listener.

00:07.160 --> 00:08.090
Well, come on.

00:08.090 --> 00:08.870
You know, by now.

00:08.870 --> 00:10.310
No, we're not done with the listener.

00:10.310 --> 00:15.110
It turns out there's a hidden little issue inside of here, something that could very easily bite us

00:15.260 --> 00:18.170
if we deploy this code as it stands right now.

00:18.170 --> 00:22.550
So let's take a look at a diagram and understand a little mistake we have inside of here.

00:23.610 --> 00:23.910
Okay.

00:23.910 --> 00:28.050
So we're going to take a look at a series of diagrams that's going to walk you through a potential flow

00:28.050 --> 00:28.980
inside of our app.

00:28.980 --> 00:32.190
And we're going to see inside of this very specific series of actions.

00:32.190 --> 00:35.610
We eventually end up with some pretty darn inconsistent data.

00:36.440 --> 00:41.830
So we're going to begin by imagining that inside of our order service we have replicated over a ticket.

00:41.840 --> 00:47.390
So this is a ticket that is defined inside the order service and we want to reserve it naturally to

00:47.390 --> 00:48.020
reserve a ticket.

00:48.020 --> 00:49.460
We're going to create an order.

00:49.460 --> 00:53.270
And whenever we create an order right now we are emitting an order created event.

00:53.720 --> 00:58.670
So this is an event that is going to be sent from the order service over to the ticket service to tell

00:58.670 --> 01:02.510
the ticket service that this ticket is being reserved because we just created in order.

01:04.230 --> 01:07.950
So this event right here is going to say that for ticket ID.

01:08.310 --> 01:12.510
Q That's this one right here we have created in order to reserve it.

01:12.510 --> 01:14.970
And that order has an ID of ads.

01:15.360 --> 01:20.970
So the ticket service, specifically the ticket service listener, me, the order created listener inside

01:20.970 --> 01:23.490
of there is going to find the relevant ticket.

01:23.850 --> 01:29.100
It's then going to take that order's ID of ads and update the order ID property.

01:29.700 --> 01:35.460
Also, remember that any time we make a change to a record that Magus update if current module is going

01:35.460 --> 01:38.130
to automatically increment the version number.

01:38.130 --> 01:40.470
And so we would go up to version number one like so.

01:42.200 --> 01:42.680
Okay.

01:42.710 --> 01:47.840
Let's now consider a next possible step, something that could definitely happen inside of our app at

01:47.840 --> 01:49.670
some point in the future after this event.

01:50.240 --> 01:54.370
So at some point in the future, maybe the user decides not to purchase this ticket.

01:54.380 --> 01:58.520
Maybe they don't pay the ticket in time or pay the order in time or whatever it is.

01:58.520 --> 02:03.350
But at some point in time in the future, we can imagine that maybe we get an order canceled event coming

02:03.350 --> 02:04.760
from the order service as well.

02:05.180 --> 02:09.770
We have not implemented this event yet, but I'm sure you can imagine what this event is going to do

02:09.770 --> 02:11.000
to our ticket service.

02:11.240 --> 02:15.050
Whenever we see order canceled, we want to reserve this ticket.

02:15.500 --> 02:18.050
So we would find the ticket with IDC's queue.

02:18.080 --> 02:19.400
That's this one right here.

02:20.650 --> 02:22.360
And we would remove that order.

02:22.360 --> 02:27.210
ID It is the presence of the order ID that indicates whether or not a ticket is reserved.

02:27.220 --> 02:30.130
Order cancelled means don't want to reserve that ticket anymore.

02:30.130 --> 02:32.380
So we would just remove the order ID property.

02:33.290 --> 02:37.610
Also because we are making a change to this ticket, we would increment its version to two.

02:39.870 --> 02:40.260
Okay.

02:40.260 --> 02:42.000
So now next possible step.

02:43.140 --> 02:48.300
Let's imagine that now that the ticket is unlocked and unreserved, maybe the person who owns this ticket

02:48.300 --> 02:50.610
decides, you know what, I want to change the price.

02:50.730 --> 02:54.890
So they make a request to edit the ticket and they want to change the price to 30.

02:55.290 --> 02:57.900
This is something we have totally built into our application.

02:57.900 --> 03:01.170
Definitely not outside the realm of possibility to have this happen.

03:01.740 --> 03:03.390
So we would find the ticket with.

03:03.720 --> 03:09.480
Q update its price to 30 and once again because we are making a change to this ticket the mongoose update

03:09.480 --> 03:13.230
if current module would automatically increment the version here to three.

03:14.400 --> 03:14.480
Now.

03:14.650 --> 03:19.660
Do you remember as well that when anytime we make a change to a ticket, whenever we change the price

03:19.660 --> 03:22.360
through the request handler of ticket.

03:22.360 --> 03:28.510
Edit We also emit an event just to describe the fact that we have changed this price and so we can really

03:28.510 --> 03:30.610
imagine it simultaneously.

03:30.610 --> 03:34.330
Right after making that change, we would emit an event that looks something like this.

03:34.540 --> 03:37.090
We would say for ticket ID, cc.

03:37.090 --> 03:39.850
Q We have changed its price to 30.

03:40.600 --> 03:44.950
And the current version of this event or this ticket is version three.

03:46.100 --> 03:47.630
So what do we do at this event?

03:47.660 --> 03:52.970
Well, remember, right now, this event is going to go over to our order service because we want to

03:52.970 --> 03:56.510
keep all the data, all the tickets between these two services in sync.

03:56.840 --> 04:01.220
So this event will go over to the order service and we're going to process it and update the Order Service's

04:01.220 --> 04:02.510
copy of this ticket.

04:03.200 --> 04:05.360
There's just one little issue with that.

04:06.490 --> 04:09.910
So here's the same diagram I've just added in the order service at the very bottom.

04:11.430 --> 04:17.120
And the issue here is that if we take a look at this ticket, it still has a version of zero right now,

04:17.130 --> 04:19.320
the initial version of that ticket.

04:19.470 --> 04:25.080
So it turns out that when we had made those updates through order, created an order, canceled, we

04:25.080 --> 04:26.670
made changes to the ticket.

04:26.670 --> 04:32.280
But we and we incremented the version, but we never kind of percolated those changes, so to speak,

04:32.280 --> 04:37.200
or emitted some event to describe these changes and got that picked up by our order service.

04:37.900 --> 04:43.230
So as far as the order service is concerned, we have a ticket right here of version zero.

04:43.500 --> 04:47.610
The order service is going to see an incoming event with a version of three, and the Order Service

04:47.610 --> 04:50.460
is going to say, Oh, I can't process this event just yet.

04:50.460 --> 04:53.140
It has a version of three and I'm stuck on version zero.

04:53.160 --> 04:59.040
So the order service is going to assume that it must be missing two events, the event with version

04:59.040 --> 05:01.020
one and the event with version two.

05:02.530 --> 05:08.230
So the obvious solution here, very plain and clear, is just that whenever we make any kind of change

05:08.230 --> 05:13.300
to the ticket through, say, the order created event listener or order cancelled, which we're going

05:13.300 --> 05:16.690
to put together in a little bit, we have to emit an event.

05:17.230 --> 05:22.390
We just have to emit an event and say, Hey, here's some new version so that all the dependent services

05:22.390 --> 05:25.690
can update their data and update that version number as well.

05:26.050 --> 05:30.160
Otherwise, the version numbers are going to fall out of sync, and we're not going to.

05:30.160 --> 05:34.660
Or as soon as we start to emit another event around this record, all these dependent services are going

05:34.660 --> 05:36.550
to say, Oh, I must be missing some events.

05:36.550 --> 05:41.290
I'm going to reject this one and wait for those other events to come in, even though we had never emitted

05:41.290 --> 05:41.650
them.

05:42.300 --> 05:47.880
So again, the real lesson here is just whenever we make a change to a record, we have to emit an event.

05:49.080 --> 05:49.290
Yes.

05:49.300 --> 05:52.200
With that in mind, I think the path forward is pretty clear.

05:52.940 --> 05:56.480
Inside of our ordinary listener, we are making a change to our ticket.

05:56.480 --> 06:00.330
And because we are making a change, we just have to emit an event.

06:00.350 --> 06:01.460
That's pretty much it.

06:02.220 --> 06:03.540
So let's take a quick pause right here.

06:03.570 --> 06:04.670
Come back the next video.

06:04.680 --> 06:10.590
Add in some code to emit an event right after we change that ticket to just say, Hey, this ticket's

06:10.590 --> 06:11.430
been changed.

06:12.090 --> 06:14.130
So quick pause and I'll see you in just a minute.

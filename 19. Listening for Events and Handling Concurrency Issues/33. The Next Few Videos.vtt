WEBVTT

00:01.090 --> 00:04.390
The tests around our two listeners are looking pretty good, so they're now going to start to move on

00:04.540 --> 00:06.130
to a couple of other things.

00:06.400 --> 00:09.760
I put together a quick diagram just to help you understand what we're going to do in the next couple

00:09.760 --> 00:10.300
of videos.

00:10.300 --> 00:15.250
And I did this just because right now we have to tackle a couple of little side topics really quickly,

00:15.250 --> 00:19.180
just some kind of administrative stuff to make sure everything works as expected.

00:19.180 --> 00:23.860
And whenever we go through these kind of discontented topics, it's really easy to get lost and lose

00:23.860 --> 00:25.390
sight of what we're really trying to do.

00:25.420 --> 00:28.240
So this is what we're going to try to achieve in the next couple of videos.

00:28.480 --> 00:33.340
First, we're going to add in the Mongoose update if current module into the order's model.

00:33.550 --> 00:38.620
The reason for this is that we want to have that same kind of version system around orders just as we

00:38.620 --> 00:39.850
have it around tickets.

00:40.210 --> 00:45.400
We're going to eventually emit events or publish a lot of events and listen to a lot of events around

00:45.400 --> 00:46.870
orders changing over time.

00:47.170 --> 00:51.010
And just like with tickets, we need to make sure we process those events in the correct order.

00:51.010 --> 00:54.550
And so we're always going to do that by wiring up this update if current module.

00:55.320 --> 00:57.660
After that, we're then going to fix up a couple of tests.

00:57.900 --> 01:03.060
So in particular, we're going to make sure that whenever we are creating tickets inside of our order

01:03.060 --> 01:06.570
service, we need to make sure that we provide an ID.

01:06.600 --> 01:09.500
So this is tied to some of the stuff we just went through in the last couple of videos.

01:09.510 --> 01:13.560
Remember, we want to make sure that we have a consistent ID for all the tickets that are created between

01:13.560 --> 01:15.990
our ticket service and the order service.

01:16.680 --> 01:21.630
However, we have a lot of code inside the order service right now that creates tickets without providing

01:21.630 --> 01:22.320
an ID.

01:22.350 --> 01:26.640
So we have to go hunt around in a couple of occasions and find those locations and just make sure we

01:26.640 --> 01:28.710
provide an ID whenever we create a ticket.

01:29.510 --> 01:34.520
And then finally, last thing, just a little bit ago, we made an update to our account module and

01:34.520 --> 01:38.090
we said that all of our different events were going to include a version flag.

01:38.240 --> 01:44.120
However, we do have two locations inside the order service where we are emitting information or publishing

01:44.120 --> 01:49.280
information about an order, and we are currently not including a version property when we are publishing

01:49.280 --> 01:50.060
those events.

01:50.060 --> 01:52.700
And so those right now are causing a typescript error.

01:52.730 --> 01:56.210
TypeScript is saying if you want to publish this event, you have to provide a version.

01:56.870 --> 01:57.320
So that's it.

01:57.320 --> 01:57.530
That's it.

01:57.530 --> 01:58.340
We're going to go through.

01:58.370 --> 02:03.440
Let's start first right now with the Mongoose update if current module in the orders model.

02:04.820 --> 02:08.240
So inside my order service, I'm going to find the order model file.

02:09.210 --> 02:10.170
At the very top.

02:11.730 --> 02:13.260
I will import the.

02:15.590 --> 02:16.370
Plug in.

02:17.560 --> 02:19.870
Update if current plugin.

02:21.620 --> 02:24.260
From Mongoose update if current.

02:27.820 --> 02:29.860
Well, then go down to right after our schema.

02:30.880 --> 02:32.500
Right after the order schema.

02:34.120 --> 02:39.790
We'll throw in here order schema, set, version key.

02:39.880 --> 02:41.860
And again, we're going to set it to version.

02:42.810 --> 02:46.330
And then right after that, we're going to tell this schema to make use of that plug in.

02:46.350 --> 02:47.640
So we'll add in order.

02:49.250 --> 02:54.300
Schema plug in and fast an update if current plug in.

02:54.320 --> 02:54.920
There we go.

02:56.360 --> 02:56.580
Okay.

02:56.600 --> 03:00.590
Last thing to do, we're going to go back up to our order document interface.

03:02.650 --> 03:05.830
So again, remember, this describes all the properties that an order has.

03:06.580 --> 03:11.800
The Mongoose document interface says that a document has an underscore underscore V property, which

03:11.800 --> 03:13.630
is usually used for tracking versions.

03:13.630 --> 03:17.710
But as we discussed many times, we are recording our versions on a version property.

03:17.710 --> 03:22.570
So just so we can access that version property, we have to add it to this order doc interface.

03:22.570 --> 03:27.250
And that's just to make TypeScript happy and understand that all orders have a version property.

03:27.250 --> 03:29.200
So we'll add inside of your version.

03:29.200 --> 03:31.120
It's going to be a number and that's it.

03:32.880 --> 03:33.330
Cool.

03:33.880 --> 03:34.190
Okay.

03:34.200 --> 03:35.250
So that's step number one.

03:35.250 --> 03:36.480
Let's take a quick pause right here.

03:36.480 --> 03:39.450
When we come back, the next video, we're going to fix up a couple of tests.

WEBVTT

00:01.260 --> 00:04.380
All right, my friends, in this video, we're going to take care of our last listener inside of the

00:04.380 --> 00:05.340
ticket service.

00:05.520 --> 00:10.380
So the order service at some point in time is going to emit the order canceled event as soon as the

00:10.380 --> 00:11.460
ticket service sees that.

00:11.460 --> 00:15.240
That is a sign to say that a given ticket is no longer reserved.

00:15.390 --> 00:20.610
So we're going to want to find a ticket inside of our tickets collection and remove the order ID property

00:20.610 --> 00:23.100
and say, hey, no longer is this ticket reserved.

00:23.100 --> 00:24.360
We can now make changes to it.

00:24.390 --> 00:28.380
Once again, putting this listener together is going to be pretty easy and straightforward.

00:28.380 --> 00:33.360
It's going to be just about a total clone of the listener we just wrote, so let's get to it right away.

00:35.170 --> 00:35.330
Okay.

00:35.350 --> 00:38.980
So back inside my ticket service, I'll find the listeners directory and inside there I'll make a new

00:38.980 --> 00:43.470
file of order cancelled listener ts.

00:46.030 --> 00:49.060
Then at the very top, once again, we will get our listener.

00:50.560 --> 00:51.520
Base class.

00:52.450 --> 00:54.280
And our order.

00:55.250 --> 00:56.540
Cancelled event.

00:57.610 --> 00:59.080
From our common module.

01:03.000 --> 01:10.710
I'll then export a class of order canceled listener and that's going to be extending the listener base

01:10.710 --> 01:11.370
class.

01:12.480 --> 01:15.510
And the generic type is going to be order canceled.

01:15.540 --> 01:16.230
Listener.

01:18.510 --> 01:18.720
Nope.

01:18.720 --> 01:21.150
Not ordered cancel listener ordered canceled event.

01:21.270 --> 01:24.330
These terms really blend together at a certain point in time.

01:24.720 --> 01:26.700
That is why TypeScript is so fantastic here.

01:26.700 --> 01:28.890
It helps us catch those silly little typos.

01:29.250 --> 01:29.580
All right.

01:29.580 --> 01:31.350
So once again, TypeScript can tell us.

01:31.410 --> 01:32.820
Got to define on message.

01:32.870 --> 01:34.390
Q Group name and subject.

01:34.410 --> 01:35.890
Let's take care of subject first.

01:35.920 --> 01:38.190
We'll get our subjects in from the common module.

01:39.020 --> 01:46.610
Our subject that we're going to listen for is the order or subjects order cancelled and we'll assign

01:46.610 --> 01:47.930
an actual value of subjects.

01:48.110 --> 01:49.610
Order cancelled.

01:51.600 --> 01:53.130
Next up is our cue group name.

01:53.550 --> 01:55.290
Remember, we have the separate file for that.

01:55.530 --> 01:56.320
So we will import.

01:56.340 --> 01:58.500
Q Group name at the top from.

01:58.530 --> 01:59.430
Q Group name.

02:01.080 --> 02:01.770
And then sign.

02:01.800 --> 02:03.480
Q Group name is.

02:03.480 --> 02:04.950
Q Group name.

02:07.090 --> 02:13.960
And then finally our async on message function that is going to take some data argument that is of type

02:13.970 --> 02:16.930
order cancelled event at data.

02:18.970 --> 02:20.920
And some message as well.

02:21.220 --> 02:23.650
And the message is coming from the node net streaming library.

02:23.650 --> 02:25.630
So let's import that type at the very top.

02:32.470 --> 02:32.830
Okay.

02:32.830 --> 02:37.210
So inside of your, as I mentioned, just about identical logic to the listener we just put together

02:37.210 --> 02:38.530
of order, create the listener.

02:38.920 --> 02:41.080
We want to once again find a ticket.

02:41.080 --> 02:47.380
If we can't find the ticket, throw an error, or then going to unset the order ID property, save the

02:47.380 --> 02:52.240
ticket, publish an event saying that a ticket has been updated, act the message and that's it.

02:52.600 --> 02:54.010
There should be pretty straightforward.

02:55.060 --> 02:58.600
In order to find the ticket itself, we are going to import ticket.

03:00.710 --> 03:02.000
From up to directories.

03:02.000 --> 03:03.290
Models ticket.

03:05.930 --> 03:10.400
Then down inside of on message, we'll make a new variable of ticket and that will come from a wait

03:10.400 --> 03:11.780
ticket dot.

03:11.900 --> 03:14.010
And how are we going to actually find the ticket right here?

03:14.040 --> 03:17.660
Remember in the past, it's been a really easy time finding all the relevant tickets because we could

03:17.660 --> 03:19.490
use find, buy I.D. or something similar.

03:19.490 --> 03:25.100
But we need to just keep in mind what information we actually have access to inside of this event.

03:25.100 --> 03:29.300
So to get a reminder of what information we have access to, we'll do a command click on order canceled

03:29.300 --> 03:34.370
event and that will tell us that we've got access to the order's ID, we've got access to the order's

03:34.370 --> 03:39.860
version, and we've also got access to the ID of the ticket that this order had reserved.

03:40.130 --> 03:42.410
That's how we can find the ticket inside of our tickets collection.

03:42.410 --> 03:45.230
We'll reference data ticket ID.

03:47.620 --> 03:48.700
So back over here.

03:48.700 --> 03:54.460
We're going to run a ticket, find buy ID, data dot ticket ID.

03:54.490 --> 03:56.140
That should find us the relevant ticket.

03:59.100 --> 03:59.600
Okay.

03:59.610 --> 04:00.600
So then after that.

04:02.310 --> 04:04.350
We'll say that if we fail to find this ticket.

04:04.350 --> 04:08.040
So if there is no ticket, then once again, let's throw a new air.

04:08.950 --> 04:11.140
And we'll just say something like, I don't know.

04:11.170 --> 04:12.250
They get not found.

04:13.120 --> 04:13.930
Simple enough.

04:15.340 --> 04:17.290
Then after that, we will make our update.

04:17.560 --> 04:23.080
We'll do a ticketed set of the order ID property and we want to clear this out.

04:23.080 --> 04:27.970
We want to say ticket not reserved anymore, so we're going to change it back over to undefined.

04:31.220 --> 04:33.620
We could potentially also put in null right here.

04:33.620 --> 04:38.120
But you might recall that there are a couple of locations where we are doing kind of an existence check

04:38.120 --> 04:41.600
with TypeScript by using a question mark or an if statement or something similar.

04:41.600 --> 04:46.880
That optional value, optional values with TypeScript don't work terribly well with null.

04:46.880 --> 04:49.400
And so instead we are just going to simply use undefined.

04:50.340 --> 04:52.260
Well, then do in a wait ticket, not save.

04:53.920 --> 04:57.340
After that, we will then publish an event saying that this ticket has been updated.

04:58.280 --> 04:59.600
So back up at the top.

05:01.490 --> 05:04.100
I'll once again get my ticket updated.

05:04.100 --> 05:04.910
Publisher.

05:06.180 --> 05:09.660
From up one directory publishers ticket updated publisher.

05:12.790 --> 05:15.310
Then right after the save, we'll do and wait.

05:16.360 --> 05:18.470
New ticket updated.

05:18.490 --> 05:19.270
Publisher.

05:19.780 --> 05:21.070
I'll pass in this client.

05:21.070 --> 05:22.660
We've been over that quite a bit now.

05:23.140 --> 05:27.010
We'll publish an event and once again, we're going to throw in a whole bunch of information from the

05:27.010 --> 05:27.850
ticket itself.

05:28.240 --> 05:30.880
So in total, the ID of the ticket.

05:32.670 --> 05:33.330
The New Order.

05:33.330 --> 05:34.980
I'd take care of that right away.

05:35.440 --> 05:36.210
That'll be a ticket.

05:36.430 --> 05:37.320
Order ID.

05:38.640 --> 05:39.120
What else?

05:39.120 --> 05:40.310
We got our user ID.

05:42.780 --> 05:43.680
Our price.

05:44.990 --> 05:45.830
Our title.

05:47.200 --> 05:47.890
And is that it?

05:47.890 --> 05:50.260
I feel like I'm missing one property on this thing.

05:51.490 --> 05:52.660
What is it?

05:53.260 --> 05:53.800
Version.

05:53.800 --> 05:54.490
There we go.

05:57.430 --> 05:57.880
Here we go.

05:57.910 --> 05:58.570
Very good.

05:59.500 --> 06:02.890
And then finally at the bottom, a message like so.

06:04.430 --> 06:04.640
Yes.

06:04.640 --> 06:05.360
That should be it.

06:06.780 --> 06:08.820
Well, this listener came together rather quickly.

06:08.820 --> 06:13.740
And as I mentioned many times, once we do something one time in the course, hopefully all following

06:13.770 --> 06:15.180
times get a little bit faster.

06:16.410 --> 06:20.130
So we should probably write out a quick test or two just to make sure that this thing works.

06:20.130 --> 06:23.100
I know testing these listeners has been pretty darn repetitive.

06:23.100 --> 06:25.320
It's really just the same thing again and again.

06:25.320 --> 06:30.450
But we've also seen several times where those tests help us catch a lot of different errors as well,

06:30.720 --> 06:34.530
specifically a lot of errors coming from TypeScript and whatnot, but nonetheless, it helps help us

06:34.530 --> 06:35.340
catch those.

06:35.550 --> 06:40.230
So even though I know the tests are a little bit tedious, I really do think they are absolutely worth

06:40.230 --> 06:40.500
it.

06:40.500 --> 06:44.520
They also help us capture and test out some kind of corner cases as well.

06:44.970 --> 06:46.290
So we'll do a quick pause right here.

06:46.290 --> 06:48.870
Come back next video and we're going to write out lightning quick.

06:48.900 --> 06:50.640
A quick test around this listener.

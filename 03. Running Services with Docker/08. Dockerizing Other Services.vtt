WEBVTT

00:01.110 --> 00:05.130
ما الان فایل‌های Dockerfile و .dockerignore رو برای سرویس post تنظیم کردیم.

00:05.130 --> 00:09.960
الان باید بریم سراغ داکرایز کردن بقیه سرویس‌هامون، چون همشون تقریباً ساختار مشابهی دارن.

00:09.960 --> 00:12.810
همه‌شون با Node نوشته شدن و دستور اجرای همه‌شون هم NPM start هست.

00:12.810 --> 00:16.680
پس می‌تونیم دقیقاً از همون فایل‌های Docker استفاده کنیم و کپی‌شون کنیم تو بقیه سرویس‌ها.

00:16.680 --> 00:20.850
حتی پروژه React هم همینطوره، اونم با Node اجرا می‌شه و با NPM start بالا میاد.

00:20.850 --> 00:24.510
پس بدون دغدغه همون دو فایل رو کپی می‌کنیم.

00:25.080 --> 00:27.360
داخل فولدر post، فایل‌ها رو انتخاب می‌کنم...

00:27.360 --> 00:33.150
و کپی‌شون می‌کنم داخل query، moderation، event-bus، comments و client.

00:34.200 --> 00:38.970
حالا اگه سرویس‌هامون با زبان‌های مختلف نوشته شده بودن یا تفاوت‌هایی تو محیط اجراشون وجود داشت...

00:38.970 --> 00:44.400
مثل نسخه متفاوتی از Node یا دستور شروع متفاوت، اون وقت نیاز بود Dockerfile اختصاصی برای هرکدوم بنویسیم.

00:46.650 --> 00:48.390
ولی چون از اول برنامه‌ریزی کردیم که همه شبیه هم باشن...

00:50.130 --> 00:52.020
الان می‌تونیم فایل‌های یکسان استفاده کنیم.

00:54.390 --> 00:55.530
تو پروژه واقعی معمولاً اینطور نیست...

00:56.830 --> 00:58.660
و هر سرویس نیاز به تنظیمات خاص خودش داره.

01:00.090 --> 01:06.060
خب، حالا برای اطمینان، یکی از سرویس‌ها رو به صورت تصادفی انتخاب می‌کنیم و تست می‌کنیم ببینیم ایمیج‌سازی درست انجام می‌شه.

01:06.060 --> 01:10.320
مثلاً سرویس event-bus رو انتخاب می‌کنیم.

01:10.320 --> 01:12.630
بریم داخل ترمینال و وارد پوشه event-bus بشیم.

01:12.930 --> 01:15.780
و دستور build رو اجرا می‌کنیم تا ایمیج ساخته بشه.

01:15.780 --> 01:19.620
انتظار نداریم خطایی ببینیم، فقط برای اطمینانه.

01:21.090 --> 01:25.950
داخل دایرکتوری event-bus دستور `docker build .` رو اجرا می‌کنیم.

01:25.950 --> 01:28.020
اگه خواستیم می‌تونیم یه تگ هم براش بزنیم.

01:28.020 --> 01:32.430
با اجرای این دستور، مثل همیشه node به عنوان بیس ایمیج گرفته می‌شه...

01:33.200 --> 01:33.650
دایرکتوری کاری تنظیم می‌شه...

01:33.650 --> 01:37.730
فایل package.json کپی می‌شه و وابستگی‌ها نصب می‌شن.

02:15.800 --> 02:19.880
کدهای باقی‌مونده پروژه هم کپی می‌شن داخل ایمیج، و بعد دستور پیش‌فرض اجرا تنظیم می‌شه.

02:20.300 --> 02:24.110
حالا می‌تونیم یا از ID ایمیج استفاده کنیم یا تگی که دادیم...

02:27.460 --> 02:30.580
و با دستور `docker run`، اون ایمیج رو اجرا کنیم.

02:32.120 --> 02:32.990
و تمومه.

02:34.100 --> 02:34.430
خب،

02:34.430 --> 02:36.440
الان به‌طور کلی پروژه‌مون Dockerized شده.

02:36.440 --> 02:40.760
هنوز برای همه سرویس‌ها ایمیج نساختیم، ولی همه‌چیز آماده‌ست که اون کارم انجام بدیم.

02:41.750 --> 02:47.000
پس عملاً الان کل پروژه‌مون آماده‌ی اجرا تو محیط داکر هست و می‌تونیم بریم مرحله‌ی بعد.

02:47.030 --> 02:49.890
توی ویدیوی بعدی، وارد دنیای Kubernetes می‌شیم.

02:49.910 --> 02:53.810
می‌خوایم ببینیم چطور می‌تونیم با Kubernetes، کانتینرها رو خیلی راحت اجرا کنیم

02:53.810 --> 02:54.360
و به هم متصل کنیم.

02:54.380 --> 02:59.210
یعنی کاری کنیم که همه‌ی این سرویس‌ها توی محیطی هماهنگ با هم اجرا بشن و با هم ارتباط داشته باشن.

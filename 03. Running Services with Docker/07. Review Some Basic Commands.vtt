WEBVTT

00:01.340 --> 00:05.390
توی این ویدیو قراره یه مرور سریع روی چندتا دستور پایه‌ای Docker داشته باشیم، تا این مفاهیم توی ذهنت تازه بمونه.

00:05.390 --> 00:06.750
ما این دستورات رو زیاد استفاده خواهیم کرد،

00:06.770 --> 00:10.970
و حتی نسخه‌هایی از اون‌ها رو که مخصوص Kubernetes هست هم اجرا می‌کنیم — ولی فعلاً نگران اون قسمت نباش.

00:15.260 --> 00:18.290
اولین دستوری که یادآوری می‌کنیم `docker build` هست.

00:18.290 --> 00:22.880
تو ویدیوی قبلی ازش استفاده کردیم، ولی برای یادآوری: هر وقت بخوایم یه ایمیج بسازیم،

00:22.880 --> 00:26.840
می‌تونیم از فلگ `-t` استفاده کنیم تا یه تگ برای اون ایمیج مشخص کنیم.

00:26.960 --> 00:32.390
با این تگ بعداً راحت‌تر می‌تونیم با اون ایمیج کار کنیم، چه برای ساخت کانتینر جدید، چه برای اجرای اون.

00:32.390 --> 00:34.250
می‌تونیم هم از ID استفاده کنیم هم از tag.

00:34.520 --> 00:37.490
مثلاً بریم سراغ سرویس پست‌مون:

00:38.780 --> 00:45.650
می‌تونیم بزنیم:  
`docker build -t docker-id/project-name .`  
که برای من می‌شه:  
`docker build -t stephengrider/post .`

00:45.650 --> 00:48.500
نقطه‌ی آخر یعنی از دایرکتوری فعلی build بگیر.

00:48.500 --> 00:53.720
از اونجایی که از ویدیوی قبلی تغییری ندادیم، این build خیلی سریع انجام می‌شه.

00:56.510 --> 01:01.370
حالا می‌تونم با استفاده از image ID یا همون tag که مشخص کردم، یه کانتینر از این ایمیج بسازم.

01:02.650 --> 01:07.810
یعنی مثلاً با دستور زیر:
`docker run stephengrider/post`

01:07.810 --> 01:10.240
این کانتینر رو راه‌اندازی می‌کنم و سرویس post بالا میاد.

01:12.340 --> 01:17.950
همون‌طور که دیدی، خیلی راحت می‌تونیم یه کانتینر بسازیم و اجرا کنیم.

01:17.950 --> 01:20.680
ولی فقط این نیست — می‌تونیم دستور پیش‌فرض رو هم override کنیم.

01:20.980 --> 01:23.080
یعنی چی؟

01:24.550 --> 01:28.480
یعنی به‌جای اینکه کانتینر به صورت خودکار مثلاً `npm start` رو اجرا کنه...

01:28.960 --> 01:29.650
ما می‌تونیم بگیم مثلاً bash اجرا بشه.

01:29.650 --> 01:31.180
یعنی یه ترمینال داخل اون کانتینر باز بشه.

01:33.540 --> 01:39.720
برای این کار از فلگ `-it` استفاده می‌کنیم که به معنی interactive + terminal هست.

01:39.720 --> 01:46.620
و بعدش دستور جایگزین رو می‌نویسیم.

01:46.620 --> 01:50.610
مثلاً بزنیم:  
`docker run -it stephengrider/post sh`

01:51.210 --> 01:56.640
که این باعث می‌شه داخل همون کانتینری که مربوط به سرویس post هست، یه shell باز بشه و بتونیم از داخلش دستورات بزنیم.

01:56.640 --> 01:57.270
و به‌جای اینکه مستقیم npm start بزنه...

01:57.270 --> 02:01.890
ما خودمون کنترل کامل داریم که داخل اون کانتینر چی اجرا کنیم.

02:07.320 --> 02:13.290
مثلاً می‌تونم بزنم: `docker run -it stephengrider/post sh`  
که `sh` همون Shell ساده است (مخفف shell).

02:13.290 --> 02:14.160
یه نوع خاص از ترمیناله،

02:14.160 --> 02:19.290
تقریباً معادل bash توی سیستم‌عامل‌های Unix مثل لینوکس یا macOS.

02:19.290 --> 02:20.100
یعنی یه محیط دستور ساده.

02:21.360 --> 02:26.460
الان به‌جای اینکه سرور رو اجرا کنه، من داخل اون کانتینر یه محیط shell دارم و می‌تونم توش دستور بزنم.

02:26.460 --> 02:30.820
یعنی هرچی تایپ کنم، داخل همون کانتینر اجرا می‌شه.

02:30.840 --> 02:36.900
مثلاً می‌زنم `ls` تا لیست فایل‌های داخل اون ایمیج یا کانتینر رو ببینم.

02:36.900 --> 02:38.040
یا می‌تونم مسیر عوض کنم.

02:39.280 --> 02:43.150
مثلاً می‌رم تو مسیر root و می‌زنم `ls` تا کل دایرکتوری‌ها و فایل‌ها رو ببینم.

02:44.770 --> 02:46.890
برای خروج از کانتینر، می‌تونی `exit` بزنی.

02:47.200 --> 02:53.720
البته خود من معمولاً عادت دارم Ctrl + C یا Cmd + C بزنم، ولی بهتره از `exit` استفاده کنید.

02:55.440 --> 02:55.860
خب

02:55.890 --> 02:56.880
بریم سراغ دستور بعدی.

02:57.490 --> 02:57.910
`docker ps`

02:57.920 --> 03:02.320
این دستور لیست تمام کانتینرهایی که الان در حال اجرا هستن رو نشون می‌ده.

03:02.830 --> 03:06.550
مثلاً اگه توی یه ترمینال کانتینری رو اجرا کردی و بعد یه ترمینال جدید باز کردی و زدی `docker ps`...

03:07.720 --> 03:10.810
می‌تونی ببینی کانتینر فعاله، IDش چیه، با چه ایمیجی ساخته شده، چه دستوری اجرا شده و چند وقت پیش ساخته شده.

03:11.200 --> 03:16.180
یه ابزار خیلی خوب برای مانیتور کردن کانتینرهاست.

03:22.060 --> 03:26.080
حالا اگه یه کانتینر در حال اجرا باشه، می‌تونی هر دستوری رو داخلش اجرا کنی.

03:26.290 --> 03:31.960
برای این کار از `docker exec -it` استفاده می‌کنیم + ID کانتینر + دستور مورد نظر.

03:31.960 --> 03:33.700
مثلاً می‌خوای یه shell داخل یه کانتینر باز کنی.

03:34.210 --> 03:39.520
ID اون کانتینر رو از `docker ps` می‌گیری، بعد می‌زنی:  
`docker exec -it container_id sh`

03:39.520 --> 03:40.900
و دوباره وارد ترمینال اون کانتینر می‌شی.

03:54.620 --> 03:58.280
یه دستور خیلی مفید دیگه هم داریم: `docker logs`

03:58.310 --> 04:04.190
این دستور لاگ‌هایی که پروسه اصلی داخل کانتینر تولید کرده رو چاپ می‌کنه.

04:05.180 --> 04:11.090
مثلاً اگه یه کانتینر با `npm start` بالا اومده و لاگ توی کنسول چاپ کرده، `docker logs` اون‌ها رو نشون می‌ده.

04:13.770 --> 04:17.250
می‌تونیم کانتینر رو stop کنیم و بعد دوباره بدون override کردن command، اجراش کنیم:

04:17.610 --> 04:21.510
`docker run stephengrider/post`

04:22.760 --> 04:27.830
و همون لحظه، `npm start` اجرا می‌شه و لاگ‌هایی رو روی stdout چاپ می‌کنه.

04:27.830 --> 04:30.020
و این لاگ‌ها همون چیزیه که داخل ترمینال می‌بینیم.

04:30.020 --> 04:31.310
حالا چجوری از یه جای دیگه بخونیمش؟

04:31.760 --> 04:35.540
توی یه ترمینال دیگه می‌تونی بزنی `docker ps`، ID کانتینر رو بگیری.

04:36.380 --> 04:40.130
و بعد بزنی:  
`docker logs container_id`

04:41.820 --> 04:45.990
و این کل لاگ‌هایی که پروسه اصلی چاپ کرده رو بهت نشون می‌ده.

04:47.340 --> 04:50.670
خیلی کاربردیه، مخصوصاً برای دیباگ کردن سرویس‌ها داخل کانتینر.

04:53.640 --> 04:53.940
خب، تا اینجا کافی بود.

04:53.940 --> 04:55.950
خب، اینا فقط یه‌سری دستورات خیلی پایه‌ای بودن.

04:55.950 --> 04:59.670
ما قراره این دستورات رو توی پروژه‌مون زیاد استفاده کنیم و همچنین نسخه‌های مشابه‌شون رو توی دنیای Kubernetes هم اجرا کنیم.

04:59.670 --> 05:05.070
مثلاً برای بررسی وضعیت کانتینرها و اینکه داخلشون چه خبره، این ابزارها خیلی به درد می‌خورن.

05:07.310 --> 05:11.660
تا اینجای کار دیدیم که چطور می‌شه از Docker استفاده کرد، چطور یه ایمیج ساختیم...

05:11.660 --> 05:14.560
و فعلاً این ایمیج فقط برای سرویس post بود.

05:14.570 --> 05:15.980
خب، همین‌جا یه توقف کوتاه داشته باشیم.

05:15.980 --> 05:19.700
توی ویدیوی بعدی، فایل Dockerfile و .dockerignore رو برمی‌داریم

05:19.700 --> 05:23.300
و برای همه‌ی سرویس‌های دیگه‌مون هم کپی می‌کنیم تا Docker رو به کل پروژه اعمال کنیم.

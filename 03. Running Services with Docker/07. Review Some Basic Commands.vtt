WEBVTT

00:01.340 --> 00:05.390
In this video, we're going to do a quick overview of some very basic Docker commands just to make sure

00:05.390 --> 00:06.750
these are fresh in your mind.

00:06.770 --> 00:10.970
We're going to be running all the commands you see here quite a bit and also running some variants of

00:10.970 --> 00:13.220
them that are based on Kubernetes as opposed to Docker.

00:13.220 --> 00:14.930
But don't worry about that part just yet.

00:15.260 --> 00:18.290
So first command we're going to get a quick reminder on is Docker build.

00:18.290 --> 00:22.880
We did just run this in the last video, but just as a reminder, whenever we build a new image, we

00:22.880 --> 00:26.840
can add on that dash flag that will tag the image that is created.

00:26.960 --> 00:32.390
If we add on the dash t, then we can easily create a new container out of that image using either the

00:32.390 --> 00:34.250
image ID or the image tag.

00:34.520 --> 00:37.490
So for example, if we go back over to our post service.

00:38.780 --> 00:45.650
We can do a Docker, build a dash T and then usually we'll put in our Docker ID, which for me is Stephen

00:45.650 --> 00:48.500
Grider Slash and then the name of our project.

00:48.500 --> 00:53.720
So for us it'd be post and then after that we would put in a dot to specify that we want to build this

00:53.720 --> 00:56.030
image out of the current directory that we're in.

00:56.510 --> 01:01.370
So I would run that the build runs very quickly because I've not made any changes to it from the last

01:01.370 --> 01:01.940
video.

01:02.650 --> 01:07.810
And now I can create an image out or a container out of this image using either the image ID that's

01:07.810 --> 01:10.240
right there or the tag that is right there.

01:12.340 --> 01:17.950
Once we have built the image, we can create and start a container based on it by using Docker run and

01:17.950 --> 01:20.680
then providing either the image ID or the tag.

01:20.980 --> 01:23.080
So for example, I could now do.

01:24.550 --> 01:28.480
Docker run Steven Grider posts like so.

01:28.960 --> 01:29.650
And there we go.

01:29.650 --> 01:31.180
There's our post service.

01:33.540 --> 01:39.720
Next up, whenever we start up a container, we can either just use Docker run by itself, or alternatively

01:39.720 --> 01:46.620
we can override the default command of the container by providing both that it flag right there and

01:46.620 --> 01:50.610
then the command that we want to execute instead of the default one right there at the very end.

01:51.210 --> 01:56.640
So for example, I could start up that post service container that we just created and start up a shell

01:56.640 --> 01:57.270
inside there.

01:57.270 --> 02:01.890
So essentially a terminal window inside that container rather than actually running the default command,

02:01.890 --> 02:03.270
which is NPM start.

02:03.570 --> 02:06.330
So we could do a Docker run, dash it.

02:07.320 --> 02:13.290
Stephen Greider posts and I would put in S-H, which will start up a shell inside their S-H is short

02:13.290 --> 02:14.160
for the word shell.

02:14.160 --> 02:19.290
It is a very specific type of shell, essentially equivalent to if you're running bash right now on

02:19.290 --> 02:20.100
your computer.

02:21.360 --> 02:26.460
And so now, rather than running our server inside there, I've got a shell running and inside of here

02:26.460 --> 02:30.820
I can run typical commands, all being executed inside of that container.

02:30.840 --> 02:36.900
So if I do an LZ, I'll see all of the files that have been built inside that image or change to the

02:36.900 --> 02:38.040
or the container.

02:39.280 --> 02:43.150
Or I can change to my route directory and prints out all the files and folders inside of their.

02:44.770 --> 02:46.890
And then if I want to exit, I can hit command.

02:47.200 --> 02:53.720
I always smash commands or control C out of habit, but control or command.

02:55.440 --> 02:55.860
Okay.

02:55.890 --> 02:56.880
Next comment.

02:57.490 --> 02:57.910
Docker.

02:57.920 --> 03:02.320
PS We can use this to print out information about all the containers that we are currently running.

03:02.830 --> 03:06.550
So for example, if we start up a container in one terminal window.

03:07.720 --> 03:10.810
And then open up a second terminal window and do a Docker piece in there.

03:11.200 --> 03:16.180
We'll see the ID of the running container, the image that is using the command that was used to start

03:16.180 --> 03:18.910
it up, how long ago it was created and so on.

03:22.060 --> 03:26.080
Once a container is running, we can also execute arbitrary commands inside of it.

03:26.290 --> 03:31.960
So for example, we could do a Docker exec, dash it, then put in the container ID and then the command

03:31.960 --> 03:33.700
that we want to actually run inside there.

03:34.210 --> 03:39.520
So for example, if I wanted to start up a shell inside of my running post service right now, I could

03:39.520 --> 03:40.900
take that container ID.

03:41.580 --> 03:48.480
I could do a Docker exec dash it, but in that ID and then once again run S-H and that will start up

03:48.480 --> 03:50.190
a shell inside that running container.

03:54.620 --> 03:58.280
And then finally, one more very useful command is Docker logs.

03:58.310 --> 04:04.190
This will print out all the logs that have been executed emitted by the primary process inside of that

04:04.190 --> 04:04.850
container.

04:05.180 --> 04:11.090
So for example, if I flip back over, I'm going to stop the running container.

04:13.770 --> 04:17.250
I'll then start it back up, but I'm not going to override the default command.

04:17.610 --> 04:21.510
So we'll do a Docker run even greater post.

04:22.760 --> 04:27.830
And so as soon as I start this up, our primary process, which is that NPM start command is emitting

04:27.830 --> 04:30.020
some different logs here over standard out.

04:30.020 --> 04:31.310
That's everything we see right here.

04:31.760 --> 04:35.540
I can get all that information printed out inside of a second terminal window.

04:36.380 --> 04:40.130
By doing a Docker, he's getting the new container ID.

04:41.820 --> 04:45.990
And then a docker logs and I'll provide the relevant container ID.

04:47.340 --> 04:50.670
And that will essentially show me everything that that primary process has emitted.

04:53.640 --> 04:53.940
Okay.

04:53.940 --> 04:55.950
So again, just some very basic commands.

04:55.950 --> 04:59.670
We are going to be using these commands quite a bit and again, we'll be running kind of variants of

04:59.670 --> 05:05.070
them in the Kubernetes world in just a little bit as well, to just inspect what's going on inside of

05:05.070 --> 05:06.510
all of our different containers.

05:07.310 --> 05:11.660
Well, at this point, we have seen how to make use of Docker, how to build an image.

05:11.660 --> 05:14.560
We've made an image out of just the post service.

05:14.570 --> 05:15.980
So let's take a quick pause right here.

05:15.980 --> 05:19.700
When we come back, the next video, we're going to take that Docker file and Docker ignore, and we're

05:19.700 --> 05:23.300
going to copy it over to all of our different other services as well.

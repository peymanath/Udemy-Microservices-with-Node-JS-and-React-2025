WEBVTT

00:01.120 --> 00:04.160
توی چند ویدیوی گذشته درباره Docker و Kubernetes صحبت کردیم.

00:04.180 --> 00:08.320
امیدوارم فرصت کرده باشی و ویدیوهای ضمیمه آخر دوره رو درباره Docker هم دیده باشی تا بیشتر باهاش آشنا بشی.

00:08.320 --> 00:10.660
اگه قبلاً باهاش آشنا نبودی، الان دیگه بلدی.

00:10.990 --> 00:13.630
پس یعنی الان حرفه‌ای Docker شدی، درسته؟ شوخی کردم :)

00:13.780 --> 00:15.880
انتظار ندارم که حرفه‌ای شده باشی.

00:15.910 --> 00:20.470
فقط می‌خوام در حد پایه بدونی container چیه، image چیه، چطور image بسازی، چطور container راه بندازی و چند تا دستور مهم.

00:20.470 --> 00:25.520
قراره توی این ویدیو شروع کنیم به Dockerize کردن سرویس post و کمی با image و container کار کنیم.

00:25.520 --> 00:26.390
بریم سراغش.

00:26.410 --> 00:30.160
برای اینکه سرویس post رو Dockerize کنیم، اول باید ازش یه image بسازیم.

00:30.160 --> 00:33.310
یادت باشه برای ساخت image باید یه فایل Dockerfile درست کنیم و بعدش دستور docker build رو اجرا کنیم.

00:33.980 --> 00:35.060
تو این دیاگرام،

00:36.640 --> 00:41.050
مراحل مختلفی که قراره توی فایل Dockerfile برای پروژه post بنویسیم لیست شده.

00:41.050 --> 00:41.350
اولین کار اینه که...

00:41.350 --> 00:45.160
یک base image مشخص کنیم — که تو اینجا از Node Alpine استفاده می‌کنیم.

00:45.980 --> 00:49.970
بعدش یه working directory مشخص می‌کنیم که همه دستورات بعدی داخل اون اجرا بشن.

00:49.970 --> 00:51.740
مثلاً پوشه app.

00:51.980 --> 00:55.790
بعد فقط فایل package.json رو کپی می‌کنیم داخل کانتینر.

00:56.360 --> 01:01.160
سپس با استفاده از اون، پکیج‌ها رو نصب می‌کنیم.

01:01.160 --> 01:03.860
بعد از اون، باقی سورس‌کد پروژه‌مون رو کپی می‌کنیم داخل کانتینر.

01:04.570 --> 01:07.150
یعنی همه فایل‌ها از فولدر post.

01:07.330 --> 01:09.610
در نهایت، دستور پیش‌فرض اجرا رو مشخص می‌کنیم که همون npm start هست.

01:10.500 --> 01:13.410
حالا بریم توی ویرایشگر کد و این Dockerfile رو بسازیم.

01:14.240 --> 01:18.410
برمی‌گردم به ادیتور، می‌رم توی دایرکتوری post.

01:19.990 --> 01:23.410
توی اونجا یه فایل جدید می‌سازم به اسم Dockerfile.

01:24.560 --> 01:25.640
یادت باشه اسمش باید دقیقاً Dockerfile باشه با D بزرگ و بدون هیچ پسوندی.

01:25.640 --> 01:26.990
هیچ .txt یا .js یا چیز دیگه نداشته باشه.

01:28.480 --> 01:34.090
حالا اون دستوراتی که توی دیاگرام دیدیم رو به ترتیب توی این فایل می‌نویسیم.

01:34.090 --> 01:35.860
ابتدا base image رو مشخص می‌کنیم.

01:36.600 --> 01:38.130
بعد working directory رو تنظیم می‌کنیم به app.

01:38.130 --> 01:40.020
بعد فقط package.json رو کپی می‌کنیم.

01:40.560 --> 01:43.260
سپس دستور npm install رو اجرا می‌کنیم تا وابستگی‌ها نصب بشن.

01:45.010 --> 01:48.010
بعدش بقیه فایل‌های پروژه (مثل index.js) رو کپی می‌کنیم.

01:49.440 --> 01:52.890
و در نهایت دستور پیش‌فرض اجرا رو می‌ذاریم npm start.

01:54.080 --> 01:57.890
حالا فایل Dockerfile ما آماده‌ست و می‌تونیم باهاش image بسازیم.

02:15.420 --> 02:16.290
و همین‌قدر کافی بود.

02:17.460 --> 02:19.770
حالا یک کار دیگه هم خیلی سریع انجام می‌دیم.

02:19.770 --> 02:24.000
یادتونه تو ویدیوهای بخش ضمیمه گفتیم که معمولاً نباید وابستگی‌هایی که روی سیستم لوکالمون نصب شدن رو توی ایمیج داکر بیاریم؟

02:24.000 --> 02:26.840
توی مورد ما، این یعنی پوشه‌ی node_modules.

02:26.850 --> 02:31.680
برای اینکه مطمئن بشیم موقع ساختن ایمیج، این پوشه کپی نمی‌شه، داخل پوشه post یک فایل جدید می‌سازیم...

02:38.420 --> 02:39.440
به اسم...

02:39.440 --> 02:40.850
حتماً یادت باشه با نقطه شروع بشه

02:41.090 --> 02:42.710
.dockerignore

02:44.040 --> 02:47.670
و داخل این فایل فقط می‌نویسیم: `node_modules`

02:47.670 --> 02:52.350
این باعث می‌شه موقع ساخت ایمیج، پوشه node_modules کپی نشه، چون داکر خودش موقع ساخت ایمیج، پکیج‌ها رو نصب می‌کنه.

02:59.780 --> 03:00.200
خب،

03:00.200 --> 03:02.450
حالا این دو فایل رو ببندیم،

03:02.720 --> 03:04.400
و برگردیم به ترمینال.

03:07.170 --> 03:12.870
وارد پوشه‌ی post می‌شیم و دستور docker build . رو اجرا می‌کنیم.

03:14.580 --> 03:19.710
این کار باعث می‌شه ایمیج پایه‌ی node رو بیاره، دایرکتوری کاری رو تنظیم کنه، package.json رو کپی کنه، پکیج‌ها رو نصب کنه،

03:19.710 --> 03:22.710
و در ادامه، باقی فایل‌های پروژه رو هم کپی می‌کنه،

03:23.040 --> 03:25.230
و دستور پیش‌فرض اجرا رو تنظیم می‌کنه.

03:25.710 --> 03:30.540
در نهایت، یک ID به ما می‌ده که نشون می‌ده ایمیج با موفقیت ساخته شده.

03:30.540 --> 03:34.410
حالا می‌تونیم با اون ID یک کانتینر بسازیم، یعنی درواقع یک نمونه از اون ایمیج رو اجرا کنیم.

03:34.950 --> 03:42.060
کافیه ID رو کپی کنیم و دستور docker run رو به همراه اون ID بزنیم.

03:47.610 --> 03:48.450
و تمام.

03:48.480 --> 03:50.670
به نظر می‌رسه سرور با موفقیت اجرا شده.

03:51.180 --> 03:52.890
خب، این قدم خیلی خوبی بود.

03:53.010 --> 03:54.180
اینجا یه توقف کوتاه داشته باشیم.

03:54.180 --> 03:58.890
و همون‌طور که گفتم، توی ویدیوی بعدی یک مرور سریع روی دستورات پایه‌ای داکر خواهیم داشت

03:58.890 --> 04:02.280
تا مطمئن بشیم به‌درستی می‌تونیم با یک کانتینر در حال اجرا کار کنیم.

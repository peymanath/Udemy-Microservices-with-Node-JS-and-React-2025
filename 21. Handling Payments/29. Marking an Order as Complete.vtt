WEBVTT

00:00.780 --> 00:04.710
Well, believe it or not, we are on to just about the last step in our app store.

00:04.710 --> 00:10.620
Our payment service is emitting not a charge created event, but a payment created event.

00:10.620 --> 00:13.200
As we discussed, we rename that kind of on the fly.

00:13.620 --> 00:15.870
We're now going to receive that inside of our order service.

00:15.870 --> 00:21.570
Inside the order service, we're going to update the order status over to complete or paid for or whatever

00:21.570 --> 00:23.370
it was we call that final status.

00:23.580 --> 00:27.600
So let's get to it back inside of my orders service.

00:29.340 --> 00:37.320
I'll find my listeners directory and inside there I'll make a new file of payment created listener dots.

00:38.340 --> 00:41.850
As usual at the very top, I'll add in a couple of imports from our common module.

00:42.360 --> 00:45.300
So we're going to get subjects listener.

00:46.900 --> 00:50.290
And our payment created event.

00:51.550 --> 00:53.350
We'll get all that from our common module.

00:55.270 --> 00:59.740
Well then go ahead and export a new class of payment created listener.

01:01.070 --> 01:05.840
That will extend listener base class through in payment created event.

01:07.590 --> 01:11.610
We'll define the subject as subjects, not payment created.

01:12.420 --> 01:14.610
And the value as payment created.

01:15.870 --> 01:16.380
At the top.

01:16.380 --> 01:19.830
I'll also add in an import for our Q group name.

01:21.830 --> 01:23.210
From the Q Group name file.

01:25.100 --> 01:26.150
And do our assignment.

01:26.150 --> 01:26.720
So Q.

01:26.750 --> 01:28.340
Group name is Q.

01:28.370 --> 01:29.420
Group name.

01:31.270 --> 01:36.190
And then finally our on sync or async on message function.

01:37.340 --> 01:44.000
This will have a type or an argument of data which is of type payment created event at data.

01:46.510 --> 01:51.880
And then the message object, which is a type message and naturally let's add an import for message

01:51.880 --> 01:53.020
at the top as well.

01:56.280 --> 01:56.880
Okay.

01:57.450 --> 01:59.190
Now the on message function.

01:59.190 --> 02:00.870
So what we really need to do inside of here.

02:00.900 --> 02:05.760
Well, pretty much all we need to do is take a look at the order inside of our order service.

02:06.030 --> 02:11.010
We're going to make sure that we update the order status to paid or complete or, again, whatever that

02:11.010 --> 02:11.970
status was.

02:14.020 --> 02:17.260
So at the top of the file I am going to import our order model.

02:20.180 --> 02:22.610
From up one directory up another directory.

02:22.610 --> 02:24.110
Models order.

02:24.960 --> 02:28.290
And I'll also get our order status from our common module.

02:28.620 --> 02:31.230
So order status like so.

02:32.510 --> 02:36.500
Then instead of on message, we're going to first take a look at all of our different orders and we're

02:36.500 --> 02:40.040
going to try to find the appropriate order, the one that we just paid for.

02:40.880 --> 02:46.040
As a reminder for this step, we have an order ID property inside of this data object.

02:46.040 --> 02:50.060
We just put that data object together or the interface together.

02:50.060 --> 02:51.920
So we've got order ID inside there.

02:53.540 --> 03:02.810
So say order is a wait order dot find by ID and fasten data order ID.

03:04.380 --> 03:07.620
Well, then, of course, do a quick check just to make sure that we actually found the correct order.

03:07.620 --> 03:11.790
So if there is not an order now, let's just throw a new air.

03:12.600 --> 03:15.540
And say order not found.

03:17.830 --> 03:20.440
Otherwise we'll update the status of the order and then save it.

03:20.830 --> 03:21.970
So we'll do an order.

03:22.810 --> 03:23.620
Set.

03:27.600 --> 03:29.460
We want to set it status property.

03:30.000 --> 03:33.690
And again, we want to take a look at that order status enum inside there.

03:33.690 --> 03:35.640
I believe the order status was something like paid.

03:35.640 --> 03:37.830
So we're going to set it to order status dot.

03:39.070 --> 03:39.550
Complete.

03:39.550 --> 03:41.170
That's what we called it complete.

03:42.290 --> 03:44.960
I mean, after setting that property, we will save the order.

03:46.530 --> 03:51.510
And then naturally, for the last step, we're going to make sure we act the message so message like

03:51.510 --> 03:51.960
so.

03:53.990 --> 03:58.370
So I'm going to say this and then the last very quick thing we're going to do is go back to our index

03:58.820 --> 04:01.130
file at the root of our CRC directory.

04:01.130 --> 04:06.320
Inside the order service, we will import this payment created listener and make sure that we tell it

04:06.320 --> 04:08.000
to start listening on our APS.

04:08.000 --> 04:10.850
Start up inside the index file.

04:12.590 --> 04:14.090
I'm going to go back up to the top.

04:15.800 --> 04:18.950
And along with all of our other listeners inside of here, I will get the.

04:20.170 --> 04:21.010
He meant.

04:21.760 --> 04:23.710
Created listener.

04:26.560 --> 04:29.980
From events, listeners omit created.

04:33.570 --> 04:37.740
And then with all the other listeners will create the instance down here and tell it to start listening

04:37.740 --> 04:38.640
for events.

04:38.970 --> 04:41.550
The New Payment Created Listener.

04:42.470 --> 04:45.080
Bass in the nets rapper client.

04:45.470 --> 04:47.360
And start listing like so.

04:48.580 --> 04:49.750
And that's pretty much it.

04:52.160 --> 04:52.520
Okay.

04:52.520 --> 04:54.160
So we got that last listener put together.

04:54.170 --> 04:59.060
Now, one thing I want to mention here is that we are making a change to our order and we are saving

04:59.060 --> 04:59.180
it.

04:59.180 --> 05:03.410
And remember, every single time we make a save or make a change, that's going to increment the version

05:03.410 --> 05:03.980
number.

05:04.010 --> 05:08.480
And as we discussed previously, if we ever make a change and increment that version number without

05:08.480 --> 05:13.790
emitting an event, that means that any time we emit a further event around this order, we might have

05:13.790 --> 05:17.300
some missing versions for all of our other dependent services.

05:18.110 --> 05:23.690
So ideally in this scenario, we would have an additional event type inside of our app, something to

05:23.690 --> 05:28.460
just do something like, I don't know, order updated or something very similar to that.

05:28.550 --> 05:29.930
That would definitely be ideal.

05:29.930 --> 05:34.880
But in the context of our application, once an order goes into the complete status, that's pretty

05:34.880 --> 05:35.300
much it.

05:35.300 --> 05:36.530
Order is complete.

05:36.530 --> 05:38.390
It's never going to be updated again.

05:39.320 --> 05:43.160
So although we really technically should emit or publish even event here, just saying that this thing

05:43.160 --> 05:48.110
has been updated just because I don't expect any other service to ever try to update an order after

05:48.110 --> 05:49.830
this or to make any further changes.

05:49.850 --> 05:51.770
I'm pretty much just going to leave it as it is.

05:52.190 --> 05:55.340
This is really just in the context of this course to save a little bit of time.

05:55.340 --> 06:00.470
So if you want to create a new event type of order updated and tell everyone else in the world or all

06:00.560 --> 06:03.620
of our other services that the order has been updated, absolutely.

06:03.620 --> 06:04.490
Feel free to do so.

06:04.490 --> 06:08.390
But again, we're not going to take the time because we've spent quite a bit of time already in this

06:08.390 --> 06:10.070
course on this entire application.

06:10.950 --> 06:11.200
Okay.

06:11.250 --> 06:12.120
So that's pretty much it.

06:12.150 --> 06:13.200
Let's take a pause right here.

06:13.200 --> 06:17.610
And as you guess, we're going to start to move back on to our React application in the next section.

WEBVTT

00:01.000 --> 00:04.930
Before we move on from the exploration complete listener, I do want to mention that you might notice

00:04.930 --> 00:06.880
a little hole in logic inside of here.

00:06.910 --> 00:11.830
At present we are saying that any time we receive the expiration complete event, we are always going

00:11.830 --> 00:16.720
to set in order to cancelled and this will be applied even if an order has already been paid for.

00:16.870 --> 00:19.840
So I just want to point out that there is a little bit of a hole in here.

00:19.840 --> 00:24.070
So we're going to first take care of our payment service and then once we have the idea of payments,

00:24.070 --> 00:29.770
we're going to revisit this thing and make sure that we consider a order that has been paid for to be

00:29.770 --> 00:33.400
fully complete and that we should not cancel it after we have paid for it.

00:34.240 --> 00:37.150
So with all that in mind, I bet you can guess what we're going to do next.

00:37.150 --> 00:37.930
Yep, that's right.

00:37.930 --> 00:42.460
We're going to start to work on our payments service, the payment service right here.

00:43.000 --> 00:47.830
I want to first begin by just getting a quick overview on what events this thing is going to be receiving

00:47.830 --> 00:49.270
and what it's going to be emitting.

00:50.320 --> 00:54.220
The payment service is going to first receive an event of order created.

00:54.880 --> 00:58.210
It will receive this event just to tell it that, hey, here's some order.

00:58.210 --> 01:00.010
Expect to get a payment for it.

01:00.160 --> 01:04.840
The real goal of communicating order created over is to make sure that the payment service knows how

01:04.840 --> 01:07.180
much money in addition it should be receiving.

01:08.610 --> 01:12.060
Besides that, the payment service is also going to listen for order cancelled.

01:12.060 --> 01:17.070
So as soon as the order service emits a order cancelled event, we're going to want to tell payments.

01:17.070 --> 01:18.630
Hey, time to stop listening for events.

01:18.630 --> 01:21.810
If anyone tries to submit a payment, just reject it.

01:23.990 --> 01:28.430
And then finally the payment service itself is going to emit a charge created event.

01:28.610 --> 01:34.160
So charge created represents someone paying us some money for an order that church created is eventually

01:34.160 --> 01:38.600
going to go over to the order service and tell it that someone has paid for an order and we should market

01:38.600 --> 01:41.090
as paid or complete or whatever else.

01:42.210 --> 01:44.160
So that is the payment service in a nutshell.

01:44.190 --> 01:47.970
Now, obviously, we have not really discussed and we want for just a little bit how are we going to

01:47.970 --> 01:49.690
actually accept payments?

01:49.710 --> 01:52.710
Yes, we are going to handle actual credit card numbers and whatnot.

01:52.710 --> 01:55.500
This is going to be a pretty realistic looking payment service.

01:55.500 --> 01:59.230
But right now, let's just do a little bit of initial setup on that thing.

01:59.250 --> 02:00.510
So quick pause right here.

02:00.510 --> 02:04.680
When we come back, the next video, we're going to start to duplicate the ticket service again, get

02:04.680 --> 02:09.420
all those dependencies, use some Kubernetes setup, all that stuff that we are now very much used to

02:09.420 --> 02:09.900
doing.

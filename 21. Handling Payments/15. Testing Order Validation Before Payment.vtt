WEBVTT

00:01.240 --> 00:05.860
Let's put together a couple of quick tests to make sure that we handle these three different cases appropriately.

00:06.250 --> 00:11.230
So inside of my roots directory, I'm going to make a new folder of underscore, underscore, test,

00:11.230 --> 00:12.460
underscore, underscore.

00:12.820 --> 00:16.510
And then inside that I'll make a new file of new test TS.

00:17.320 --> 00:19.930
It has been a while since we tested out a route handler.

00:19.930 --> 00:24.190
But remember, it's a lot easier to test a route handler than a listener or a publisher.

00:24.370 --> 00:28.660
All we really have to do is make use of the request or the super test library.

00:28.960 --> 00:31.180
We're also going to make sure that we get our Express app.

00:31.480 --> 00:34.660
We're going to make requests to the Express app, and that's pretty much it.

00:35.200 --> 00:43.540
So at the very top, we'll import request from super test and we'll also get our Express app from up

00:43.540 --> 00:44.560
to directories.

00:48.500 --> 00:50.990
So we can start to write out a couple of different test cases.

00:51.990 --> 00:56.370
Maybe the first test case we should write out is make sure that we throw an error if we try to purchase

00:56.370 --> 00:57.780
an order that does not exist.

00:59.420 --> 01:08.300
So I'll put in a description here of it returns a 404 when purchasing an order that does not exist.

01:11.510 --> 01:13.570
Let's write out the other test cases as well.

01:13.580 --> 01:18.770
So we should also handle something where we are trying to pay for the order as a different user and

01:18.770 --> 01:23.540
something around making sure that we cannot order or pay for an order after it's been cancelled.

01:24.570 --> 01:25.560
So it.

01:27.660 --> 01:29.520
Returns a 401.

01:30.220 --> 01:34.540
When purchasing an order that doesn't belong to the user.

01:37.490 --> 01:41.030
And it returns a 400.

01:42.590 --> 01:45.950
When purchasing a cancelled order.

01:49.840 --> 01:50.230
Okay.

01:50.260 --> 01:52.900
So now we can write out some actual implementation for each of these.

01:53.260 --> 01:56.140
Naturally, we will start off with the 404/1.

01:56.590 --> 01:59.270
So inside of here, I'll put in and await.

01:59.920 --> 02:01.390
Make a request to app.

02:03.430 --> 02:08.710
I want to make a post request to API slash payments.

02:10.760 --> 02:16.700
I do need to set a cookie on this thing using that global sign in function, because we are requiring

02:16.700 --> 02:19.670
a user to be authenticated to make a request to this handler.

02:20.150 --> 02:24.740
So we do have to call the set cookie to global sign in.

02:27.250 --> 02:28.630
And then we're going to send along.

02:29.870 --> 02:31.730
Some imaginary token for right now.

02:32.810 --> 02:34.610
And in order for.

02:34.610 --> 02:36.020
Well, nothing.

02:37.350 --> 02:40.200
Now this order ID might end up throwing some kind of error.

02:40.200 --> 02:44.100
When we make a query with it, we might get some kind of error from Mongoose saying, Hey, sorry,

02:44.100 --> 02:47.850
but this thing is not an actual mongoose ID or MongoDB ID.

02:48.060 --> 02:54.180
So rather than throwing in a gibberish mongodb ID right there, order ID, let's generate a real looking

02:54.180 --> 02:58.680
ID using mongoose once again at the very top I will import Mongoose.

02:59.870 --> 03:04.830
The Mongoose, and therefore the order ID will throw in mongoose types.

03:04.830 --> 03:08.250
Object ID to x string.

03:10.960 --> 03:14.980
And then after we send that request off, we will expect to get back a44.

03:15.660 --> 03:16.800
And that should be it.

03:18.570 --> 03:22.590
Let's save this right away and make sure that this test succeeds.

03:24.150 --> 03:25.320
Back inside my terminal.

03:25.950 --> 03:27.420
I still have all my tests running.

03:27.840 --> 03:29.760
It looks like that test just passed as usual.

03:29.760 --> 03:31.350
Let's try to make it actually fail.

03:31.830 --> 03:33.060
So I'm going to send along.

03:33.930 --> 03:39.150
I'll go back over to my handler and I'm going to remove that check to make sure that we actually have

03:39.150 --> 03:39.810
in order.

03:41.860 --> 03:45.160
You'll notice that the other checks right here start to fail as well.

03:46.710 --> 03:48.660
So I'll comment those out temporarily.

03:50.990 --> 03:56.810
So now our test should fail, saying that we get back a status code of 200 instead of the expected 404.

03:57.470 --> 03:59.140
And that is exactly what we get.

03:59.150 --> 04:02.480
So I feel like the test we just wrote is probably working as expected.

04:04.020 --> 04:04.230
All right.

04:04.230 --> 04:06.150
So let's take care of the other two cases.

04:06.180 --> 04:07.850
So next up is the 401.

04:07.860 --> 04:11.730
When purchasing an order when this thing does not belong to us.

04:12.800 --> 04:16.390
You might think they were going to have to create two users to test this out or something like that.

04:16.400 --> 04:17.290
We really don't.

04:17.300 --> 04:22.610
We really just have to create one order, save it into the database with a realistic looking user ID

04:22.610 --> 04:26.780
and then just make a request and try to pay for that order as any arbitrary user.

04:26.810 --> 04:29.360
And we will make sure that we get back a 401.

04:30.020 --> 04:30.860
So first things first.

04:30.860 --> 04:33.980
We do have to create a real order and save it to the database.

04:33.980 --> 04:36.320
For that, we have to make use of our order model.

04:36.320 --> 04:37.850
Let's import it at the very top.

04:38.770 --> 04:42.370
I'm going to import order from up to directories.

04:42.370 --> 04:43.690
Models order.

04:46.010 --> 04:48.380
Then down inside of our test, we'll do an.

04:49.420 --> 04:52.000
Order is a wait or see me.

04:52.330 --> 04:53.860
Order, dot build.

04:53.860 --> 04:54.250
There we go.

04:54.250 --> 04:55.750
No a weight statement just yet.

04:56.470 --> 04:59.320
And then we do have to get this thing a couple of different properties unfortunately.

04:59.560 --> 05:02.950
So we have to give it the ID version, user ID price and status.

05:03.880 --> 05:06.160
So the idea we do want this thing to look realistic.

05:06.160 --> 05:11.260
So we'll throw in a mongoose types object ID to hex string.

05:13.810 --> 05:14.920
For the user ID?

05:14.950 --> 05:20.680
Well, this can be any ID whatsoever, but let's make it look realistic just for tests sake.

05:20.980 --> 05:22.360
Again, not important.

05:22.360 --> 05:27.160
We can have this thing be gibberish if we want it to, but I'll just make it look like a real ID.

05:28.340 --> 05:30.200
I'm going to hard code the version to be zero.

05:31.190 --> 05:36.200
I will hardcore the price to 20 and then finally our status to set this.

05:36.230 --> 05:38.480
We do need to import our order status enum.

05:39.080 --> 05:41.450
We'll make sure I do that at the top from our common module.

05:49.130 --> 05:53.810
Then we can set the status right here as order status dot created.

05:55.740 --> 05:58.350
After we create the order, we'll then save it within a wait order.

05:58.500 --> 05:59.130
Save.

05:59.820 --> 06:02.670
And now we can actually make our request and try to pay for this thing.

06:03.440 --> 06:05.240
Rather than writing out the entire request chain.

06:05.240 --> 06:08.150
Once again, I'll just copy paste some code from the previous test.

06:08.570 --> 06:09.940
It's going to take all that stuff right there.

06:09.950 --> 06:10.700
Copy it.

06:12.450 --> 06:13.410
And then paste it in.

06:15.800 --> 06:20.720
So now instead of giving a randomly generated order ID right here, I'm going to instead use the ID

06:20.720 --> 06:22.790
of the order that we had just saved to the database.

06:23.060 --> 06:25.310
So I'll specify order ID.

06:26.230 --> 06:28.900
And I will expect this to give us back a 401.

06:30.050 --> 06:30.160
Okay.

06:30.260 --> 06:31.040
Let's save that.

06:32.540 --> 06:33.620
Take a look at our tests.

06:35.310 --> 06:35.640
Yep.

06:35.640 --> 06:37.890
Looks good as usual.

06:37.890 --> 06:39.350
Let's just try to make this thing fail.

06:39.360 --> 06:43.200
So how about rather than going and commenting out some of those checks, I'll try to expect a different

06:43.200 --> 06:44.100
status code.

06:44.190 --> 06:45.900
They'll expect how about a 200?

06:45.900 --> 06:50.070
And that should just confirm that we do in fact get back a401.

06:50.460 --> 06:50.700
Yep.

06:50.700 --> 06:51.330
Looks good.

06:54.240 --> 06:54.560
Yeah.

06:54.570 --> 06:55.530
Let's take a pause right here.

06:55.530 --> 06:58.350
When we come back to the next video, we will take care of this last test.

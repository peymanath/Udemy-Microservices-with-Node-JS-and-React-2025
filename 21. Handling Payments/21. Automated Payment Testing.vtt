WEBVTT

00:00.710 --> 00:04.760
We were able to create a charge with Stripe successfully, and now we should probably write out some

00:04.760 --> 00:06.080
kind of automated test.

00:06.320 --> 00:07.310
Before we write out the test.

00:07.310 --> 00:11.420
However, I want to mention that there are two different approaches we can use to really test out this

00:11.420 --> 00:12.290
stripe stuff.

00:12.740 --> 00:17.520
First, we could test this out by trying to make use of the actual Stripe library.

00:17.580 --> 00:22.910
We can make sure that whenever we run a test or try to test this handler, we could ensure that we reach

00:22.910 --> 00:27.950
out to the Stripe API successfully and create a new charge, and that would definitely be a very realistic

00:27.950 --> 00:28.470
test.

00:28.490 --> 00:33.260
However, it would also be kind of annoying to put together because remember that environment variable

00:33.260 --> 00:38.570
for our stripe key is only accessible inside of our Kubernetes cluster, but we are currently running

00:38.570 --> 00:42.170
our tests on our local machine outside of the cluster.

00:42.470 --> 00:45.260
So that means that we do not have access to that environment variable.

00:45.560 --> 00:50.000
So if we wanted to somehow make sure that we could reach out to the real Stripe API, we would have

00:50.000 --> 00:53.600
to make sure that as we run our tests, we still have access to that API key.

00:53.780 --> 00:58.100
That would involve just a little bit of setup possibly of creating a new environment variable on our

00:58.100 --> 00:59.060
local machine.

00:59.090 --> 01:02.210
It would definitely be something we could do, but again, just a little bit annoying.

01:03.920 --> 01:09.110
The second approach we could take is to create another mock around the Stripe library itself or really

01:09.110 --> 01:10.670
our stripe file.

01:11.000 --> 01:15.820
You might recall that inside of our CRC directory we've got the MOX folder and we've already got a mocked

01:15.830 --> 01:16.910
Nats wrapper.

01:17.270 --> 01:22.820
We could create a very similar mock for the stripe file as well and we can make sure that we export

01:22.820 --> 01:27.560
some kind of mock object that has the same kind of API as this thing right here.

01:27.560 --> 01:33.290
So some kind of object that has a charges property and on that charges property has a create function

01:33.410 --> 01:36.620
that returns some kind of promise that will eventually be resolved.

01:37.350 --> 01:39.210
So again, two possible approaches.

01:39.600 --> 01:44.310
We're going to first take a look at how to implement this using a mock and then maybe we'll see what

01:44.310 --> 01:44.990
happens.

01:45.000 --> 01:48.030
Perhaps we'll refactor it to use the actual Stripe API.

01:49.090 --> 01:49.360
All right.

01:49.360 --> 01:54.820
So to get started inside of our Mocs directory, inside the SRC folder, we're going to make a new file

01:54.820 --> 01:55.510
of.

01:56.480 --> 01:58.260
Stripe dots.

01:58.610 --> 02:03.980
So inside of here, we are going to make a fake copy of Stripe and this will be executed or imported

02:03.980 --> 02:07.040
only when we are running our code in the test environment.

02:07.520 --> 02:12.410
So ultimately we want to export something that is going to have the same kind of structure as this file

02:12.410 --> 02:13.070
right here.

02:13.070 --> 02:18.620
So we want to make sure we export something called Stripe with the lowercase s and it needs to have

02:18.620 --> 02:19.760
a charges property.

02:19.760 --> 02:23.000
And on the charges property, it has to have that create function.

02:24.140 --> 02:25.640
So inside of this mock file.

02:26.790 --> 02:29.270
I will export bounced stripe.

02:29.280 --> 02:35.790
This is going to be an object that has a charges property and on charges we will have a create function.

02:37.150 --> 02:40.810
So this great function right here, well, we can definitely make it a real function, but instead we're

02:40.810 --> 02:42.370
going to make it a just mock.

02:42.370 --> 02:46.600
Remember, mock functions are really fantastic because we can take a look at them and make sure that

02:46.600 --> 02:48.460
they get called with appropriate arguments.

02:49.500 --> 02:52.920
So we're going to put in here just for this time around.

02:52.920 --> 02:55.900
This mock function is going to be just a little bit more complicated.

02:55.920 --> 03:01.380
You might recall back inside of our net's wrapper for the mock function we created over here, we changed

03:01.380 --> 03:05.820
on that mock implementation function, and that made sure that anytime we called the publish function,

03:05.820 --> 03:08.490
we actually executed this function right here.

03:08.940 --> 03:10.950
We're going to do something very similar at this time around.

03:10.950 --> 03:18.030
But instead of providing a mock implementation, we're going to instead provide a dot mock resolved

03:18.030 --> 03:18.780
value.

03:21.420 --> 03:25.410
So this Microsoft value right here makes sure that whenever we call the create function, we are going

03:25.410 --> 03:30.270
to get back a promise that automatically resolves itself with an empty object.

03:30.480 --> 03:34.140
The only reason we are doing this is because back inside of our actual root handler.

03:35.120 --> 03:39.140
Our expectation right here is that when we call create, we are going to get back some kind of promise

03:39.140 --> 03:41.900
and then we are awaiting that promise to be resolved.

03:43.120 --> 03:45.230
So that's why we are going to mark resolve value.

03:45.250 --> 03:48.760
We're going to return a promise immediately that automatically resolves itself.

03:50.030 --> 03:50.300
Okay.

03:50.300 --> 03:52.550
So that is it for the mock file, believe it or not.

03:52.910 --> 03:56.360
So now we can go back over to our test file inside that test directory.

03:56.780 --> 04:02.360
And we could write out a new test that asserts that we can make a request to our endpoint with some

04:02.360 --> 04:04.340
valid token or whatever else.

04:04.910 --> 04:08.970
We'll make sure that we call that mock function.

04:08.990 --> 04:11.360
Then we could write out some kind of expectation around it.

04:12.230 --> 04:18.320
At the very top of this file, we will tell Gest to redirect the import to that stripe file and instead

04:18.320 --> 04:20.690
use our mocked version of the stripe file.

04:21.620 --> 04:26.300
We'll do a just mock up two directories stripe.

04:29.810 --> 04:31.160
Then down at the bottom, the file.

04:34.090 --> 04:35.530
We'll put together a new test.

04:36.500 --> 04:42.440
And say it returns a about 204 because we are technically creating a record here.

04:43.470 --> 04:46.320
With valid inputs.

04:48.270 --> 04:53.160
So inside of this test, we're going to do a little bit of setup called a handler and then maybe also

04:53.160 --> 04:58.140
make sure, besides the fact that returns A to a four, make sure it actually calls that create function

04:58.140 --> 05:02.130
or the charge create function and provide some valid arguments to it.

05:02.950 --> 05:06.430
So inside of here, we're going to do the same kind of setup we did in the previous test.

05:06.470 --> 05:10.810
So I'm going to go to the previous test and just take everything from user ID down to the order save.

05:11.760 --> 05:14.130
So I'm going to copy all that and put it into our new test.

05:15.800 --> 05:21.050
I will update the status here from cancelled to created to make sure that we can actually pay for this

05:21.050 --> 05:21.560
order.

05:23.070 --> 05:25.560
And then after saving the order, I'll make the actual request.

05:25.560 --> 05:28.200
So I'll do an await request to app.

05:29.040 --> 05:32.580
I want to do a post request to API payments.

05:33.820 --> 05:39.340
I'm going to set my cookie to user or global sign in.

05:39.340 --> 05:40.180
That's what I want.

05:40.600 --> 05:41.680
User ID.

05:43.090 --> 05:44.770
And I'm going to send along.

05:48.820 --> 05:49.930
A valid token.

05:49.960 --> 05:54.490
Now, keep in mind that this token is not actually going to be used because we have mocked out the charge

05:54.490 --> 05:58.930
create function, but we will remove that mark in just a little bit to take a look at an alternative

05:58.930 --> 06:00.130
approach, as I mentioned.

06:00.130 --> 06:02.890
And so eventually we do want to make sure that we've got a valid token here.

06:03.100 --> 06:07.930
So since our account is in the test mode, we can put in OC Underscore Visa.

06:07.930 --> 06:11.710
And as I mentioned, this is a token that is always going to work for Stripe accounts that are in the

06:11.710 --> 06:12.430
test mode.

06:13.430 --> 06:17.480
And then our order ID will be the ID, the order we just created a moment ago.

06:18.020 --> 06:19.310
So order ID.

06:21.400 --> 06:21.610
All right.

06:21.610 --> 06:23.140
This video is running a little bit long.

06:23.140 --> 06:26.380
So let's just take a quick pause right here and then wrap up this test in the next video.

WEBVTT

00:01.190 --> 00:04.550
Time to write out some tests to make sure that these events are actually being published.

00:04.580 --> 00:08.180
These tests are going to look very similar to what we had previously written out back inside of our

00:08.180 --> 00:09.950
ticket service just a little bit ago.

00:10.280 --> 00:13.190
Well, first, start off with our new test file.

00:13.220 --> 00:17.360
So we're going to make sure that whenever a request comes in to create an order, we publish an event

00:17.360 --> 00:19.070
saying that an order was created.

00:19.640 --> 00:21.440
I want to give you a very quick reminder.

00:21.470 --> 00:26.210
You might recall that we have that Nats wrapper file and instead of here, we have some code that we

00:26.210 --> 00:30.530
do not want to be executed inside of our test environment because it is going to attempt to connect

00:30.530 --> 00:33.530
to a real gnat server to get around that problem.

00:33.530 --> 00:39.260
We had created that underscore underscore MOX directory inside of our source file and just was going

00:39.260 --> 00:44.960
to automatically redirect any import statements to that nat wrapper file while we were running our test

00:44.960 --> 00:47.810
to this MOX Nat's wrapper file instead.

00:49.130 --> 00:54.170
So our publishers and the test environment are going to be executing it, using this as the nets wrapper.

00:54.320 --> 00:58.040
So we're going to have that client object that only implements the publish function.

00:58.040 --> 01:00.680
And the publish function is going to be a mock function.

01:01.190 --> 01:04.820
The only goal this publish function right here is to make sure that it receives some kind of callback

01:04.820 --> 01:10.250
function, invokes it just to trick our code into thinking that the event was published successfully.

01:10.790 --> 01:15.770
So when we go to write out a test around this, we're going to make sure that our code, after creating

01:15.770 --> 01:19.700
an order, eventually invokes this mock function right here.

01:19.700 --> 01:23.840
And there are some built in matches directly in chest that allow us to make sure that this function

01:23.840 --> 01:25.100
actually was invoked.

01:25.340 --> 01:28.970
So let's get to it back inside of our new test file.

01:29.300 --> 01:30.440
We'll go up to the very top.

01:31.620 --> 01:33.180
And we will import the.

01:34.180 --> 01:39.090
That's rapper from up to directories and that's rapper.

01:39.910 --> 01:43.630
So by the time we import this object right here, it has already been knocked out.

01:43.630 --> 01:47.740
So when we have this import, it is actually for this fake nets wrapper.

01:48.280 --> 01:52.240
So we can now attempt to make the request to issue the order, retrieve the order and issue the event.

01:52.240 --> 01:54.460
And we should be able to inspect this object right here.

01:54.460 --> 01:57.010
Make sure that things Polish function has been called.

01:58.530 --> 02:01.650
Let's go down to the bottom where we've got that little Tutu's test written out.

02:01.680 --> 02:07.260
I'm going to remove the dot to do on there and then put in an async callback like so.

02:09.250 --> 02:12.670
So inside of here, we definitely want to make sure that we successfully create an order.

02:12.670 --> 02:13.540
To create an order.

02:13.540 --> 02:16.270
We can take the code that we had written in the test right before.

02:16.540 --> 02:19.030
So this was some code that would successfully create an order.

02:19.360 --> 02:22.660
I'm going to copy all that and then paste it down inside of our test.

02:24.330 --> 02:29.190
So immediately after we get back a response of 201, we should be able to take a look at our net's wrapper

02:29.190 --> 02:36.210
client publish function and just make sure that it has been invoked so we can write out expect and that's

02:36.210 --> 02:38.910
rapper dot client publish.

02:40.120 --> 02:43.060
That to have been cult.

02:46.210 --> 02:47.130
So let's save that.

02:47.140 --> 02:53.290
Go back over to our running test in our terminal and we're going to expect that the set of new tests

02:53.290 --> 02:54.310
have ran successfully.

02:54.310 --> 02:54.580
Yep.

02:54.580 --> 02:56.950
Looks like everything is passing as usual.

02:56.950 --> 03:03.400
I will change this to fail so I'll do something like not to have then called.

03:03.400 --> 03:06.520
That's how we would say that the Polish function has not been invoked.

03:07.380 --> 03:08.880
I'll save that flip back over.

03:13.030 --> 03:17.580
And if we take a look at the air that we just got, we said that we expect this thing not to be called.

03:17.590 --> 03:21.040
Well, it was called the number of times that it was invoked was one.

03:21.040 --> 03:22.540
And here are the arguments to it.

03:23.020 --> 03:26.050
So we got order created as the subject.

03:26.930 --> 03:29.690
We've got the order data inside there and all that kind of good stuff.

03:31.540 --> 03:32.920
So that's a pretty good test right there.

03:33.430 --> 03:37.210
Let's now implement the same thing for our delete or cancel handler as well.

03:38.150 --> 03:39.140
Inside the delete test.

03:39.140 --> 03:39.260
Yes.

03:39.320 --> 03:39.890
File.

03:42.510 --> 03:44.490
At the very top, we will once again import.

03:47.390 --> 03:49.090
And that's rapper from.

03:50.510 --> 03:52.640
Up to directories and that's rapper.

03:54.350 --> 03:55.880
Well, then go down to the very bottom.

03:56.300 --> 03:58.250
I'm going to delete the two due on there.

04:00.150 --> 04:01.680
But in the async callback.

04:02.770 --> 04:07.000
And then once again, we need to make sure that we somehow create the order and cancel it and then check

04:07.000 --> 04:09.100
to make sure that the published function has been invoked.

04:09.430 --> 04:13.210
So once again, take a look at the test that we wrote right before this one.

04:14.040 --> 04:15.870
Where we had our success case.

04:15.870 --> 04:18.660
So inside, if you are going to take everything from creating the ticket.

04:19.670 --> 04:23.480
All the way down to the end of where we make the request to cancel the order.

04:24.510 --> 04:29.430
So in total, I've got the ticket creation, the ticket save reading the user and then the two different

04:29.430 --> 04:30.070
requests.

04:30.090 --> 04:34.920
I'm going to copy all that and then paste it down at the very bottom and the test that we just put together.

04:37.730 --> 04:41.570
Then at the very bottom of our new test, we can write out.

04:42.800 --> 04:49.430
Expect Nats repr client publish to have been dealt.

04:51.680 --> 04:52.520
So I'll save that.

04:52.550 --> 04:54.620
Take a look at my tests and see how we're doing.

04:57.320 --> 04:59.570
I think I forgot to change back that failing test.

04:59.570 --> 05:01.370
So we just wrote Inside the New Handler.

05:01.460 --> 05:03.020
I'll take care of that in just a moment.

05:03.020 --> 05:06.330
But right now, let's make sure that the canceled one is working as expected.

05:06.350 --> 05:06.740
Yep.

05:06.740 --> 05:07.700
Looks like it is.

05:09.650 --> 05:11.720
So I'm going to go back over to new tests.

05:11.750 --> 05:13.980
Yeah, I've still got the not down there at the very bottom.

05:14.000 --> 05:15.490
I'll just make sure I remove that.

05:15.500 --> 05:18.440
Say this once again, and I'll make sure that all my tests are passing.

05:21.250 --> 05:21.610
All right.

05:21.610 --> 05:22.270
Looks good.

05:22.780 --> 05:24.790
So I think we are now all set.

05:25.090 --> 05:28.570
That's pretty much it for publishing some events out of our order service.

05:28.570 --> 05:32.650
So let's take a quick pause right here and decide what we need to work on next in just a moment.

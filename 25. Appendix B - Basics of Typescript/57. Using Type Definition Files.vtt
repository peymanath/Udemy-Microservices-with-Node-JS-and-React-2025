WEBVTT

00:00.900 --> 00:04.110
In the last video, we installed a type definition file for Faker.

00:04.140 --> 00:09.870
As a quick side, one of those benefits of type definition files is that we can now hover over faker

00:09.870 --> 00:10.580
right here.

00:10.590 --> 00:13.210
And then if you're on Mac, hold down the command key.

00:13.230 --> 00:15.090
Or if you're on windows, hold down control.

00:15.420 --> 00:18.780
You'll notice that faker turns into a clickable link of sorts.

00:19.140 --> 00:23.700
If we now click on that, we'll be taken to the type definition file that we just installed.

00:24.330 --> 00:26.490
Notice how the name of this file is indexed.

00:26.490 --> 00:32.910
D Dots traditionally type definition files are named with extensions of dots.

00:33.210 --> 00:37.680
So any time you are looking at some typescript code and you see a file with that extension, that means

00:37.680 --> 00:40.050
you are looking at a type definition file.

00:40.860 --> 00:44.460
Inside this file, you're going to find nothing but typescript syntax.

00:44.670 --> 00:50.070
So the only goal of this file right here is to describe the different types of values, functions,

00:50.070 --> 00:53.490
objects, classes that exist inside the Fakher library.

00:53.880 --> 00:57.790
So there will not actually be any functions that are implemented inside of here.

00:57.810 --> 01:02.700
Instead, instead, you will only see a definition of the different types that are available.

01:03.490 --> 01:07.210
If you look inside of here, we can actually use this as a source of documentation.

01:07.360 --> 01:11.980
So, for example, remember at the official documentation we looked at just a moment ago, we saw that

01:11.980 --> 01:13.120
address module.

01:13.330 --> 01:19.540
So this right here is telling TypeScript that this library has a address object and inside of it are

01:19.540 --> 01:23.860
different functions like zip code, city, city prefix and so on.

01:24.400 --> 01:28.540
We can see the different arguments that each of them take and the different type of values that they

01:28.540 --> 01:29.200
return.

01:29.590 --> 01:35.230
So like I said, we can use this file as kind of an alternate forms of documentation to understand how

01:35.230 --> 01:36.730
to work with a given library.

01:37.540 --> 01:39.990
So in this case, we can take a look at address.

01:40.000 --> 01:45.490
If we scroll down, you'll notice that latitude and longitude are two functions inside there, and we're

01:45.490 --> 01:49.090
going to use those functions to actually randomly generate our latitude and longitude.

01:49.860 --> 01:54.870
As a quick side note, I want you to notice how latitude, longitude, return strings, which is actually

01:54.870 --> 01:56.540
kind of not very typical.

01:56.550 --> 02:00.090
Usually we reflect latitude and longitude as numbers.

02:00.540 --> 02:05.250
So having them being returned here as a string means that might be a little bit unexpected and we might

02:05.250 --> 02:07.140
have to deal with that at some point in time.

02:07.470 --> 02:08.760
But we'll just see what happens.

02:09.390 --> 02:09.660
All right.

02:09.660 --> 02:10.920
So I'm going to close this file.

02:12.020 --> 02:17.840
In back inside of my user file, we're now going to do some initialization of our name, latitude and

02:17.840 --> 02:19.670
longitude inside of our constructor.

02:20.180 --> 02:24.620
So inside the constructor, as soon as we make an instance of a user, we're going to randomly generate

02:24.620 --> 02:26.930
a name and assign it to that name property.

02:27.530 --> 02:33.230
So inside of here, I'll say this name is going to come from Faker.

02:33.470 --> 02:35.510
We're going to get the name module.

02:35.510 --> 02:37.370
Remember, we saw that in the official documentation.

02:37.370 --> 02:41.960
Here's a name right here and we're going to generate a first name.

02:43.260 --> 02:47.850
Once again, we could find the existence of this function either by looking at the official documentation

02:47.850 --> 02:54.000
or just command clicking on faker and then search this thing for like first name.

02:55.760 --> 02:56.540
And there it is.

02:56.540 --> 02:57.710
So here's the name module.

02:57.710 --> 02:59.780
There's the first name method.

03:00.170 --> 03:04.700
Even by looking at this documentation right here or this type definition file, you'll notice that we

03:04.700 --> 03:07.970
even are told that we can take in a gender argument right here.

03:08.240 --> 03:10.850
This actually did not exist in the official documentation.

03:10.850 --> 03:16.730
So the type definition file actually gives us more information sometimes than a typed effort or a documentation

03:16.730 --> 03:18.050
document actually does.

03:19.560 --> 03:20.220
All right.

03:20.220 --> 03:22.170
So now we've generated the first name.

03:22.170 --> 03:25.350
We can do the same thing for our latitude and longitude as well.

03:25.860 --> 03:29.820
Now, here's a really quick note for you, something that really gets people hung up when they are getting

03:29.820 --> 03:31.230
started with TypeScript.

03:31.710 --> 03:37.890
At this point, we have only till told TypeScript that our class user is going to be of type or are

03:37.890 --> 03:43.650
going to have a property called location and location will have an object with a latitude and longitude

03:43.650 --> 03:44.280
property.

03:45.390 --> 03:46.830
Here's the important thing.

03:46.920 --> 03:53.010
When we create an instance of a user, location does not get automatically set to be an object.

03:53.490 --> 04:00.120
So in other words, if we did right here a console log of this location, we would see undefined or

04:00.120 --> 04:00.780
null.

04:01.260 --> 04:07.230
That means that if we try to do direct assignment to latitude and longitude like this location lat equals

04:07.440 --> 04:12.150
some number, we would actually see an error message and would say something like cannot read property

04:12.150 --> 04:13.980
of lat of undefined.

04:14.780 --> 04:19.220
So all we have done up here is said, Hey, TypeScript, we're going to have a location, property.

04:19.220 --> 04:25.730
It will be an object that has these two properties, but we have not done any initialization for that

04:25.730 --> 04:25.970
yet.

04:25.970 --> 04:34.160
There is no object here when we create our user, so we are responsible for initialization of this object

04:34.550 --> 04:36.350
and the properties inside of it.

04:36.740 --> 04:40.190
So in other words, that means to initialize latitude and longitude.

04:40.190 --> 04:47.990
We have to say this location is going to be an object with properties, let and lag.

04:49.030 --> 04:54.670
So we can try to initialize both Latin lag will do faker address latitude.

04:56.370 --> 05:02.370
I'll get a comma at the end of that line and then faker dot address, dot longitude like so.

05:03.250 --> 05:04.900
Even then, I still see an error message.

05:04.900 --> 05:07.630
If we mouse over this, you'll notice that it says.

05:08.740 --> 05:12.810
Expected or right here type string is not assignable to type number.

05:12.820 --> 05:16.570
So remember when we were looking at the documentation for latitude and longitude or the type definition

05:16.570 --> 05:21.700
file just a second ago we saw that latitude and longitude were functions that returned strings, but

05:21.700 --> 05:24.670
we clearly said that latitude and longitude were going to be numbers.

05:25.720 --> 05:30.100
Once again, in my opinion, this is kind of an oversight by the faker people and they really should

05:30.100 --> 05:31.420
be returning numbers here.

05:31.450 --> 05:33.820
However, that's just how they built this library.

05:33.820 --> 05:39.220
So we need to take the strings that are returned by latitude and longitude and convert them into numbers.

05:39.880 --> 05:42.850
To do so, we have to do an actual conversion process.

05:42.850 --> 05:47.560
Like this is a string right here, so we have to convert that into an actual number.

05:48.040 --> 05:51.340
So to do so, we're going to take a very JavaScript style approach.

05:51.460 --> 05:56.560
We're going to use the parse float function just to make sure you are aware the parse float function

05:56.560 --> 05:58.150
is built into JavaScript.

05:58.150 --> 06:04.060
It takes a string and returns a number that has a decimal value attached to it so we can call a parse

06:04.060 --> 06:05.110
float on both.

06:06.280 --> 06:11.020
In the air goes away because now we are assigning a number to both latitude and longitude.

06:12.080 --> 06:12.350
All right.

06:12.350 --> 06:13.370
So that's pretty much it.

06:13.730 --> 06:15.180
So let's take a quick pause right here.

06:15.200 --> 06:18.530
When we come back, the next video, we're going to start to actually make use of our class.

06:18.530 --> 06:20.120
So I'll see you in just a minute.

WEBVTT

00:00.520 --> 00:05.200
In this video, we're going to write out a couple of code examples to understand how type annotations

00:05.200 --> 00:07.390
work, specifically with variables.

00:07.690 --> 00:12.850
Remember, a type annotation is going to be a little bit of code that we write to help TypeScript along.

00:13.710 --> 00:17.300
The type penetration system is kind of at odds with type inference.

00:17.310 --> 00:22.290
So we're going to first focus on type annotations and then come along and understand how type inference

00:22.290 --> 00:23.340
comes into play.

00:24.130 --> 00:24.400
All right.

00:24.400 --> 00:28.480
So I'm going to change on over to my editor and inside my project directory, I'm going to make a new

00:28.480 --> 00:30.580
folder called Annotations.

00:30.820 --> 00:35.650
We're going to eventually create separate files inside this directory that are all related to type annotations.

00:35.650 --> 00:38.020
So we're going to organize them all inside of here.

00:38.590 --> 00:44.530
Inside this folder, I'm going to make a new file called Variables, and then inside this file, I'm

00:44.530 --> 00:48.580
going to write out my first variable declaration that has a type annotation.

00:48.880 --> 00:52.600
So I'm going to write out const apples is going to be a number.

00:52.600 --> 00:55.090
I'm going to set that to five like so.

00:56.260 --> 01:00.940
So the colon and the word number right after it is our type annotation.

01:01.270 --> 01:03.820
You're going to see syntax that looks exactly like this.

01:03.820 --> 01:08.950
And the vast majority of TypeScript code that you work with, this type annotation is trying to tell

01:08.980 --> 01:15.400
TypeScript that we are only ever going to assign a value of type number to the variable of apples.

01:15.970 --> 01:20.770
If I ever tried to assign some other type of value besides a number, all very quickly see an error

01:20.770 --> 01:21.400
message.

01:21.670 --> 01:26.950
So for example, if I update the five right here to true, which is a boolean, I'll see an error right

01:26.950 --> 01:27.490
away.

01:27.670 --> 01:31.720
And it tells me that the type of true is not assignable to a type of number.

01:33.080 --> 01:37.550
Now this is also going to work if I try to update the value assigned to that variable as well.

01:38.060 --> 01:44.540
So if I update the keyword to let which will allow me to reassign apples, I can then reassign apples

01:44.540 --> 01:46.880
down here a value of ten without any issue.

01:47.650 --> 01:51.910
However, if I tried to assign it some other type of value, like a string, once again, I'll very

01:51.910 --> 01:52.900
quickly see an error.

01:53.590 --> 01:58.300
And once again, I see a message that says essentially you have a string and you're trying to assign

01:58.300 --> 02:00.160
it to a variable that's supposed to be a number.

02:01.820 --> 02:05.810
Now for the rest of this file, I want to show you some reassignments all over the place.

02:05.810 --> 02:10.580
So I'm going to continue using the keyword, even though in just about all the declarations we're going

02:10.580 --> 02:14.240
to add here, usually I would be making use of the const keyword instead.

02:15.830 --> 02:19.670
Type annotations like this right here can be used with any type of value.

02:19.940 --> 02:23.510
Remember, we just spoke about some of the different types of values inside of TypeScript.

02:23.660 --> 02:29.480
So we've got number of strings booleans, null, void or simply null, undefined and functions, arrays

02:29.480 --> 02:30.350
and so on.

02:31.000 --> 02:36.100
So with every one of these different types of values, we can use a type annotation.

02:36.460 --> 02:40.750
Let's write out a couple of examples just to understand how type annotation works with each of these

02:40.750 --> 02:41.680
different types.

02:43.190 --> 02:43.670
All right.

02:43.670 --> 02:47.150
So in every case we'll write out left and then a variable name.

02:47.150 --> 02:52.340
In this case, I'm going to call my variable speed, then a colon, then the type of value.

02:52.340 --> 02:57.320
In this case, I'm going to say it's going to be a string and I'm going to assign it a value of fast

02:57.320 --> 02:58.070
like so.

02:59.060 --> 03:02.270
Once again, if I tried to assign this a value that is not a string.

03:02.270 --> 03:05.530
So in this case, maybe a number, I'll see an error and that's pretty much it.

03:05.540 --> 03:10.490
We're going to see that same pattern repeating every time we try to assign it a different type of value.

03:11.360 --> 03:12.980
Let's take a look at a Boolean as well.

03:13.070 --> 03:16.820
So let's say maybe let Hays name is going to be a boolean of true.

03:17.420 --> 03:18.620
How about NULL?

03:18.650 --> 03:21.380
I'll make a variable called nothing much.

03:22.370 --> 03:25.940
I'll make that null and that's going to be assigned a value of null.

03:26.450 --> 03:27.860
And this is kind of interesting right here.

03:27.860 --> 03:30.680
It's our first example of where we have a value.

03:31.580 --> 03:33.980
That has a name identical to its type.

03:34.010 --> 03:38.060
We're actually going to see that a couple of times in TypeScript, and it's something that's a little

03:38.060 --> 03:42.420
bit difficult to grasp once you start getting into some more complicated topics.

03:42.440 --> 03:46.160
So we're going to have several lectures later on to understand when we're working with something that's

03:46.160 --> 03:48.980
a value and when we're working with something that is a type.

03:50.120 --> 03:54.980
We could also try a new variable called something like say nothing and make it undefined.

03:56.060 --> 03:56.930
Like so.

03:58.050 --> 04:01.680
Now we can also use type annotation with every other type of value as well.

04:01.710 --> 04:02.640
Like we just said.

04:02.640 --> 04:08.370
So I can use this with an instance of a class or with a built in object or just about anything you can

04:08.370 --> 04:09.060
imagine.

04:09.480 --> 04:12.240
So let's say that we're working with maybe a date object.

04:12.810 --> 04:16.890
I'll say I'll put a little section header here and I'll say, built in objects.

04:17.160 --> 04:19.680
So I can make a new variable called now.

04:20.800 --> 04:26.080
I'll say that's going to be of type date and then I'll make a new date and assign it on the other side.

04:26.620 --> 04:29.410
So in this case, we're once again doing the same thing we're doing up here.

04:29.410 --> 04:34.540
We're saying that we're going to have a variable called now and we can only assign it a value of type

04:34.540 --> 04:35.080
date.

04:35.560 --> 04:39.700
And then on the other side, we're going to assign it an instance of a date object.

04:40.940 --> 04:41.270
All right.

04:41.270 --> 04:43.970
So now that we're kind of getting the idea here, let's take a quick pause.

04:43.970 --> 04:47.930
When we come back in the next section, we'll take a look at some of the more complicated syntax that

04:47.930 --> 04:51.230
comes up when we start working with objects, arrays and functions.

04:51.230 --> 04:53.510
So quick pause and I'll see you in just a minute.

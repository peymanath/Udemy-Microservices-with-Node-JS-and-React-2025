WEBVTT

00:00.580 --> 00:05.120
We've now gotten an example of type annotations with arrays, classes and object literals.

00:05.140 --> 00:09.520
Once again, I just want to remind you that we're going to have a separate section on arrays, classes

00:09.520 --> 00:11.230
and object literals as well.

00:11.230 --> 00:15.340
So all I'm trying to do right now is kind of give you a sample of some of the syntax that we're going

00:15.340 --> 00:18.310
to need to understand to get through some of the more complicated stuff.

00:18.910 --> 00:23.740
The last example I want to give you down here of a type annotation is for a function.

00:24.930 --> 00:25.560
Well function.

00:25.560 --> 00:26.130
There we go.

00:26.400 --> 00:31.650
So unfortunately, the annotation for a function is kind of the nastiest syntax, but you're going to

00:31.650 --> 00:36.360
see so many examples of it that you're going to understand it really quickly inside this course.

00:36.810 --> 00:40.560
So I'm going to first declare a function and it's going to look like a normal function, and then we'll

00:40.560 --> 00:42.810
come back to it and add in the type annotation.

00:43.440 --> 00:46.680
So I'm going to make a new function called log number.

00:47.070 --> 00:51.570
This is going to be an arrow function and I'm going to call it with a number.

00:52.600 --> 00:53.710
They'll call I.

00:54.070 --> 00:58.600
And then inside the function I'm going to add in a console.log for I.

00:59.650 --> 01:02.350
Now you'll notice that I've got a little underlined right here.

01:02.960 --> 01:08.240
Just to get the underlying to go away I'm going to add on I colon number like so we don't need to worry

01:08.240 --> 01:09.530
about this syntax just yet.

01:09.530 --> 01:11.870
That is not the annotation we are worried about here.

01:11.870 --> 01:13.910
So let's just kind of ignore that for a second.

01:13.910 --> 01:17.900
Once again, we're going to have a separate section for functions, just as we are for these other types

01:17.900 --> 01:18.980
of values as well.

01:19.610 --> 01:25.550
Right now, all I want to figure out is how we can add on a type annotation or log number right here.

01:25.910 --> 01:31.790
Remember, we want to use a type annotation to describe what type of value we are assigning to a variable.

01:31.970 --> 01:38.840
So I want to add in some code that's going to tell TypeScript some information about this function and

01:38.840 --> 01:43.250
when all the other examples we've done so far, the syntax has been sometimes a little bit weird, but

01:43.250 --> 01:44.870
more or less understandable.

01:45.470 --> 01:50.600
So for example, up here with the arrays, we put down string and then the square brackets to indicate

01:50.600 --> 01:51.770
this was going to be an array.

01:52.250 --> 01:54.830
In the case of a string, well, that was really easy.

01:54.830 --> 01:56.180
We just wrote out the word string.

01:56.910 --> 02:02.340
And we saw with an object literal, we described the different properties and types or some of the different

02:02.340 --> 02:05.460
properties and types of values that the object would have.

02:06.000 --> 02:10.710
So in the case of a function, we're going to do something similar, but we first need to think about

02:10.710 --> 02:13.410
what properties we really care about with a function.

02:14.280 --> 02:15.570
Well with a function.

02:15.570 --> 02:21.630
What you and I really care about as developers is what arguments are going to go into the function and

02:21.630 --> 02:25.410
what different types of values we expect the function to return.

02:25.800 --> 02:30.630
So that's the information we're going to encode inside the sanitation, inside the annotation that goes

02:30.630 --> 02:31.320
right here.

02:31.350 --> 02:36.600
We're going to try to tell TypeScript what different arguments the function is going to take and what

02:36.600 --> 02:39.150
different values it is going to return.

02:39.660 --> 02:42.090
So here's we're going to write out we're going to write out inside of here.

02:43.380 --> 02:48.000
Right here, I'm going to put down a set of parentheses, and inside there I'm going to provide an annotation

02:48.000 --> 02:50.280
for the different arguments that go into the function.

02:50.700 --> 02:56.070
So I'm going to say that this thing is supposed to receive a argument with the name of I.

02:56.900 --> 02:58.280
That's going to be a number.

02:59.400 --> 03:02.190
Then right after that set of parentheses, I'll put in an arrow.

03:02.730 --> 03:07.350
And then right after that, I'm going to list out the different values that I expect this function to

03:07.350 --> 03:08.010
return.

03:08.610 --> 03:11.250
Now, in this case, I expect this function to return nothing.

03:11.250 --> 03:14.160
So I'm going to use a very special type called void.

03:15.140 --> 03:15.680
All right.

03:15.680 --> 03:17.270
So there's the full annotation.

03:17.900 --> 03:21.760
Now, I think you can agree with me that this is some really nasty syntax right here.

03:21.810 --> 03:26.270
It's really hard to understand where the annotation begins and where the function begins.

03:26.780 --> 03:29.120
So everything up to void, like right there.

03:29.120 --> 03:34.910
That's the annotation that is us trying to tell TypeScript what type of value we are going to assign

03:34.910 --> 03:36.530
to this variable right here.

03:37.210 --> 03:40.930
Everything on the right hand side of the equals is the actual function.

03:41.500 --> 03:42.850
So this is the annotation.

03:42.850 --> 03:46.870
That's like a comment of us trying to tell TypeScript what we are doing here.

03:46.900 --> 03:49.660
It is not actual code that's going to be invoked.

03:49.930 --> 03:55.300
So even though it really, really looks like a function in its own complete right, it is not a function

03:55.300 --> 03:56.410
that we're going to run.

03:56.620 --> 03:59.200
It is a description of a function.

04:00.180 --> 04:04.920
And then on the right hand side of the equal sign is where we actually provide the implementation.

04:05.940 --> 04:06.140
Okay.

04:06.210 --> 04:10.800
I know once again, the syntax here is a little bit weird, but don't worry, we're going to have that

04:10.800 --> 04:15.930
separate section on functions to really break down the syntax right here and really understand what's

04:15.930 --> 04:16.530
going on.

04:17.500 --> 04:17.800
All right.

04:17.800 --> 04:22.270
So we've now gotten an example of a type annotation with a bunch of different basic values.

04:22.480 --> 04:26.500
So now that we've seen all these, I want to point out one thing that's really interesting here.

04:27.190 --> 04:30.430
Let's take a look at this first declaration we did at the very top.

04:31.440 --> 04:36.240
Right now, if you hover over apples, you'll see a little pop up that says, oh, yeah, apples is

04:36.240 --> 04:37.830
always going to refer to a number.

04:38.310 --> 04:39.720
So here's the interesting thing.

04:40.020 --> 04:42.450
I'm going to remove the type annotation.

04:42.450 --> 04:45.060
I'm going to delete that and the colon as well.

04:45.810 --> 04:50.340
And now if I hover over apples, I'll see the exact same thing I saw before.

04:50.730 --> 04:55.890
So somehow it looks like I didn't really have to add in that annotation in the first place.

04:56.460 --> 05:02.160
And that is the entire dynamic that we need to understand between these type annotations and these type

05:02.160 --> 05:03.060
inferences.

05:03.780 --> 05:08.550
We just learned how to add on a ton of code that are all type annotations.

05:08.550 --> 05:10.620
Everything we just wrote, all that new syntax.

05:10.620 --> 05:11.970
We're type annotations.

05:12.270 --> 05:17.610
But in that file that we just put together, there was not a single type annotation that was actually

05:17.610 --> 05:18.570
required.

05:18.870 --> 05:24.180
In other words, inside this file, we did not have to add in a single one of these type annotations.

05:24.180 --> 05:26.190
We can delete every single one of them.

05:27.060 --> 05:29.430
And everything is still going to work just fine.

05:29.460 --> 05:32.970
I can delete all of them and I still see no errors inside my code.

05:33.240 --> 05:38.190
And in every case, if I hover over a given variable, you'll see that I still get a little pop up telling

05:38.190 --> 05:40.800
me what type of value each variable is.

05:41.310 --> 05:44.640
So it's very clear that there's kind of more going on here than meets the eye.

05:44.880 --> 05:46.480
So let's take a quick pause when we come back.

05:46.500 --> 05:51.720
The next video, we're going to start to understand this kind of tension between type annotations and

05:51.720 --> 05:52.650
type inference.

05:52.980 --> 05:55.350
So quick pause and I'll see you in just a minute.

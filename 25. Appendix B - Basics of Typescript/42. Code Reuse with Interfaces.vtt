WEBVTT

00:01.180 --> 00:05.770
In the last video we refactored our interface to have a little bit more generic name and we did the

00:05.770 --> 00:07.330
same thing with our function down here.

00:07.750 --> 00:10.850
So now I want to do something kind of interesting inside this file.

00:10.870 --> 00:14.350
Right now we've got a object called Old Civic.

00:14.470 --> 00:17.590
I want to define another new object right underneath it.

00:17.890 --> 00:21.110
And I'm going to call this something like drink.

00:21.250 --> 00:25.660
Remember, just a couple of videos ago, we did some examples on drinks and we said that a drink had

00:25.660 --> 00:29.920
like a color and carbonated and some other thing like that.

00:30.250 --> 00:34.600
Let's try expressing a drink object right here with some of those same properties.

00:34.930 --> 00:42.820
So I'm going to like, maybe give this thing a color that is brown and maybe carbonated carbonated.

00:43.700 --> 00:44.690
And that'll be a boolean.

00:44.690 --> 00:45.350
True.

00:45.470 --> 00:50.870
And then maybe it will also have like that sugar content and that's really supposed to be like number

00:50.870 --> 00:51.470
in grams.

00:51.470 --> 00:53.120
So like 40 grams of sugar.

00:53.930 --> 00:55.700
And then I'm going to give this one more property.

00:55.700 --> 00:56.870
I'm going to give it a summary.

00:56.870 --> 00:59.630
Property summary is going to be a function.

00:59.630 --> 01:02.120
Any time we call it, it's going to return a string.

01:03.090 --> 01:08.640
And so inside of here, I'm going to return something like my drink is.

01:09.590 --> 01:11.060
Or how about has.

01:11.150 --> 01:14.300
And then this dot sugar.

01:15.620 --> 01:16.970
Grams of sugar.

01:17.090 --> 01:18.020
That's reasonable.

01:18.050 --> 01:20.930
Once again, notice that I'm using tactics here to form up this string.

01:21.960 --> 01:22.200
All right.

01:22.200 --> 01:24.240
So here's what gets really interesting.

01:24.240 --> 01:27.510
Here's like the entire point of interfaces.

01:27.630 --> 01:30.570
If you don't get this quite right away, I'm going to show you a couple of diagrams to really help you

01:30.570 --> 01:31.710
understand what's going on.

01:32.190 --> 01:33.510
But here's what's going on.

01:34.050 --> 01:38.390
Notice how our old civic function has a summary function tied to it or something.

01:38.430 --> 01:40.740
Old civic object has a summary function tied to it.

01:41.400 --> 01:44.670
Our drink object also has a summary function tied to it.

01:45.120 --> 01:51.600
These two objects right here represent very different things inside of our application, but they both

01:51.600 --> 01:54.210
have a summary function that returns a string.

01:54.900 --> 02:00.060
That means that they are both considered to be reportable types.

02:00.850 --> 02:05.440
So because they both have a property called summary, that is a function that returns a string.

02:05.830 --> 02:10.810
This is of type reportable and this is of type reportable.

02:12.270 --> 02:14.610
Because they are both of type reportable.

02:14.640 --> 02:20.940
We can use both old civic and drink with the function we defined down here.

02:21.870 --> 02:24.100
So I can call print summary with Old Civic.

02:24.120 --> 02:28.500
I can also call print summary with drink as well.

02:29.170 --> 02:33.790
And it works equally well with both of these very different objects.

02:34.520 --> 02:35.880
So what's the big point here?

02:35.900 --> 02:43.460
The point is that we can use a single interface to describe the shape or the different properties of

02:43.460 --> 02:45.530
very different objects.

02:46.560 --> 02:51.780
When we do so, we can have those objects implement different properties or different functions.

02:52.140 --> 02:58.200
And by doing so we can make these very different objects interact with different functions that we create,

02:58.200 --> 02:59.670
like print summary right here.

03:00.780 --> 03:04.270
So this encourages us to write somewhat generic looking functions.

03:04.290 --> 03:06.150
Notice how this is now a print summary.

03:06.360 --> 03:11.430
Would it have made sense to have this be like print vehicle and then pass in drink to it?

03:11.610 --> 03:12.440
No, I don't think so.

03:12.450 --> 03:14.070
That would have not made a lot of sense.

03:14.340 --> 03:20.370
So instead we decided to make a somewhat generic looking interface that described what we had to do

03:20.370 --> 03:22.410
in order to call this function right here.

03:22.440 --> 03:23.130
I'm going to change that.

03:23.130 --> 03:24.660
Back to print summary, by the way.

03:26.060 --> 03:31.580
So in doing so, we've now got a much more reusable function inside of our application.

03:31.610 --> 03:37.070
This function can be used with any type of object that satisfies the reportable interface.

03:38.210 --> 03:43.490
And this feature, this right here is what is going to encourage us to write more reusable code with

03:43.490 --> 03:44.140
TypeScript.

03:44.150 --> 03:49.310
Now, I know this is like a super basic example and it's very contrived, but I just want this to be

03:49.310 --> 03:52.790
your first taste of how we're going to use interfaces in general.

03:53.550 --> 03:55.800
Now to make sure everything is super crystal clear here.

03:55.800 --> 03:57.540
Let's take a quick pause in the next video.

03:57.540 --> 04:02.010
We're going to kind of reiterate what we did and what the entire point of this application was.

04:02.070 --> 04:05.340
We're going to take a look at a couple of different diagrams to help you understand what's going on.

04:05.580 --> 04:10.200
And we'll move on to our next subject, where we're going to very quickly continue to see what the power

04:10.200 --> 04:12.810
of interfaces is inside of our applications.

04:12.810 --> 04:14.970
So click pause and I'll see you in just a minute.

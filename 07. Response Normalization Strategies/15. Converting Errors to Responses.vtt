WEBVTT

00:01.090 --> 00:05.050
Our air handling middleware is now aware of the type of air that is dealing with.

00:05.260 --> 00:09.430
So now we need to inspect each of these different errors, somehow formulate a response and send it

00:09.430 --> 00:10.300
back to the user.

00:10.480 --> 00:15.100
But as a quick reminder, the entire reason we got into this entire discussion was we wanted to make

00:15.100 --> 00:19.810
sure that all these different services and all these different kinds of errors are always going to result

00:19.810 --> 00:21.850
in the exact same structure of air.

00:21.890 --> 00:26.010
We never actually sat down and discussed exactly what the structure of that response should look like.

00:26.020 --> 00:27.370
So let's do that right now.

00:28.090 --> 00:32.950
This is going to be the common response structure for all errors we have inside our application.

00:33.220 --> 00:38.680
So no matter what the error is, no matter the reason for it, no matter the server that it is coming

00:38.680 --> 00:42.550
from, we're always going to send back into object that has an heirs property.

00:43.850 --> 00:46.820
And then inside there is going to be an array of objects.

00:47.790 --> 00:52.230
Each of those objects will have a message that describes the era that occurred and optionally will have

00:52.230 --> 00:56.160
a field that refers to the what this era is tied to.

00:56.580 --> 01:02.040
So, for example, if there's an issue with some email address, we would have a field of email and

01:02.040 --> 01:04.950
a message of invalid email or something similar to that.

01:05.160 --> 01:09.270
Now note that this is in kind of typescript interface syntax right here.

01:09.780 --> 01:11.850
So you'll notice the empty brackets that I have right here.

01:11.850 --> 01:16.530
That means that this object is going to be a array of objects with that exact structure.

01:17.160 --> 01:20.580
So errors is going to be an array of objects.

01:20.880 --> 01:26.100
And each of those objects are required to have a message property that is a string and possibly optionally

01:26.100 --> 01:27.690
a field that is a string as well.

01:28.440 --> 01:32.670
So again, this is the common structure we're going to have everywhere inside of our application.

01:33.790 --> 01:35.200
For heirs, of course.

01:36.050 --> 01:41.240
So when we talk about doing some actual handling or generation of response inside of our air handling

01:41.240 --> 01:46.130
middleware, we're not actually just going to take the reasons property off of, say, the request validation

01:46.130 --> 01:49.300
error or just the reason property off the database connection error.

01:49.310 --> 01:54.350
Instead, we want to make sure that we take these errors and the reason or messaging around them and

01:54.350 --> 01:57.020
form them all into this common response structure.

01:57.170 --> 01:59.810
So let's try doing that right now back inside of our middleware.

02:01.910 --> 02:03.010
So here's our middleware.

02:03.020 --> 02:05.540
We need to go around to each of these different if statements.

02:05.540 --> 02:10.250
So if statement one and if statement two, we're going to take a look at the air that just appeared

02:10.250 --> 02:11.330
inside of our middleware.

02:11.450 --> 02:14.030
We're going to extract some details about that air.

02:14.030 --> 02:19.340
We're going to massage them essentially or transform them into this exact format right here and then

02:19.340 --> 02:21.140
send the response back to the user.

02:21.710 --> 02:27.440
So we're going to first start off with our instance of right here of request, validation, error.

02:27.710 --> 02:32.300
Let's get a quick reminder on what all the different error messaging inside there looks like.

02:32.660 --> 02:35.660
So I'm going to go to the definition of request validation error.

02:36.080 --> 02:39.770
And as you'll recall, this thing is going to have an errors property assigned to it.

02:39.860 --> 02:45.690
That's going to be an array of validation error and a validation error if we hover over it.

02:45.710 --> 02:51.080
You'll recall as a program, property, a message, location and value.

02:51.790 --> 02:58.120
So we need to take this ers array right here and we're going to transform it into this structure right

02:58.120 --> 02:58.630
here.

02:59.020 --> 03:01.210
That's what we have to do back inside of our middleware.

03:02.790 --> 03:04.170
So inside of my middleware.

03:05.450 --> 03:10.750
I'm going to first define a variable called formatted errors and I'll get that from error.

03:10.760 --> 03:12.770
So that's our request validation error.

03:14.010 --> 03:15.780
Dot Air's dot map.

03:16.630 --> 03:19.150
So we will map over each air.

03:21.200 --> 03:27.470
And for each error, we're going to make sure that we return an object that has a message and possibly

03:27.470 --> 03:28.370
a field as well.

03:29.180 --> 03:30.260
So I will return.

03:31.320 --> 03:32.250
Message.

03:32.250 --> 03:38.730
The value from that is going to come from error message and field, and the value for that will come

03:38.730 --> 03:40.680
from error dot.

03:41.720 --> 03:42.350
Harambe.

03:45.200 --> 03:49.310
So again, just to make sure that step was really clear, we took all the errors.

03:49.310 --> 03:52.910
Remember, this is the information that we wanted to communicate from our route handler over to the

03:52.910 --> 03:54.080
area handling middleware.

03:54.110 --> 03:59.000
We wanted to take that array of validation errors that we got back from Express Validator and we wanted

03:59.000 --> 04:01.610
to transform it into this structure right here.

04:01.610 --> 04:04.220
And that's what we are doing with this mapping statement.

04:06.540 --> 04:11.010
So now that we've built out this list of formatted errors, we can take it and send it back to the user.

04:11.440 --> 04:16.290
So I'll put in a return because we want to return early and not execute anything else inside of here.

04:17.280 --> 04:20.160
And we'll do a rest status.

04:21.140 --> 04:21.950
400.

04:23.670 --> 04:24.990
And then we will send.

04:25.630 --> 04:26.770
An object.

04:27.660 --> 04:29.700
That has a list of errors.

04:31.060 --> 04:33.440
As formatted airs like so.

04:33.910 --> 04:34.540
Just be clear.

04:34.540 --> 04:40.810
I said that we had to transform the errors inside of our request validation error into this structure

04:40.810 --> 04:41.380
right here.

04:41.380 --> 04:45.550
Just to be really precise, what we really just did with that mapping statement was essentially generate

04:45.550 --> 04:49.000
that array of objects, and that's why we took the result of that.

04:49.000 --> 04:50.500
So that's the array of objects.

04:50.770 --> 04:56.140
We threw them into this object with errors to make sure that we conform to this structure right here.

04:57.720 --> 04:59.060
All right, so let's save this.

04:59.070 --> 05:02.700
Well, then go over to Boseman and do a quick test.

05:04.560 --> 05:08.670
So I want to test out that invalid request and alert.

05:09.300 --> 05:12.240
I'm going to make sure I put in an invalid email.

05:12.270 --> 05:13.260
I'll send this off.

05:13.830 --> 05:15.060
And there we go.

05:15.600 --> 05:17.920
So you'll notice that we now have an object.

05:17.940 --> 05:19.410
It has an Ayres property.

05:19.410 --> 05:21.960
And then inside there is an array of objects.

05:22.230 --> 05:26.370
Each object has a message and possibly a field as well.

05:26.820 --> 05:30.030
So now our response coming back from our error handling middleware.

05:30.060 --> 05:36.390
When we get a error of type request, validation error is going to always conform to this exact error

05:36.390 --> 05:37.500
response structure.

05:38.100 --> 05:41.880
Because remember, we want to make sure that every single error that we ever send back to our React

05:41.880 --> 05:44.400
app is always going to follow this structure.

05:44.400 --> 05:50.010
So the React app does not need to know how to implement 50 different error parsing methods.

05:51.240 --> 05:51.510
Okay.

05:51.510 --> 05:55.740
So we're pretty much going to repeat the same exact process or something very similar to it for our

05:55.740 --> 05:57.090
database connection here now.

05:57.620 --> 06:02.600
So in this case, I'm going to return early because I don't want to run anything else inside of here.

06:04.130 --> 06:06.290
I'll do a resident status.

06:08.410 --> 06:13.840
In this case, it's not really appropriate to use a status code of 400 400 means bad request, which

06:13.840 --> 06:16.120
usually indicates that the user sent us some bad data.

06:16.480 --> 06:19.990
In this case, if we have a database connection here that's really indicating that there is something

06:19.990 --> 06:24.700
wrong with our server and so we should really use a 500 status code for that or something similar.

06:24.850 --> 06:27.550
So we could always look up our list of HTTP.

06:28.610 --> 06:29.720
Status codes.

06:31.780 --> 06:37.150
And it might be a little bit more appropriate to do something like a 500 era in this case to say, hey,

06:37.150 --> 06:39.850
sorry, something internally is not quite right.

06:39.850 --> 06:41.560
Or maybe even a 503.

06:41.890 --> 06:42.520
Either one?

06:42.520 --> 06:42.790
Totally.

06:42.790 --> 06:43.120
Fine.

06:43.120 --> 06:44.860
Let's just go with the 500 in this case.

06:46.970 --> 06:49.790
And then I'll send again the exact same structure.

06:50.520 --> 06:51.720
So we'll do airs.

06:52.290 --> 06:56.760
Let's go and get a reminder of all the data that is available to us inside of database connection here.

06:57.120 --> 07:01.230
So go back to that area definition here is database connection error right here.

07:01.230 --> 07:06.480
And you'll recall that in this case we've got that reason property that is storing the reason that we

07:06.480 --> 07:08.400
just threw this database connection error.

07:10.800 --> 07:11.940
So in this case.

07:14.030 --> 07:16.820
We can't send back an array that will create manually.

07:17.810 --> 07:18.790
Inside there.

07:18.800 --> 07:25.430
I'll just give it a message and I'll assign to message e r dot reason like so.

07:27.030 --> 07:31.050
So again, we still have that same exact structure that we said that we want to have for every single

07:31.170 --> 07:33.270
response we've got our.

07:33.980 --> 07:38.370
Array of objects where each one has a message and possibly a field.

07:38.390 --> 07:40.700
In this case, there's no field to tie to our message.

07:40.700 --> 07:42.500
So we are not including that field.

07:44.110 --> 07:44.350
Yes.

07:44.350 --> 07:45.250
Let's save this.

07:45.520 --> 07:47.890
We'll go back over to Postman and do another test.

07:48.460 --> 07:50.490
So inside of Postman, I'm going to update my email again.

07:50.500 --> 07:55.210
I'm going to put in a valid email to make sure that I get the database connection error.

07:55.870 --> 07:56.920
I'll send this off.

07:57.160 --> 08:02.680
And now we get a 500 internal server error and I've got the exact same structure as before.

08:03.160 --> 08:03.820
Awesome.

08:05.980 --> 08:07.450
Now, last thing we need to take care of.

08:08.230 --> 08:10.630
Is the final response type right here.

08:11.290 --> 08:15.610
So if we don't understand the error that just came in, if this is just some generic error that we didn't

08:15.610 --> 08:19.390
really plan on, we still need to make sure that this follows the same structure that we said we were

08:19.390 --> 08:20.960
going to follow for everything else.

08:20.980 --> 08:24.370
So that same kind of errors, that's an array of objects.

08:24.700 --> 08:27.970
Right now, it's just sending back a single object that has a message property.

08:28.800 --> 08:30.510
We can replace that with airs.

08:32.340 --> 08:33.540
I'll put in an array.

08:34.290 --> 08:40.440
I'll give it one object with a message and we can either just try to take the message property off the

08:40.440 --> 08:43.200
incoming air, or we could put in a more generic thing.

08:43.200 --> 08:44.280
Just something like.

08:45.530 --> 08:48.860
Something went wrong or something like that.

08:50.340 --> 08:50.640
Okay.

08:50.640 --> 08:51.600
So let's save this.

08:53.050 --> 08:56.650
And we'll just do one last test, even though we don't really have the ability to really test out that

08:56.650 --> 08:57.460
final error.

08:57.490 --> 08:59.890
I'll just send and make sure that I still have everything working.

08:59.920 --> 09:01.390
Yeah, it looks like it's still working.

09:02.410 --> 09:02.680
Okay.

09:02.680 --> 09:06.780
So at this point in time, we've now seen kind of the entire start to finish.

09:06.790 --> 09:12.610
We've seen that we wanted to have these very common structures for every single thing that could possibly

09:12.610 --> 09:17.440
go wrong inside of our application, so that our React application can always take the air and work

09:17.440 --> 09:21.370
with it, and somehow, without needing to have a intricate understanding of what's going on behind

09:21.370 --> 09:22.060
the scenes.

09:23.630 --> 09:27.080
We did this by creating this custom area handling middleware.

09:27.900 --> 09:32.940
We needed to transfer some very precise information about all these errors that occurred from the request

09:32.940 --> 09:38.940
handler into the error handling middleware, which is why we subclass the Airbase class into request

09:38.940 --> 09:41.100
validation error and database connection error.

09:41.780 --> 09:45.600
So then any time that we saw these errors up here inside of our middleware, we could check to see if

09:45.600 --> 09:48.030
that error is is of a particular type.

09:48.030 --> 09:51.690
And if it is, then we'll go ahead and interpret that error accordingly.

09:52.850 --> 09:57.480
Again, this really is a good example right here, but we are not quite done yet.

09:57.500 --> 10:01.430
As I mentioned, there's still a couple of improvements we're going to throw on top of this to make

10:01.430 --> 10:05.630
it even easier to use from our different route handlers.

10:06.490 --> 10:07.630
And what we have right now.

10:08.330 --> 10:09.600
So it's still a little bit to go.

10:09.620 --> 10:11.960
Quick pause right here and we'll continue in just a moment.

WEBVTT

00:01.660 --> 00:05.650
As we discussed in the last video, let's implement this custom abstract class.

00:05.800 --> 00:08.500
This is going to extend the base error class.

00:08.920 --> 00:13.570
We're then going to make sure that request validation error and database connection error extend custom

00:13.570 --> 00:16.120
error instead of the error built in.

00:16.480 --> 00:17.560
So let's get to it.

00:18.360 --> 00:20.790
Back inside my editor, I'll find the ears directory.

00:20.820 --> 00:24.810
I'm going to make a new file inside there called Custom Airports.

00:25.500 --> 00:28.590
Then inside of here, I'm going to declare a new class.

00:30.380 --> 00:32.270
New abstract class to be precise.

00:32.270 --> 00:33.890
So abstract class.

00:34.160 --> 00:35.210
Custom air.

00:36.360 --> 00:41.520
And this is going to extend or extends the built in air class.

00:42.730 --> 00:47.560
Then inside of here, we're going to list out all the different properties that must be defined by any

00:47.560 --> 00:50.530
class that extends this very similar to how an interface works.

00:50.530 --> 00:54.880
Remember, we write out interfaces and then we try to satisfy the interface.

00:55.090 --> 01:00.250
Same thing with abstract classes or the way in which we write out these properties that subclasses must

01:00.250 --> 01:00.610
implement.

01:00.610 --> 01:01.840
It's just slightly different.

01:02.140 --> 01:06.550
We're going to write out abstract status code number.

01:06.910 --> 01:12.610
So this is saying that if you're going to extend customer, you got to have a status code property and

01:12.610 --> 01:13.660
it must be a number.

01:14.890 --> 01:16.360
By writing out abstract right there.

01:16.360 --> 01:19.390
That's what's saying that a subclass must implement this thing.

01:19.990 --> 01:21.390
So we can test this out right away.

01:21.400 --> 01:24.040
We can say, Hey, let's have a new class right here.

01:24.120 --> 01:27.700
About something like not found error.

01:29.090 --> 01:32.930
And we'll try to extend customer to right away.

01:32.930 --> 01:33.800
We'll get an error.

01:34.010 --> 01:38.480
It says, hey, you need to make sure that you implement that status code property.

01:39.080 --> 01:41.480
So if we put inside of your status code.

01:42.490 --> 01:44.320
Four of four, it goes away.

01:44.620 --> 01:49.570
So again, very similar in nature to a interface, but we're using a class instead.

01:50.380 --> 01:54.760
Because that's going to allow us to carry a actual class definition over to the JavaScript world.

01:55.640 --> 01:58.070
So next up, we will define a constructor.

01:58.940 --> 02:02.930
The only reason that we are defining a constructor is to make sure we can put in that special little

02:02.930 --> 02:07.400
line of code that we've seen once or twice now that is required any time that we are trying to extend

02:07.400 --> 02:08.570
a built in class.

02:08.990 --> 02:14.510
So it's that same thing that we wrote out over inside of both database connection error and request

02:14.510 --> 02:14.990
validation.

02:14.990 --> 02:17.540
Error is that object set prototype of thing.

02:18.780 --> 02:23.400
So back inside of our custom abstract class, I can make sure I copy one of those over and I'll make

02:23.400 --> 02:27.330
sure that I update the name of the class right there as well to customer.

02:28.240 --> 02:32.170
Because we are defining a constructor, we do have to define super like so.

02:35.360 --> 02:39.920
Then after that, let's set up our other method or the other requirement of anything that wants to be

02:39.920 --> 02:40.850
a customer.

02:41.270 --> 02:46.160
So I'm going to say you must have an abstract method of serialize errors.

02:47.830 --> 02:49.800
So we're not actually defining a method here.

02:49.810 --> 02:52.030
Instead, we are defining a method signature.

02:52.030 --> 02:58.990
So we're saying that to extend customary, you have to define serialize errors and it must return something

02:58.990 --> 03:01.540
that is going to be an array of objects.

03:01.870 --> 03:08.080
And each object must have a message that is a string and optionally can have a field that is a string

03:08.080 --> 03:08.650
as well.

03:09.980 --> 03:10.850
And there we go.

03:15.180 --> 03:19.860
So now we can go back around to our other two custom classes, the database connection error and request

03:19.860 --> 03:20.730
validation error.

03:21.000 --> 03:26.010
We're going to make sure that they extend customer and that's going to put in this requirement that

03:26.010 --> 03:29.940
they must implement a status code and serialize errors with the appropriate signature.

03:30.510 --> 03:34.110
They'll first go over to database connection error at the very top.

03:34.110 --> 03:39.120
I'm going to import custom error from customer.

03:41.690 --> 03:48.200
Now, rather than extending the air built in class, we want this thing to extend custom air.

03:49.440 --> 03:50.100
Like so.

03:51.340 --> 03:56.470
So now if we ever put any type of inside of here, if we ever forget to implement status code, we're

03:56.470 --> 03:57.280
going to get an error.

03:57.520 --> 04:00.280
If we ever misspell status code, we'll get in there.

04:00.760 --> 04:05.470
If we ever return something from serialize errors that does not have the correct structure like just

04:05.470 --> 04:07.000
IM, we'll get an error.

04:07.330 --> 04:12.790
And so again, this is all about making sure that we are implementing these custom error classes correctly.

04:14.840 --> 04:19.070
Now we can repeat that same process inside of request validation here as well.

04:19.520 --> 04:22.250
So at the top I'll do an import custom error.

04:23.840 --> 04:25.010
From customer.

04:25.130 --> 04:28.760
And again I'll update that extend statement to custom air like so.

04:29.450 --> 04:34.490
So again, if I forget to implement status code, it gets an error if I ever make a typo instead of

04:34.490 --> 04:35.510
serialize errors.

04:36.280 --> 04:37.450
We get an ear as well.

04:38.710 --> 04:39.040
Okay.

04:39.040 --> 04:40.840
Let's say that this is a definite improvement.

04:40.840 --> 04:44.950
It's going to make sure that we always implement these classes 100% correctly.

04:45.040 --> 04:49.560
All we have to do is remember to import custom air.

04:49.570 --> 04:54.540
We build a class, we extend customer, and then TypeScript is going to take it from there.

04:54.550 --> 04:58.750
TypeScript is going to tell you, Hey, if you want to be a customer, you got to have that property,

04:58.750 --> 05:03.430
you got to have serialize errors and you won't need anything else, any other information to understand

05:03.430 --> 05:05.680
how to do this stuff or how to actually build out a custom air.

05:05.680 --> 05:08.020
Because TypeScript is going to guide you along the way.

05:09.010 --> 05:09.280
All right.

05:09.280 --> 05:11.870
So now there is one last very quick thing I want to take care of.

05:11.890 --> 05:13.450
Just a very small oversight.

05:14.900 --> 05:15.710
Insight of custom.

05:16.340 --> 05:22.520
We are extending the air class now as a reminder, normally when we create a new air or throw in air,

05:22.520 --> 05:24.050
we'd write out something like new air.

05:24.080 --> 05:26.090
Then we put the reason for the air inside of here.

05:26.420 --> 05:31.610
So generally, whenever we create an air instance, we pass in a string describing exactly what just

05:31.610 --> 05:32.270
happened.

05:32.720 --> 05:38.300
As we've discussed a billion times now, we didn't really want to rely upon that string too much for

05:38.300 --> 05:41.900
trying to communicate any information that eventually will get sent back out to the user.

05:42.170 --> 05:48.050
However, these air messages or whatever string we put inside there will still be printed out inside

05:48.050 --> 05:49.280
of our server logs.

05:49.280 --> 05:53.990
And so it kind of would be nice if something goes wrong inside of our application to still have some

05:53.990 --> 05:58.280
kind of actual string, something that says, Hey, for logging purposes.

05:58.310 --> 05:59.720
Here's what just happened.

06:00.560 --> 06:02.570
So to make sure that we still have that behavior.

06:03.790 --> 06:07.180
Or to essentially have something equivalent to this right here.

06:07.420 --> 06:11.850
We need to make sure that whenever we create an instance of something that is an error, we pass in

06:11.860 --> 06:16.060
the error message or this string into that super function right there.

06:16.060 --> 06:20.170
When we call super right there, that's equivalent to calling new error more or less.

06:20.680 --> 06:26.350
So I'm going to say, in addition to being a customer, in addition to having a status code and serialize

06:26.350 --> 06:28.960
errors and all that stuff, you also have to make sure.

06:30.260 --> 06:36.110
That you provide a message that is a string and we'll just take that message and pass it on through

06:36.140 --> 06:37.160
to the air.

06:38.910 --> 06:40.050
So now when I save that.

06:40.770 --> 06:45.360
We're going to get an error from our database connection error and request validation as well because

06:45.360 --> 06:48.790
they want to see a string or a default message being passed in.

06:48.810 --> 06:50.760
So again, this is just for logging purposes.

06:50.760 --> 06:53.540
So we can put something inside of here that really just makes sense to you and I.

06:53.700 --> 06:59.910
So we could say something inside of here, like here, connecting to DB again, really just duplicating

06:59.910 --> 07:01.080
the reason right there.

07:01.530 --> 07:03.780
And then same thing for request validation.

07:03.780 --> 07:06.600
We can put in something like invalid request.

07:07.340 --> 07:08.240
Parameters.

07:08.840 --> 07:11.380
And again, this is really just for logging purposes.

07:11.390 --> 07:14.870
This is never going to be sent out to any of our users or anything like that.

07:16.120 --> 07:16.450
All right.

07:16.450 --> 07:17.290
Very last thing.

07:17.290 --> 07:19.060
I swear, I noticed that that so many times.

07:19.060 --> 07:22.930
But I really promise at this time last thing we're going to do, we're going to reap the benefits of

07:22.930 --> 07:26.110
all this air stuff inside of our air handler middleware.

07:26.410 --> 07:31.390
Now, rather than writing out these separate if statements and watching for every possible custom air

07:31.390 --> 07:37.420
class, any customer we build should be technically an instance of the custom air class.

07:37.690 --> 07:41.830
So we can change these if statements and condense them down to just one single check.

07:42.760 --> 07:47.410
At the very top, I'm going to delete those two important statements or the very specific customers

07:47.410 --> 07:48.190
we put together.

07:49.260 --> 07:51.900
And I will replace it with customer.

07:52.820 --> 07:59.060
From up one directory air's custom air and now we can go down to just one if statement still going to

07:59.060 --> 08:00.080
delete the second one.

08:01.200 --> 08:05.520
And we can update the instance of check to be custom error instead.

08:06.880 --> 08:07.720
And that's it.

08:08.470 --> 08:15.400
So now if we throw any air from a request handler, that is extending custom air.

08:16.210 --> 08:18.700
Our air handling middleware is going to handle it appropriately.

08:18.700 --> 08:22.690
It's going to take the status code off the custom air instance.

08:22.990 --> 08:28.450
It's going to call serialize errors, and this is going to 100% guarantee as best as we possibly can

08:28.450 --> 08:33.970
that whenever we send a response back from any root handler in any of our services, we're always going

08:33.970 --> 08:37.360
to have a very consistent structure going back.

08:37.480 --> 08:39.580
So something that looks like this right here.

08:39.580 --> 08:43.420
But of course we did end up with message and field like so.

08:44.050 --> 08:49.840
So we'll always have guarantees as best we can once again that we will end up with this structure.

08:51.400 --> 08:51.850
Hmm.

08:51.880 --> 08:52.330
All right.

08:52.330 --> 08:55.720
Once again, I know this area handling stuff has been really nasty.

08:56.710 --> 08:58.040
But we're finally done with it.

08:58.060 --> 09:02.320
One of the reasons that we spent so much time on this era handling stuff is that it turns out that there

09:02.320 --> 09:07.480
is actually a couple other locations or a couple of other things we have to do in all these microservices.

09:07.480 --> 09:10.690
That's going to be relatively similar in nature to what we just did.

09:11.050 --> 09:16.240
So we have tried to essentially condense down a ton of functionality, make it reusable in nature,

09:16.240 --> 09:21.340
and we also try to build up some type guarantees through the use of this abstract class right here.

09:22.060 --> 09:26.140
There are going to be some other scenarios, some other things we're going to go through where we want

09:26.140 --> 09:30.790
to guarantee functionality again as best we can across all of our different services.

09:31.090 --> 09:35.410
Most specifically, this really comes down to a lot of that event handling stuff that we did manually

09:35.410 --> 09:37.180
back on our last project.

09:37.360 --> 09:41.170
So we're going to go through a somewhat similar process when we start to build out all the event handling

09:41.170 --> 09:42.280
stuff this time around.

09:42.460 --> 09:46.240
And again, that's why I want to go through this kind of deep dive on the air handling stuff, make

09:46.240 --> 09:51.250
sure it was clear about why we were creating the abstract classes, why we were extending a base class,

09:51.250 --> 09:56.140
why we wanted to guarantee the structure of data coming to the middleware and all this good stuff.

09:57.280 --> 10:00.030
Well, before we stop, we probably should do just a very quick test here.

10:00.040 --> 10:00.700
Why not?

10:00.880 --> 10:02.230
I'm going to go over to Postman.

10:02.380 --> 10:04.630
I'm going to try to sign up with an invalid email.

10:06.150 --> 10:06.390
Okay.

10:06.450 --> 10:07.140
Looks good.

10:07.620 --> 10:09.780
And I'll put in a valid email.

10:11.890 --> 10:13.780
And I get air connecting to database.

10:13.810 --> 10:14.440
Awesome.

10:15.630 --> 10:16.230
This looks good.

10:16.250 --> 10:18.870
So let's take a pause right here and continue in just a minute.

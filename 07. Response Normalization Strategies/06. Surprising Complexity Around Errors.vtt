WEBVTT

00:01.150 --> 00:05.830
We were just able to get some air messages inside a postman, which means we're now doing some validation

00:05.830 --> 00:07.150
of the incoming request.

00:07.480 --> 00:12.610
Now, this definitely all seems good, but it also opens the door to a really interesting topic that

00:12.610 --> 00:15.430
we're actually going to spend a lot of time on in this application.

00:15.430 --> 00:20.170
And this is a topic that we have not brushed upon or even discussed even remotely in the course so far.

00:20.330 --> 00:21.990
Kind of an interesting thing overall.

00:22.000 --> 00:24.100
So let me show you a quick diagram or two.

00:24.700 --> 00:25.030
All right.

00:25.030 --> 00:29.500
So here's what's going on inside of our application right now, or at least will be very shortly.

00:29.860 --> 00:33.380
Right now, we are making a request from Postman, not a React application.

00:33.400 --> 00:36.400
Well, let's just imagine for a second that we do build out that React app.

00:37.810 --> 00:40.300
So we will have our React app running inside of a browser.

00:40.330 --> 00:45.430
A user at some point in time is going to attempt to sign up for an account and maybe they enter in an

00:45.430 --> 00:50.710
invalid email or they enter an invalid password, whatever it is, some kind of invalid data that's

00:50.710 --> 00:52.390
going to be sent to our service.

00:52.690 --> 00:57.340
Our off service, of course, is currently working with EXPRESS and the actual validation is being done

00:57.340 --> 00:58.900
with Express Validator.

01:00.080 --> 01:05.060
So because you're are sending in some invalid data, we get back a response that has this kind of structure

01:05.060 --> 01:05.750
right here.

01:05.780 --> 01:11.420
This is abbreviated, but it's more or less the structure of what we just got back inside of our response.

01:11.420 --> 01:12.860
So it's an array of objects.

01:13.040 --> 01:14.720
Each object has a value.

01:14.930 --> 01:18.650
MSG short for message, ram and location.

01:19.130 --> 01:23.570
If we had multiple properties that were invalid, they would all be listed out inside of separate objects

01:23.570 --> 01:24.590
inside this array.

01:24.800 --> 01:28.160
And so you can see that's kind of the structure of the response we just got back.

01:28.640 --> 01:34.340
Now, really important note here we are only getting this structure of response.

01:34.340 --> 01:40.940
In other words, an array of objects with a message, property, a program, and those other two because

01:40.940 --> 01:43.280
we are using express validator.

01:43.820 --> 01:47.360
The structure of response you see right here is not necessarily standard.

01:47.360 --> 01:51.190
We're not following a standard express validator is not following a standard.

01:51.200 --> 01:55.820
There's not some standard out there or some document out there online that says, Oh, yeah, this is

01:55.820 --> 01:58.430
how you need to send back some list of validation errors.

01:58.580 --> 02:03.620
Instead, someone who put together express validators said, like the actual author of that library,

02:03.620 --> 02:04.880
they sat down and said, You know what?

02:04.880 --> 02:09.440
I think that this is a response that kind of makes sense to describe what just went wrong with this

02:09.440 --> 02:10.280
validation.

02:12.310 --> 02:18.520
Now the reason that is relevant is that we are in a microservices architecture and remember at some

02:18.520 --> 02:23.170
point in time we're going to have to start to introduce many other services into our application.

02:23.530 --> 02:26.830
So we might have an order service and a payment service as well.

02:27.340 --> 02:31.780
The other thing that's really relevant is that these other services could be built using completely

02:31.780 --> 02:34.060
different languages and frameworks.

02:34.480 --> 02:39.300
So we are going to of course, build everything inside of our app with Express and Express Validator,

02:39.310 --> 02:43.570
but we could very easily imagine that if we were working on some professional project, the order service

02:43.570 --> 02:48.480
might be using some Ruby on Rails API and the Payment Service might be using Java Spring.

02:48.490 --> 02:51.520
So totally different languages, totally different frameworks.

02:52.120 --> 02:58.120
Chances are, I don't know this off the top of my head, but chances are that if we ever have our React

02:58.120 --> 03:02.830
application, submit some invalid data to a Ruby on Rails app.

03:03.010 --> 03:08.110
The Ruby on Rails app is probably going to give back some response that looks very different than the

03:08.110 --> 03:10.930
one that we just got back from Express Validator.

03:11.530 --> 03:13.510
And same thing with Java Spring as well.

03:13.510 --> 03:19.030
If we submit some invalid data and Java Spring does some validation on that incoming request, it might

03:19.030 --> 03:22.720
send back response that looks even more different than the Ruby on Rails one.

03:23.510 --> 03:27.860
So what I'm trying to say here is that in a microservices environment where we're going to have multiple

03:27.860 --> 03:32.540
different languages, multiple different frameworks running on all these different services, whenever

03:32.540 --> 03:38.210
we submit some invalid data to these different services, we're going to get back a response that might

03:38.210 --> 03:40.940
have a very different looking structure.

03:41.770 --> 03:43.030
Now a quick question for you.

03:43.420 --> 03:45.130
Is that a problem?

03:45.430 --> 03:46.480
Is that an issue?

03:47.110 --> 03:50.160
Well, I'm going to say it is a tremendous issue.

03:50.170 --> 03:52.360
I'm going to say that is a huge problem.

03:52.390 --> 03:53.500
Here's why.

03:53.800 --> 03:58.810
We are assuming that all these very different response structures are going to be going back to the

03:58.810 --> 04:00.700
same exact React application.

04:01.090 --> 04:06.430
So inside of our React app, we are going to have to encode the knowledge of how to work with these

04:06.430 --> 04:08.590
different kinds of responses.

04:09.040 --> 04:14.470
The React app is going to have to know that if it is making a request to the service, it should respect

04:14.710 --> 04:20.230
or should expect a response that looks like this right here, or an array of objects with those exact

04:20.230 --> 04:21.010
properties.

04:21.610 --> 04:26.380
The React app will also have to know that if it is making a request to the Order Service, it should

04:26.380 --> 04:28.960
expect a response that looks like that.

04:28.960 --> 04:31.600
And same thing with this payment service down here as well.

04:32.410 --> 04:36.730
So the engineers who are in charge of this front end application are going to have to have a very in-depth

04:36.730 --> 04:42.760
knowledge of exactly what kind of air structure they're going to get back from each of these very particular

04:42.760 --> 04:43.600
services.

04:45.020 --> 04:49.180
And as you can guess, that's not really a responsibility that we want to throw on the engineers.

04:49.190 --> 04:51.080
We're building our React application.

04:51.880 --> 04:58.000
So as we start to build out all these different services, we need to make absolutely sure that every

04:58.000 --> 05:04.900
single one is going to send back a identical looking structure any time there is some error that occurs.

05:05.350 --> 05:10.630
So we want to make sure that our React app only has knowledge of how to parse exactly one kind of error

05:10.630 --> 05:11.440
response.

05:11.680 --> 05:15.790
It should always be maybe an array of objects or just a simple object.

05:16.120 --> 05:18.920
We can use any structure for this response that we want.

05:18.940 --> 05:24.170
We just need to make sure that it is 100% consistent between all of our different services.

05:24.190 --> 05:29.980
Again, so these react engineers don't have to understand that, oh, I'm making a request to my service.

05:29.980 --> 05:31.560
I should expect some kind of a response.

05:31.570 --> 05:34.120
It looks like that versus something totally different.

05:34.720 --> 05:38.950
So as I mentioned at the start of this video, we're actually going to spend a lot of time in this course

05:38.950 --> 05:43.780
to make sure that we've got extremely consistent air structures anytime we make a request to any of

05:43.780 --> 05:44.950
our different services.

05:45.460 --> 05:49.630
This will be a lot easier than it sounds, mostly because remember, we're going to end up creating

05:49.630 --> 05:53.920
that shared library that has a lot of code that we're going to share between all of our different services.

05:53.920 --> 05:58.480
And that's how we're going to make this approach of handling errors rather easy and straightforward.

05:59.180 --> 05:59.330
Okay.

05:59.480 --> 06:01.360
So with all that in mind, quick pause right here.

06:01.370 --> 06:06.320
We're going to start doing some further work on our validation and the response in just a moment.
